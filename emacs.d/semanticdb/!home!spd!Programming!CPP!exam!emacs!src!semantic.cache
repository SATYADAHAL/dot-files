;; Object semanticdb-project-database-file-c47196
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-c47196"
  :tables
  (list
    (semanticdb-table "semanticdb-table-a92266"
      :major-mode c-mode
      :tags 
        '( ("EMACS_LISP_H" variable (:constant-flag t) nil [832 844])
            ("alloca.h" include (:system-flag t) nil [846 865])
            ("setjmp.h" include (:system-flag t) nil [866 885])
            ("stdalign.h" include (:system-flag t) nil [886 907])
            ("stdarg.h" include (:system-flag t) nil [908 927])
            ("stddef.h" include (:system-flag t) nil [928 947])
            ("string.h" include (:system-flag t) nil [948 967])
            ("float.h" include (:system-flag t) nil [968 986])
            ("inttypes.h" include (:system-flag t) nil [987 1008])
            ("limits.h" include (:system-flag t) nil [1009 1028])
            ("intprops.h" include (:system-flag t) nil [1030 1051])
            ("verify.h" include (:system-flag t) nil [1052 1071])
            ("DECLARE_GDB_SYM" variable (:constant-flag t) nil [1493 1508])
            ("DEFINE_GDB_SYMBOL_BEGIN" variable (:constant-flag t) nil [1698 1721])
            ("DEFINE_GDB_SYMBOL_END" variable (:constant-flag t) nil [1775 1796])
            ("max" variable (:constant-flag t) nil [1884 1887])
            ("min" variable (:constant-flag t) nil [1926 1929])
            ("ARRAYELTS" variable (:constant-flag t) nil [2008 2017])
            ("GCTYPEBITS" variable (:constant-flag t) nil [2151 2161])
            ("EMACS_INT" type
               (:typedef ("int")
                :type "typedef")
                nil [2608 2630])
            ("EMACS_UINT" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [2631 2663])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2689 2698)
                        :type "int")
                        (reparse-symbol enumsubparts) [2671 2698])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2719 2729)
                        :type "int")
                        (reparse-symbol enumsubparts) [2700 2729]))                  
                :type "enum")
                nil [2664 2732])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2743 2756])
            ("pI" variable (:constant-flag t) nil [2775 2777])
            ("EMACS_INT" type
               (:typedef ("long int")
                :type "typedef")
                nil [2838 2865])
            ("EMACS_UINT" type
               (:typedef ("unsigned long")
                :type "typedef")
                nil [2866 2899])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2925 2935)
                        :type "int")
                        (reparse-symbol enumsubparts) [2907 2935])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2956 2967)
                        :type "int")
                        (reparse-symbol enumsubparts) [2937 2967]))                  
                :type "enum")
                nil [2900 2970])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2981 2994])
            ("pI" variable (:constant-flag t) nil [3014 3016])
            ("EMACS_INT" variable (:type "long int") nil [3065 3084])
            ("EMACS_UINT" variable (:type "long int") nil [3107 3127])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3153 3164)
                        :type "int")
                        (reparse-symbol enumsubparts) [3135 3164])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3185 3197)
                        :type "int")
                        (reparse-symbol enumsubparts) [3166 3197]))                  
                :type "enum")
                nil [3128 3200])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [3211 3224])
            ("pI" variable (:constant-flag t) nil [3785 3787])
            ("" type
               (:members 
                  ( ("BOOL_VECTOR_BITS_PER_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4009 4036]))                  
                :type "enum")
                nil [4001 4109])
            ("bits_word" type
               (:typedef ("size_t" type (:type "class") nil nil)
                :type "typedef")
                nil [4395 4420])
            ("BITS_WORD_MAX" variable (:constant-flag t) nil [4430 4443])
            ("" type
               (:members 
                  ( ("BITS_PER_BITS_WORD" variable
                       (:constant-flag t
                        :default-value (4481 4491)
                        :type "int")
                        (reparse-symbol enumsubparts) [4460 4491]))                  
                :type "enum")
                nil [4453 4494])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIZE_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4669 4684]))                  
                :type "int")
                nil [4661 4717])
            ("pD" variable (:constant-flag t) nil [5087 5089])
            ("pD" variable (:constant-flag t) nil [5132 5134])
            ("pD" variable (:constant-flag t) nil [5179 5181])
            ("AVOID" variable (:constant-flag t) nil [5296 5301])
            ("eassert" variable (:constant-flag t) nil [6601 6608])
            ("eassume" variable (:constant-flag t) nil [6679 6686])
            ("Lisp_Bits" type
               (:members 
                  ( ("VALBITS" variable
                       (:constant-flag t
                        :default-value (8094 8122)
                        :type "int")
                        (reparse-symbol enumsubparts) [8084 8122])
                    ("FIXNUM_BITS" variable
                       (:constant-flag t
                        :default-value (8210 8221)
                        :type "int")
                        (reparse-symbol enumsubparts) [8196 8221]))                  
                :type "enum")
                nil [7989 8226])
            ("INTTYPEBITS" variable (:constant-flag t) nil [8338 8349])
            ("VAL_MAX" variable (:constant-flag t) nil [8665 8672])
            ("USE_LSB_TAG" variable (:constant-flag t) nil [9115 9126])
            ("VALMASK" variable (:constant-flag t) nil [9319 9326])
            ("GCALIGNMENT" variable (:constant-flag t) nil [9822 9833])
            ("GCALIGNED_UNION_MEMBER" variable (:constant-flag t) nil [10915 10937])
            ("GCALIGNED_STRUCT" variable (:constant-flag t) nil [11091 11107])
            ("GCALIGNED" variable (:constant-flag t) nil [11123 11132])
            ("LISP_WORDS_ARE_POINTERS" variable (:constant-flag t) nil [11428 11451])
            ("Lisp_Word" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [11550 11578])
            ("lisp_h_XLI" variable (:constant-flag t) nil [13096 13106])
            ("lisp_h_XIL" variable (:constant-flag t) nil [13124 13134])
            ("lisp_h_XLP" variable (:constant-flag t) nil [13152 13162])
            ("lisp_h_CHECK_FIXNUM" variable (:constant-flag t) nil [13539 13558])
            ("lisp_h_CHECK_SYMBOL" variable (:constant-flag t) nil [13608 13627])
            ("lisp_h_CHECK_TYPE" variable (:constant-flag t) nil [13677 13694])
            ("lisp_h_CONSP" variable (:constant-flag t) nil [13781 13793])
            ("lisp_h_EQ" variable (:constant-flag t) nil [13828 13837])
            ("lisp_h_FIXNUMP" variable (:constant-flag t) nil [13873 13887])
            ("lisp_h_FLOATP" variable (:constant-flag t) nil [14048 14061])
            ("lisp_h_NILP" variable (:constant-flag t) nil [14097 14108])
            ("lisp_h_SET_SYMBOL_VAL" variable (:constant-flag t) nil [14133 14154])
            ("lisp_h_SYMBOL_CONSTANT_P" variable (:constant-flag t) nil [14261 14285])
            ("lisp_h_SYMBOL_TRAPPED_WRITE_P" variable (:constant-flag t) nil [14357 14386])
            ("lisp_h_SYMBOL_VAL" variable (:constant-flag t) nil [14435 14452])
            ("lisp_h_SYMBOLP" variable (:constant-flag t) nil [14544 14558])
            ("lisp_h_TAGGEDP" variable (:constant-flag t) nil [14595 14609])
            ("lisp_h_VECTORLIKEP" variable (:constant-flag t) nil [14748 14766])
            ("lisp_h_XCAR" variable (:constant-flag t) nil [14807 14818])
            ("lisp_h_XCDR" variable (:constant-flag t) nil [14849 14860])
            ("lisp_h_XCONS" variable (:constant-flag t) nil [14893 14905])
            ("lisp_h_XHASH" variable (:constant-flag t) nil [14985 14997])
            ("DEFINE_KEY_OPS_AS_MACROS" variable (:constant-flag t) nil [16138 16162])
            ("INTMASK" variable (:constant-flag t) nil [17727 17734])
            ("case_Lisp_Int" variable (:constant-flag t) nil [17780 17793])
            ("ENUM_BF" variable (:constant-flag t) nil [18110 18117])
            ("Lisp_Object" type
               (:typedef ("Lisp_Word" type (:type "class") nil nil)
                :type "typedef")
                nil [22240 22270])
            ("LISP_INITIALLY" variable (:constant-flag t) nil [22280 22294])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [22717 22733])
            ("ATTRIBUTE_PURE" variable (:type "int") nil [22967 22982])
            ("initialized" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [23428 23452])
            ("gflags" variable (:type "int") nil [24213 24220])
            ("false" variable (:type "int") nil [24338 24344])
            ("false" variable (:type "int") nil [24481 24487])
            ("false" variable (:type "int") nil [24617 24623])
            ("false" variable (:type "int") nil [24747 24753])
            ("false" variable (:type "int") nil [24883 24889])
            ("false" variable (:type "int") nil [25013 25019])
            ("true" variable (:type "int") nil [25354 25359])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [26045 26068])
            ("VALBITS" variable (:type "int") nil [26112 26120])
            ("XUNTAG" variable (:constant-flag t) nil [26556 26562])
            ("fwdptr" variable
               (:pointer 1
                :type "void")
                nil [26946 26965])
            ("lispfwd" variable (:type "int") nil [26968 26976])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("gcmarkbit" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [27420 27442])
                                ("redirect" variable
                                   (:suffix ":3"
                                    :type ("symbol_redirect" type (:type "enum") nil nil))
                                    (reparse-symbol classsubparts) [27751 27790])
                                ("trapped_write" variable
                                   (:suffix ":2"
                                    :type ("symbol_trapped_write" type (:type "enum") nil nil))
                                    (reparse-symbol classsubparts) [27945 27994])
                                ("interned" variable
                                   (:suffix ":2"
                                    :type "unsigned int")
                                    (reparse-symbol classsubparts) [28097 28119])
                                ("declared_special" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [28264 28293])
                                ("pinned" variable
                                   (:suffix ":1"
                                    :type ("bool_bf" type (:type "class") nil nil))
                                    (reparse-symbol classsubparts) [28373 28392])
                                ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [28450 28467])
                                ("val" variable (:type ("" type
                                     (:members 
                                        ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [28622 28640])
                                          ("alias" variable
                                             (:pointer 1
                                              :type ("Lisp_Symbol" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [28642 28668])
                                          ("blv" variable
                                             (:pointer 1
                                              :type ("Lisp_Buffer_Local_Value" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [28670 28706])
                                          ("fwd" variable (:type ("lispfwd" type (:type "class") nil nil)) (reparse-symbol classsubparts) [28708 28720]))                                        
                                      :type "union")
                                      nil nil)) (reparse-symbol classsubparts) [28613 28733])
                                ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [28807 28828])
                                ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [28877 28895])
                                ("next" variable
                                   (:pointer 1
                                    :type ("Lisp_Symbol" type
                                         (:prototype t
                                          :type "struct")
                                          nil nil))
                                    (reparse-symbol classsubparts) [28974 28999]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [27401 29008])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [29013 29035]))                    
                  :type "union")
                  nil nil)) nil [27387 29042])
            ("EXFUN" variable (:constant-flag t) nil [29342 29347])
            ("DEFUN_ARGS_MANY" variable (:constant-flag t) nil [29536 29551])
            ("DEFUN_ARGS_UNEVALLED" variable (:constant-flag t) nil [29588 29608])
            ("DEFUN_ARGS_0" variable (:constant-flag t) nil [29631 29643])
            ("DEFUN_ARGS_1" variable (:constant-flag t) nil [29659 29671])
            ("DEFUN_ARGS_2" variable (:constant-flag t) nil [29694 29706])
            ("DEFUN_ARGS_3" variable (:constant-flag t) nil [29742 29754])
            ("DEFUN_ARGS_4" variable (:constant-flag t) nil [29803 29815])
            ("DEFUN_ARGS_5" variable (:constant-flag t) nil [29877 29889])
            ("DEFUN_ARGS_6" variable (:constant-flag t) nil [29970 29982])
            ("DEFUN_ARGS_7" variable (:constant-flag t) nil [30076 30088])
            ("DEFUN_ARGS_8" variable (:constant-flag t) nil [30195 30207])
            ("untagged_ptr" type
               (:typedef ("uintptr_t" type (:type "class") nil nil)
                :type "typedef")
                nil [30915 30946])
            ("Lisp_Word_tag" type
               (:typedef ("EMACS_UINT" type (:type "class") nil nil)
                :type "typedef")
                nil [30947 30980])
            ("LISP_WORD_TAG" variable (:constant-flag t) nil [31061 31074])
            ("TAG_PTR" variable (:constant-flag t) nil [31222 31229])
            ("LISPSYM_INITIALLY" variable (:constant-flag t) nil [31466 31483])
            ("DEFINE_LISP_SYMBOL" variable (:constant-flag t) nil [31854 31872])
            ("SYMBOL_INDEX" variable (:constant-flag t) nil [32085 32097])
            ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" variable (:constant-flag t) nil [32434 32464])
            ("POWER_OF_2" variable (:constant-flag t) nil [32544 32554])
            ("ROUNDUP" variable (:constant-flag t) nil [32822 32829])
            ("globals.h" include nil nil [32984 33004])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [34784 34799])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [34855 34874])
            ("i" variable
               (:default-value "(intptr_t) XUNTAG (a, Lisp_Symbol, struct Lisp_Symbol)"
                :type ("intptr_t" type (:type "class") nil nil))
                nil [34991 35059])
            ("p" variable
               (:pointer 1
                :default-value "(char *) lispsym + i"
                :type "void")
                nil [35062 35093])
            ("p" variable (:type "int") nil [35103 35105])
            ("symoffset" variable
               (:pointer 1
                :default-value "(char *) ((char *) sym - (char *) lispsym)"
                :type "char")
                nil [35278 35339])
            ("a" variable
               (:default-value "TAG_PTR (Lisp_Symbol, symoffset)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [35342 35391])
            ("a" variable (:type "int") nil [35433 35435])
            ("make_lisp_symbol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lispsym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35520 35534]))                  
                :type "int")
                nil [35501 35536])
            ("bp" variable
               (:pointer 1
                :default-value "(char *) lispsym"
                :type "char")
                nil [35593 35621])
            ("sp" variable
               (:pointer 1
                :default-value "(char *) sym"
                :type "char")
                nil [35624 35648])
            ("lispsym" variable (:type "int") nil [35721 35729])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SYMBOLP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qsymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [35886 35910])
            ("ARRAY_MARK_FLAG" variable (:constant-flag t) nil [36057 36072])
            ("PSEUDOVECTOR_FLAG" variable (:constant-flag t) nil [36300 36317])
            ("MOST_POSITIVE_FIXNUM" variable (:constant-flag t) nil [38701 38721])
            ("MOST_NEGATIVE_FIXNUM" variable (:constant-flag t) nil [38761 38781])
            ("FIXNUM_OVERFLOW_P" variable (:constant-flag t) nil [38892 38909])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [39725 39752])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39936 39938]))                  
                :type "int")
                nil [39931 39939])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [40186 40208])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [40410 40437])
            ("VALBITS" variable (:type "int") nil [40562 40570])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40585 40587]))                  
                :type "int")
                nil [40580 40588])
            ("XFIXNUM_RAW" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40782 40784]))                  
                :type "int")
                nil [40769 40785])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [40913 40936])
            ("XUFIXNUM_RAW" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41087 41089]))                  
                :type "int")
                nil [41073 41090])
            ("XUFIXNUM_RAW" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [41204 41221])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [41410 41437])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41484 41487]))                  
                :type "int")
                nil [41479 41507])
            ("upper" variable (:type "int") nil [41775 41781])
            ("a" variable
               (:default-value "TAG_PTR (type, ptr)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [41913 41949])
            ("a" variable (:type "int") nil [42023 42025])
            ("XSETINT" variable (:constant-flag t) nil [42037 42044])
            ("XSETFASTINT" variable (:constant-flag t) nil [42083 42094])
            ("XSETCONS" variable (:constant-flag t) nil [42139 42147])
            ("XSETVECTOR" variable (:constant-flag t) nil [42199 42209])
            ("XSETSTRING" variable (:constant-flag t) nil [42267 42277])
            ("XSETSYMBOL" variable (:constant-flag t) nil [42331 42341])
            ("XSETFLOAT" variable (:constant-flag t) nil [42385 42394])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42650 42655])
                    ("" variable (:type ("Lisp_String" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42656 42668]))                  
                :type "int")
                nil [42635 42669])
            ("XSETPVECTYPE" variable (:constant-flag t) nil [42709 42721])
            ("PVECHEADERSIZE" variable (:constant-flag t) nil [42825 42839])
            ("XSETPVECTYPESIZE" variable (:constant-flag t) nil [42994 43010])
            ("XSETPSEUDOVECTOR" variable (:constant-flag t) nil [43186 43202])
            ("XSETTYPED_PSEUDOVECTOR" variable (:constant-flag t) nil [43365 43387])
            ("XSETWINDOW_CONFIGURATION" variable (:constant-flag t) nil [43575 43599])
            ("XSETPROCESS" variable (:constant-flag t) nil [43671 43682])
            ("XSETWINDOW" variable (:constant-flag t) nil [43737 43747])
            ("XSETTERMINAL" variable (:constant-flag t) nil [43801 43813])
            ("XSETSUBR" variable (:constant-flag t) nil [43869 43877])
            ("XSETBUFFER" variable (:constant-flag t) nil [43929 43939])
            ("XSETCHAR_TABLE" variable (:constant-flag t) nil [43993 44007])
            ("XSETBOOL_VECTOR" variable (:constant-flag t) nil [44065 44080])
            ("XSETSUB_CHAR_TABLE" variable (:constant-flag t) nil [44139 44157])
            ("XSETTHREAD" variable (:constant-flag t) nil [44219 44229])
            ("XSETMUTEX" variable (:constant-flag t) nil [44283 44292])
            ("XSETCONDVAR" variable (:constant-flag t) nil [44345 44356])
            ("XSETNATIVE_COMP_UNIT" variable (:constant-flag t) nil [44411 44431])
            ("a" variable
               (:default-value "TAG_PTR (Lisp_Int0, p)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [44902 44941])
            ("a" variable (:type "int") nil [44951 44953])
            ("a" variable
               (:default-value "make_pointer_integer_unsafe (p)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45011 45059])
            ("a" variable (:type "int") nil [45117 45119])
            ("INTERVAL" type
               (:typedef ("interval" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :pointer 1
                :type "typedef")
                nil [45162 45196])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("car" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [45288 45304])
                                ("u" variable (:type ("" type
                                     (:members 
                                        ( ("cdr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [45358 45374])
                                          ("chain" variable
                                             (:pointer 1
                                              :type ("Lisp_Cons" type
                                                   (:prototype t
                                                    :type "struct")
                                                    nil nil))
                                              (reparse-symbol classsubparts) [45422 45446]))                                        
                                      :type "union")
                                      nil nil)) (reparse-symbol classsubparts) [45312 45457]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [45233 45466])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [45471 45493]))                    
                  :type "union")
                  nil nil)) nil [45219 45500])
            ("EQ" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [45590 45606])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Cons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [45657 45674])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45733 45742])
                    ("" variable (:type ("Qconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45744 45751])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45752 45754]))                  
                :type "int")
                nil [45721 45755])
            ("car" variable (:type "int") nil [46372 46376])
            ("cdr" variable (:type "int") nil [46455 46459])
            ("car" variable (:type "int") nil [46552 46568])
            ("cdr" variable (:type "int") nil [46625 46641])
            ("n" variable (:type "int") nil [46885 46887])
            ("n" variable (:type "int") nil [46962 46964])
            ("XCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47108 47110]))                  
                :type "int")
                nil [47102 47111])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47154 47161])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47162 47164]))                  
                :type "int")
                nil [47133 47165])
            ("Qnil" variable (:type "int") nil [47175 47180])
            ("XCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47258 47260]))                  
                :type "int")
                nil [47252 47261])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47304 47311])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47312 47314]))                  
                :type "int")
                nil [47283 47315])
            ("Qnil" variable (:type "int") nil [47325 47330])
            ("Qnil" variable (:type "int") nil [47477 47482])
            ("Qnil" variable (:type "int") nil [47563 47568])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("s" variable (:type ("" type
                           (:members 
                              ( ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [47704 47719])
                                ("size_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [47771 47791])
                                ("intervals" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol classsubparts) [47841 47860])
                                ("data" variable
                                   (:pointer 1
                                    :type "unsigned char")
                                    (reparse-symbol classsubparts) [47906 47926]))                              
                            :type "struct")
                            nil nil)) (reparse-symbol classsubparts) [47685 47935])
                      ("next" variable
                         (:pointer 1
                          :type ("Lisp_String" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [47940 47965])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [47970 47992]))                    
                  :type "union")
                  nil nil)) nil [47671 47999])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48101 48103])
                    ("" variable (:type ("Lisp_String" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48104 48116]))                  
                :type "int")
                nil [48092 48117])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48178 48189])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48191 48200])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48201 48203]))                  
                :type "int")
                nil [48166 48204])
            ("size_byte" variable (:type "int") nil [48468 48478])
            ("STRING_BYTES_BOUND" variable (:constant-flag t) nil [49217 49235])
            ("STRING_SET_UNIBYTE" variable (:constant-flag t) nil [49361 49379])
            ("STRING_SET_MULTIBYTE" variable (:constant-flag t) nil [49676 49696])
            ("data" variable (:type "int") nil [50477 50482])
            ("SDATA" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50596 50603]))                  
                :type "int")
                nil [50589 50604])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50689 50696]))                  
                :type "int")
                nil [50682 50703])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50792 50799]))                  
                :type "int")
                nil [50785 50806])
            ("nchars" variable
               (:default-value "XSTRING (string)->u.s.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [50865 50911])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [50914 50936])
            ("nchars" variable (:type "int") nil [50946 50953])
            ("size_byte" variable (:type "int") nil [51242 51252])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [51262 51284])
            ("nbytes" variable (:type "int") nil [51294 51301])
            ("STRING_BYTES" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XSTRING" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51375 51391]))                  
                :type "int")
                nil [51361 51393])
            ("size" variable
               (:default-value "newsize"
                :type "int")
                nil [51717 51732])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("memchr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51809 51856])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51860 51865])
                    ("" variable (:type ("Qfilenamep" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51873 51884])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51885 51892]))                  
                :type "int")
                nil [51797 51893])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [51997 52028])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [52033 52077])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [52154 52177])
            ("size" variable
               (:default-value "XVECTOR (array)->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [52372 52418])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [52421 52441])
            ("size" variable (:type "int") nil [52451 52456])
            ("PTRDIFF_MIN" variable (:type "int") nil [52617 52633])
            ("PSEUDOVECTOR_SIZE_MASK" variable (:type "int") nil [52700 52725])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("VECTORP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52890 52901])
                    ("" variable (:type ("Qvectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52903 52912])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52913 52915]))                  
                :type "int")
                nil [52878 52916])
            ("size" variable
               (:default-value "v->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [53071 53103])
            ("false" variable (:type "int") nil [53747 53753])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [54185 54216])
            ("size" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [54258 54273])
            ("data" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [54491 54529])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [55484 55556])
            ("BITS_PER_BITS_WORD" variable (:type "int") nil [55600 55619])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [55679 55751])
            ("BOOL_VECTOR_BITS_PER_CHAR" variable (:type "int") nil [55802 55828])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55900 55902])
                    ("" variable (:type ("PVEC_BOOL_VECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55903 55920]))                  
                :type "int")
                nil [55885 55921])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BOOL_VECTOR_P" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55987 56004])
                    ("" variable (:type ("Qbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56006 56021])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56022 56024]))                  
                :type "int")
                nil [55975 56025])
            ("size" variable
               (:default-value "XBOOL_VECTOR (a)->size;"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [56244 56284])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [56287 56307])
            ("size" variable (:type "int") nil [56317 56322])
            ("data" variable (:type "int") nil [56407 56412])
            ("bool_vector_data" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56525 56527]))                  
                :type "int")
                nil [56507 56528])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [56632 56649])
            ("Qnil" variable (:type "int") nil [56919 56924])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [57027 57044])
            ("bool_vector_uchar_data" function
               (:arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57137 57139]))                  
                :type "int")
                nil [57113 57170])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [57483 57497])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [57646 57660])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [57799 57819])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [58104 58124])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NIL_IS_ZERO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58746 58758]))                  
                :type "int")
                nil [58738 58759])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58816 58818])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58822 58829]))                  
                :type "int")
                nil [58808 58830])
            ("VECSIZE" variable (:constant-flag t) nil [58978 58985])
            ("PSEUDOVECSIZE" variable (:constant-flag t) nil [59263 59276])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [60712 60743])
            ("defalt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [60863 60882])
            ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61065 61084])
            ("purpose" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61183 61203])
            ("ascii" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61344 61362])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [61368 61417])
            ("extras" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [61479 61521])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61612 61614])
                    ("" variable (:type ("PVEC_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61615 61631]))                  
                :type "int")
                nil [61597 61632])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [61963 61994])
            ("depth" variable (:type "int") nil [62385 62395])
            ("min_char" variable (:type "int") nil [62461 62474])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [62536 62580])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62675 62677])
                    ("" variable (:type ("PVEC_SUB_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62678 62698]))                  
                :type "int")
                nil [62660 62699])
            ("tbl" variable
               (:pointer 1
                :default-value "NULL"
                :type ("Lisp_Char_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [62952 62987])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [62990 63006])
            ("val" variable (:type "int") nil [63298 63302])
            ("set_sub_char_table_contents" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XCHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63900 63916])
                    ("" variable (:type ("ascii" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63918 63924])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63925 63929])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63930 63934]))                  
                :type "int")
                nil [63871 63935])
            ("char_table_set" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ct" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63963 63966])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63967 63971])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63972 63976]))                  
                :type "int")
                nil [63947 63977])
            ("comp.h" include nil nil [63981 63998])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [64163 64194])
            ("function" variable (:type ("" type
                 (:members 
                    ( ("a0" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [64232 64237]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64213 64238])
                      ("a1" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64264 64276]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64245 64277])
                      ("a2" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64303 64315])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64316 64328]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64284 64329])
                      ("a3" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64355 64367])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64368 64380])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64381 64393]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64336 64394])
                      ("a4" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64420 64432])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64433 64445])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64446 64458])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64459 64471]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64401 64472])
                      ("a5" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64498 64510])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64511 64523])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64524 64536])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64537 64549])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64550 64562]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64479 64563])
                      ("a6" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64589 64601])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64602 64614])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64615 64627])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64628 64640])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64641 64653])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64654 64666]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64570 64667])
                      ("a7" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64693 64705])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64706 64718])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64719 64731])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64732 64744])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64745 64757])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64758 64770])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64771 64783]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64674 64784])
                      ("a8" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64810 64822])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64823 64835])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64836 64848])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64849 64861])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64862 64874])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64875 64887])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64888 64900])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64901 64913]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64791 64914])
                      ("aUNEVALLED" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64948 64965]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64921 64966])
                      ("aMANY" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64995 65005])
                              ("" variable
                                 (:pointer 1
                                  :type ("Lisp_Object" type (:type "class") nil nil))
                                  (reparse-symbol arg-sub-list) [65006 65020]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [64973 65021]))                    
                  :type "union")
                  nil nil)) nil [64199 65037])
            ("min_args" variable (:type "short") nil [65042 65067])
            ("max_args" variable (:type "short") nil [65042 65067])
            ("symbol_name" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [65072 65096])
            ("" type
               (:members 
                  ( ("intspec" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [65115 65135])
                    ("native_intspec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [65142 65169]))                  
                :type "union")
                nil [65101 65176])
            ("doc" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [65181 65195])
            ("native_comp_u" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [65200 65244])
            ("native_c_name" variable
               (:pointer 1
                :dereference 1
                :type "char")
                nil [65249 65287])
            ("lambda_list" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [65292 65334])
            ("type" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [65339 65374])
            ("s" variable (:type ("Lisp_Subr" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [65429 65448])
            ("gcaligned" variable (:type "int") nil [65453 65475])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65588 65590])
                    ("" variable (:type ("PVEC_SUBR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65591 65601]))                  
                :type "int")
                nil [65573 65602])
            ("s" variable (:type "int") nil [65743 65745])
            ("sys_jmp_buf" type
               (:typedef ("jmp_buf" type (:type "class") nil nil)
                :type "typedef")
                nil [67373 67401])
            ("sys_setjmp" variable (:constant-flag t) nil [67411 67421])
            ("sys_longjmp" variable (:constant-flag t) nil [67445 67456])
            ("thread.h" include nil nil [67486 67505])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [67874 67943])
            ("alias" variable (:type "int") nil [67966 67972])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [68056 68124])
            ("blv" variable (:type "int") nil [68147 68151])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [68210 68285])
            ("fwd" variable (:type "int") nil [68308 68312])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [68507 68559])
            ("alias" variable
               (:default-value "v"
                :type "int")
                nil [68575 68585])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [68680 68733])
            ("blv" variable
               (:default-value "v"
                :type "int")
                nil [68749 68757])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [68832 68885])
            ("fwdptr" variable
               (:default-value "v"
                :type "int")
                nil [68905 68916])
            ("name" variable (:type "int") nil [68999 69004])
            ("SYMBOL_UNINTERNED" variable (:type "int") nil [69150 69168])
            ("SYMBOL_INTERNED_IN_INITIAL_OBARRAY" variable (:type "int") nil [69342 69377])
            ("DEFSYM" variable (:constant-flag t) nil [70091 70097])
            ("Lisp_Hash_Table" type
               (:prototype t
                :type "struct")
                nil [70336 70359])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [70440 70457])
            ("user_hash_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [70507 70538])
            ("user_cmp_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [70598 70628])
            ("cmpfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70695 70707])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70708 70720])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [70721 70746]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [70673 70747])
            ("hashfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70816 70828])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Hash_Table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [70829 70854]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [70793 70855])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [71014 71045])
            ("weak" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [71147 71164])
            ("hash" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [71298 71315])
            ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [71563 71580])
            ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [71827 71845])
            ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [72097 72113])
            ("next_free" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [72181 72201])
            ("purecopy" variable (:type "bool") nil [72297 72311])
            ("rehash_threshold" variable (:type "float") nil [72612 72635])
            ("rehash_size" variable (:type "float") nil [72971 72989])
            ("key_and_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [73236 73262])
            ("test" variable (:type ("hash_table_test" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [73310 73338])
            ("next_weak" variable
               (:pointer 1
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [73527 73561])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73757 73759])
                    ("" variable (:type ("PVEC_HASH_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73760 73776]))                  
                :type "int")
                nil [73742 73777])
            ("XSET_HASH_TABLE" variable (:constant-flag t) nil [73946 73961])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74180 74182])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74183 74197])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74202 74206]))                  
                :type "int")
                nil [74174 74207])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74368 74370])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74371 74385])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74390 74395]))                  
                :type "int")
                nil [74362 74399])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74568 74570])
                    ("" variable (:type ("hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74571 74576])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74577 74581]))                  
                :type "int")
                nil [74562 74582])
            ("size" variable
               (:default-value "ASIZE (h->next)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [74699 74732])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [74735 74754])
            ("size" variable (:type "int") nil [74764 74769])
            ("DEFAULT_REHASH_THRESHOLD" variable
               (:typemodifiers ("static")
                :default-value "0.8125"
                :type "float")
                nil [75087 75140])
            ("DEFAULT_REHASH_SIZE" variable
               (:typemodifiers ("static")
                :default-value "1.5 - 1"
                :type "float")
                nil [75221 75270])
            ("y" variable (:type "int") nil [75474 75476])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [75677 75708])
            ("buffer" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [76275 76297])
            ("need_adjustment" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [76469 76497])
            ("insertion_type" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [76610 76637])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [77099 77124])
            ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [77187 77205])
            ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [77445 77463])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [78100 78131])
            ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [78136 78154])
            ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [78159 78175])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [78180 78198])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [78203 78229])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [78282 78313])
            ("pointer" variable
               (:pointer 1
                :type "void")
                nil [78318 78332])
            ("val" variable
               (:default-value "TAG_PTR (Lisp_Int0, a)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79296 79337])
            ("make_misc_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79409 79411]))                  
                :type "int")
                nil [79394 79412])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79495 79497])
                    ("" variable (:type ("PVEC_MISC_PTR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79498 79512]))                  
                :type "int")
                nil [79480 79513])
            ("XFIXNUMPTR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79632 79634]))                  
                :type "int")
                nil [79620 79635])
            ("pointer" variable (:type "int") nil [79696 79704])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [79733 79764])
            ("finalizer" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [79786 79793]))                  
                :type "void")
                nil [79767 79794])
            ("p" variable
               (:pointer 1
                :type "void")
                nil [79797 79805])
            ("header" variable (:type ("vectorlike_header" type (:type "union") nil nil)) nil [79886 79917])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [80126 80147])
            ("prev" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [80209 80237])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [80242 80270])
            ("finalizers" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [80294 80334])
            ("doomed_finalizers" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [80335 80382])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80449 80451])
                    ("" variable (:type ("PVEC_FINALIZER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80452 80467]))                  
                :type "int")
                nil [80434 80468])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80686 80688])
                    ("" variable (:type ("PVEC_MARKER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80689 80701]))                  
                :type "int")
                nil [80671 80702])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80909 80911])
                    ("" variable (:type ("PVEC_OVERLAY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80912 80925]))                  
                :type "int")
                nil [80894 80926])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81138 81140])
                    ("" variable (:type ("PVEC_USER_PTR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81141 81155]))                  
                :type "int")
                nil [81123 81156])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81370 81372])
                    ("" variable (:type ("PVEC_BIGNUM" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81373 81385]))                  
                :type "int")
                nil [81355 81386])
            ("BIGNUMP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81462 81464]))                  
                :type "int")
                nil [81453 81465])
            ("make_fixnum" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81630 81632]))                  
                :type "int")
                nil [81617 81633])
            ("make_fixnum" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81746 81748]))                  
                :type "int")
                nil [81733 81749])
            ("INT_TO_INTEGER" variable (:constant-flag t) nil [81832 81846])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [82133 82157])
            ("intvar" variable
               (:pointer 1
                :type ("intmax_t" type (:type "class") nil nil))
                nil [82183 82200])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [82427 82451])
            ("boolvar" variable
               (:pointer 1
                :type "bool")
                nil [82478 82492])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [82717 82741])
            ("objvar" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [82767 82787])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [82956 82980])
            ("offset" variable (:type "int") nil [83013 83024])
            ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [83105 83127])
            ("local_if_set" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [84357 84382])
            ("found" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [84500 84518])
            ("fwd" variable (:type ("lispfwd" type (:type "class") nil nil)) nil [84602 84614])
            ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [84728 84746])
            ("defcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [84854 84874])
            ("valcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [85155 85175])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [85300 85324])
            ("offset" variable (:type "int") nil [85357 85368])
            ("p" variable
               (:pointer 1
                :default-value "a.fwdptr;"
                :type ("Lisp_Fwd_Type" type (:type "enum") nil nil))
                nil [85426 85465])
            ("p" variable
               (:pointer 1
                :type "int")
                nil [85475 85478])
            ("Lisp_Fwd_Buffer_Obj" variable (:type "int") nil [85548 85568])
            ("fwdptr" variable (:type "int") nil [85685 85692])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("data" variable (:type "double") (reparse-symbol classsubparts) [85774 85786])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Float" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [85793 85818])
                      ("gcaligned" variable (:type "int") (reparse-symbol classsubparts) [85825 85847]))                    
                  :type "union")
                  nil nil)) nil [85756 85856])
            ("TAGGEDP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Lisp_Float" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [85951 85969])
            ("data" variable (:type "int") nil [86171 86176])
            ("IEEE_FLOATING_POINT" variable (:constant-flag t) nil [86632 86651])
            ("XFIXNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87696 87698]))                  
                :type "int")
                nil [87687 87699])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [87841 87868])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [87949 87971])
            ("result" variable (:type "int") nil [87981 87988])
            ("FLOATP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88063 88065]))                  
                :type "int")
                nil [88055 88066])
            ("hi" variable (:type "int") nil [88201 88204])
            ("TYPE_RANGED_FIXNUMP" variable (:constant-flag t) nil [88216 88235])
            ("EQ" variable (:type "int") nil [88460 88487])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88614 88616])
                    ("" variable (:type ("PVEC_WINDOW_CONFIGURATION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88617 88643]))                  
                :type "int")
                nil [88599 88644])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88712 88714])
                    ("" variable (:type ("PVEC_COMPILED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88715 88729]))                  
                :type "int")
                nil [88697 88730])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88795 88797])
                    ("" variable (:type ("PVEC_FRAME" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88798 88809]))                  
                :type "int")
                nil [88780 88810])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88876 88878])
                    ("" variable (:type ("PVEC_RECORD" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88879 88891]))                  
                :type "int")
                nil [88861 88892])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("RECORDP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88953 88964])
                    ("" variable (:type ("Qrecordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88966 88975])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88976 88978]))                  
                :type "int")
                nil [88941 88979])
            ("EQ" variable (:type "int") nil [89077 89101])
            ("BOOL_VECTOR_P" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89236 89238]))                  
                :type "int")
                nil [89221 89239])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89299 89308])
                    ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89312 89320])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89322 89329])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89330 89332]))                  
                :type "int")
                nil [89287 89333])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89411 89419])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89421 89428])
                    ("" variable (:type ("y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89429 89431]))                  
                :type "int")
                nil [89399 89432])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("FIXNUMP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qfixnump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [89483 89507])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89572 89590])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89592 89601])
                    ("" variable (:type ("XCAR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89602 89610]))                  
                :type "int")
                nil [89560 89612])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89779 89781]))                  
                :type "int")
                nil [89772 89782])
            ("SCHARS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89821 89823]))                  
                :type "int")
                nil [89813 89824])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qarrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89848 89856])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89857 89859]))                  
                :type "int")
                nil [89827 89860])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ARRAYP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89942 89952])
                    ("" variable (:type ("predicate" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89954 89964])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89965 89967]))                  
                :type "int")
                nil [89930 89968])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("FIXNATP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90028 90039])
                    ("" variable (:type ("Qwholenump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90041 90052])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90053 90055]))                  
                :type "int")
                nil [90016 90056])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NUMBERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90260 90271])
                    ("" variable (:type ("Qnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90273 90282])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90283 90285]))                  
                :type "int")
                nil [90248 90286])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("INTEGERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90348 90360])
                    ("" variable (:type ("Qnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90362 90371])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90372 90374]))                  
                :type "int")
                nil [90336 90375])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SUBRP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90434 90443])
                    ("" variable (:type ("Qsubrp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90445 90452])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90453 90455]))                  
                :type "int")
                nil [90422 90456])
            ("SUBR_SECTION_ATTRIBUTE" variable (:constant-flag t) nil [90765 90787])
            ("DEFUN" variable (:constant-flag t) nil [92347 92352])
            ("CALLMANY" variable (:constant-flag t) nil [93013 93021])
            ("CALLN" variable (:constant-flag t) nil [93455 93460])
            ("DEFVAR_LISP" variable (:constant-flag t) nil [94634 94645])
            ("DEFVAR_LISP_NOPRO" variable (:constant-flag t) nil [94834 94851])
            ("DEFVAR_BOOL" variable (:constant-flag t) nil [95045 95056])
            ("DEFVAR_INT" variable (:constant-flag t) nil [95247 95257])
            ("DEFVAR_KBOARD" variable (:constant-flag t) nil [95447 95460])
            ("CHAR_BIT" variable (:type "int") nil [97703 97712])
            ("unwind" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [97762 97771])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97792 97804]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [97778 97805])
                      ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [97812 97828])
                      ("eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [97835 97856]))                    
                  :type "struct")
                  nil nil)) nil [97717 97870])
            ("unwind_array" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [97920 97929])
                      ("nelts" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [97936 97952])
                      ("array" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [97959 97978]))                    
                  :type "struct")
                  nil nil)) nil [97875 97998])
            ("unwind_ptr" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [98048 98057])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable
                                 (:pointer 1
                                  :type "void")
                                  (reparse-symbol arg-sub-list) [98078 98085]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [98064 98086])
                      ("arg" variable
                         (:pointer 1
                          :type "void")
                          (reparse-symbol classsubparts) [98093 98103]))                    
                  :type "struct")
                  nil nil)) nil [98003 98121])
            ("unwind_int" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [98171 98180])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [98201 98205]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [98187 98206])
                      ("arg" variable (:type "int") (reparse-symbol classsubparts) [98213 98221]))                    
                  :type "struct")
                  nil nil)) nil [98126 98239])
            ("unwind_intmax" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [98289 98298])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98319 98328]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [98305 98329])
                      ("arg" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98336 98349]))                    
                  :type "struct")
                  nil nil)) nil [98244 98370])
            ("unwind_excursion" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [98420 98429])
                      ("marker" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98436 98463])
                      ("window" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98436 98463]))                    
                  :type "struct")
                  nil nil)) nil [98375 98487])
            ("unwind_void" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [98537 98546])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [98567 98572]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [98553 98573]))                    
                  :type "struct")
                  nil nil)) nil [98492 98592])
            ("let" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [98642 98651])
                      ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98719 98756])
                      ("old_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98719 98756])
                      ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98719 98756])
                      ("saved_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [98877 98901]))                    
                  :type "struct")
                  nil nil)) nil [98597 98912])
            ("bt" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [98962 98971])
                      ("debug_on_exit" variable
                         (:suffix ":1"
                          :type ("bool_bf" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [98978 99004])
                      ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [99011 99032])
                      ("args" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [99039 99057])
                      ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [99064 99080]))                    
                  :type "struct")
                  nil nil)) nil [98917 99090])
            ("specpdl" variable (:type "int") nil [99160 99168])
            ("type" variable (:type ("handlertype" type (:type "enum") nil nil)) nil [100624 100646])
            ("tag_or_ch" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [100649 100671])
            ("nonlocal_exit" variable (:type ("nonlocal_exit" type (:type "enum") nil nil)) nil [100725 100758])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [100761 100777])
            ("next" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [100781 100802])
            ("nextfree" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [100805 100830])
            ("bytecode_top" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [101163 101189])
            ("bytecode_dest" variable (:type "int") nil [101192 101210])
            ("jmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [101355 101371])
            ("f_lisp_eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [101374 101402])
            ("pdlcount" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [101405 101424])
            ("poll_suppress_count" variable (:type "int") nil [101427 101451])
            ("interrupt_input_blocked" variable (:type "int") nil [101454 101482])
            ("memory_signal_data" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [101487 101525])
            ("QUITP" variable (:constant-flag t) nil [101602 101607])
            ("maybe_quit" function
               (:prototype-flag t
                :type "int")
                nil [101893 101907])
            ("Vascii_downcase_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [101912 101953])
            ("Vascii_canon_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [101954 101992])
            ("staticidx" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [102171 102192])
            ("window" type
               (:prototype t
                :type "struct")
                nil [102240 102254])
            ("frame" type
               (:prototype t
                :type "struct")
                nil [102255 102268])
            ("v" variable
               (:pointer 1
                :default-value "XVECTOR (a)"
                :type "void")
                nil [102847 102869])
            ("p" variable
               (:pointer 1
                :default-value "v"
                :type "char")
                nil [102872 102884])
            ("word_size" variable
               (:pointer 1
                :type ("i" type (:type "class") nil nil))
                nil [102915 102929])
            ("w" variable (:type "int") nil [102939 102941])
            ("xvector_contents_addr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103084 103086]))                  
                :type "int")
                nil [103061 103090])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("xvector_contents_addr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103358 103391])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103393 103398])
                    ("" variable
                       (:pointer 1
                        :type ("count" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [103399 103413])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103415 103420]))                  
                :type "int")
                nil [103350 103421])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103569 103571])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103572 103586])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103591 103595])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103596 103600]))                  
                :type "int")
                nil [103560 103601])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103710 103712])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103713 103727])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103732 103737])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103741 103745]))                  
                :type "int")
                nil [103701 103746])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [103935 103955])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [104048 104062])
            ("next" variable
               (:default-value "next"
                :type "int")
                nil [104161 104173])
            ("trapped_write" variable
               (:default-value "SYMBOL_NOWRITE"
                :type "int")
                nil [104251 104282])
            ("found" variable (:type "int") nil [104469 104475])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [104611 104625])
            ("intervals" variable (:type "int") nil [104740 104750])
            ("intervals" variable
               (:default-value "i"
                :type "int")
                nil [104875 104889])
            ("defalt" variable
               (:default-value "val"
                :type "int")
                nil [105095 105108])
            ("purpose" variable
               (:default-value "val"
                :type "int")
                nil [105208 105222])
            ("extras" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [105467 105485])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [105660 105680])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [105805 105825])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [106015 106031])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [106081 106097])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [106149 106165])
            ("modiff_count" type
               (:typedef ("intmax_t" type (:type "class") nil nil)
                :type "typedef")
                nil [107311 107341])
            ("a0" variable
               (:default-value "*a"
                :type ("modiff_count" type (:type "class") nil nil))
                nil [107397 107418])
            ("modiff_overflow" variable
               (:default-value "INT_ADD_WRAPV (a0, 1, a)"
                :type "bool")
                nil [107421 107469])
            ("a0" variable (:type "int") nil [107532 107535])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [107597 107636])
            ("make_int" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107656 107658]))                  
                :type "int")
                nil [107646 107659])
            ("CONS_TO_INTEGER" variable (:constant-flag t) nil [108432 108447])
            ("charset" type
               (:prototype t
                :type "struct")
                nil [110280 110295])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [110553 110569])
            ("hashtest_eq" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [111489 111567])
            ("hashtest_eql" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [111489 111567])
            ("hashtest_equal" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [111489 111567])
            ("Vwindow_system" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [116163 116197])
            ("noninteractive_need_newline" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [116279 116319])
            ("__builtin_unwind_init" variable (:constant-flag t) nil [119521 119542])
            ("flush_stack_call_func1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("func" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119699 119704])
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119705 119709]))                  
                :type "int")
                nil [119675 119710])
            ("pending_malloc_warning" variable
               (:pointer 1
                :typemodifiers ("extern")
                :constant-flag t
                :type "char")
                nil [119854 119896])
            ("zero_vector" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [119897 119928])
            ("consing_until_gc" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [119929 119963])
            ("list" variable (:constant-flag t) nil [120485 120489])
            ("pure_list" variable (:constant-flag t) nil [120573 120582])
            ("visit" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [120831 120851])
                    ("" variable (:type ("gc_root_type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [120852 120870])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [120871 120878]))                  
                :type "void")
                nil [120816 120879])
            ("data" variable
               (:pointer 1
                :type "void")
                nil [120882 120893])
            ("list1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121078 121090]))                  
                :type "int")
                nil [121071 121092])
            ("list2" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121165 121177])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121179 121191]))                  
                :type "int")
                nil [121158 121193])
            ("list3" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121278 121290])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121292 121304])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121306 121318]))                  
                :type "int")
                nil [121271 121320])
            ("list4" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121417 121429])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121431 121443])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121445 121457])
                    ("" variable (:type ("make_int" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121459 121471]))                  
                :type "int")
                nil [121410 121473])
            ("vectorlike_nbytes" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122027 122029])
                    ("" variable (:type ("header" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122030 122037]))                  
                :type "int")
                nil [122007 122038])
            ("make_unibyte_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122203 122207])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122208 122220]))                  
                :type "int")
                nil [122182 122222])
            ("make_pure_c_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122969 122973])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122974 122986]))                  
                :type "int")
                nil [122949 122988])
            ("make_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123160 123164])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123165 123177]))                  
                :type "int")
                nil [123147 123179])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [123358 123384])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [123795 123821])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("allocate_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123904 123926])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123928 123944]))                  
                :type "int")
                nil [123889 123945])
            ("slots" variable
               (:default-value "SUB_CHAR_TABLE_OFFSET + chartab_size[depth]"
                :type "int")
                nil [124078 124134])
            ("v" variable
               (:default-value "make_uninit_vector (slots)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [124137 124180])
            ("depth" variable
               (:default-value "depth"
                :type "int")
                nil [124256 124270])
            ("min_char" variable
               (:default-value "min_char"
                :type "int")
                nil [124294 124314])
            ("v" variable (:type "int") nil [124324 124326])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("allocate_nil_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124527 124553])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124555 124571]))                  
                :type "int")
                nil [124512 124572])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [124667 124693])
            ("ALLOCATE_PLAIN_PSEUDOVECTOR" variable (:constant-flag t) nil [124774 124801])
            ("ALLOCATE_PSEUDOVECTOR" variable (:constant-flag t) nil [125031 125052])
            ("ALLOCATE_ZEROED_PSEUDOVECTOR" variable (:constant-flag t) nil [125367 125395])
            ("gc_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [125560 125587])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [125987 126013])
            ("__malloc_extra_blocks" variable
               (:typemodifiers ("extern")
                :type ("size_t" type (:type "class") nil nil))
                nil [126171 126207])
            ("Vprin1_to_string_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [127499 127542])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [127581 127600])
            ("print_level" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [127654 127677])
            ("Lisp_Object" function (:type "int") nil [127848 127877])
            ("FLOAT_TO_STRING_BUFSIZE" variable (:constant-flag t) nil [127901 127924])
            ("Vcurrent_load_list" variable
               (:default-value "Fcons (x, Vcurrent_load_list)"
                :type "int")
                nil [128976 129027])
            ("intern_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129749 129753])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129754 129766]))                  
                :type "int")
                nil [129739 129768])
            ("intern_c_string_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129855 129859])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129860 129872]))                  
                :type "int")
                nil [129836 129874])
            ("Vautoload_queue" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [129904 129939])
            ("Vrun_hooks" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [129940 129970])
            ("Vsignaling_function" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [129971 130010])
            ("inhibit_lisp_code" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [130011 130048])
            ("Lisp_Object" function
               (:arguments 
                  ( ("" variable (:type ("funcall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130506 130514]))                  
                :type "int")
                nil [130492 130562])
            ("Fsignal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("error_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130676 130689])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130690 130695]))                  
                :type "int")
                nil [130667 130696])
            ("Lisp_Object" function (:type "int") nil [132133 132162])
            ("Lisp_Object" function (:type "int") nil [132311 132333])
            ("Lisp_Object" function (:type "int") nil [132348 132377])
            ("Lisp_Object" function (:type "int") nil [132426 132455])
            ("Lisp_Object" function (:type "int") nil [132483 132512])
            ("Lisp_Object" function (:type "int") nil [132561 132603])
            ("Lisp_Object" function (:type "int") nil [132644 132673])
            ("Lisp_Object" function (:type "int") nil [132722 132777])
            ("Lisp_Object" function (:type "int") nil [132831 132860])
            ("Lisp_Object" function (:type "int") nil [132909 132977])
            ("Lisp_Object" function (:type "int") nil [133044 133073])
            ("Lisp_Object" function (:type "int") nil [133122 133203])
            ("Lisp_Object" function (:type "int") nil [133283 133312])
            ("Lisp_Object" function (:type "int") nil [133365 133407])
            ("Lisp_Object" function (:type "int") nil [133453 133508])
            ("Lisp_Object" function (:type "int") nil [133550 133574])
            ("Lisp_Object" function (:type "int") nil [133584 133633])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [133706 133732])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("o" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136226 136228])
                    ("" variable (:type ("PVEC_MODULE_FUNCTION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [136229 136250]))                  
                :type "int")
                nil [136211 136251])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [140022 140048])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [140136 140162])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141634 141641])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141642 141649])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141650 141655]))                  
                :type "int")
                nil [141606 141656])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141787 141794])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141795 141802])
                    ("" variable (:type ("Vascii_canon_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [141803 141822]))                  
                :type "int")
                nil [141759 141823])
            ("Vminibuffer_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [142665 142701])
            ("last_minibuf_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [142702 142741])
            ("minibuf_level" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [142912 142943])
            ("command_loop_level" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [143440 143476])
            ("echo_message_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [143477 143516])
            ("echo_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [143517 143551])
            ("input_pending" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [143587 143613])
            ("pending_funcalls" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [143969 144005])
            ("initial_argv" variable
               (:pointer 2
                :typemodifiers ("extern")
                :type "char")
                nil [145258 145285])
            ("initial_argc" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [145286 145310])
            ("emacs_wd" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [145311 145339])
            ("empty_unibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [145493 145557])
            ("empty_multibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [145493 145557])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [145995 146021])
            ("noninteractive" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [146148 146175])
            ("no_site_lisp" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [146240 146265])
            ("build_details" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [146327 146353])
            ("daemon_type" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [146438 146461])
            ("IS_DAEMON" variable (:constant-flag t) nil [146470 146479])
            ("DAEMON_RUNNING" variable (:constant-flag t) nil [146507 146521])
            ("fatal_error_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [146761 146797])
            ("inhibit_window_system" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [146867 146901])
            ("running_asynch_code" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [146960 146992])
            ("Lisp_Process" type
               (:prototype t
                :type "struct")
                nil [147023 147043])
            ("WAIT_READING_MAX" variable (:constant-flag t) nil [147554 147570])
            ("CHILD_SETUP_ERROR_DESC" variable (:constant-flag t) nil [148119 148141])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [148352 148378])
            ("tty_display_info" type
               (:prototype t
                :type "struct")
                nil [149779 149803])
            ("argc" variable (:type "int") nil [150026 150031])
            ("NO_INLINE" variable (:type "int") nil [150858 150868])
            ("char_ins_del_vector" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "int")
                nil [152406 152438])
            ("Vface_alternative_font_family_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [153459 153514])
            ("Vface_alternative_font_registry_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [153515 153572])
            ("profiler_memory_running" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [154657 154693])
            ("false" variable (:type "int") nil [155485 155491])
            ("false" variable (:type "int") nil [155560 155566])
            ("my_endbss_static" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [155657 155687])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [155749 155775])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [155836 155862])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [155931 155957])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [156063 156089])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [156175 156201])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [156280 156306])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type ("ATTRIBUTE_MALLOC" type (:type "class") nil nil)) nil [156346 156389])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type ("ATTRIBUTE_MALLOC" type (:type "class") nil nil)) nil [156431 156474])
            ("len" variable
               (:default-value "SBYTES (string)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [156740 156772])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156783 156788])
                    ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156789 156803])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156805 156810]))                  
                :type "int")
                nil [156775 156814])
            ("len" variable (:type "int") nil [156831 156835])
            ("egetenv_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("var" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [157299 157303])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [157304 157316]))                  
                :type "int")
                nil [157281 157318])
            ("eabs" variable (:constant-flag t) nil [157679 157683])
            ("ATTRIBUTE_RETURNS_NONNULL" variable (:type "int") nil [157976 158002])
            ("USE_SAFE_ALLOCA" variable (:constant-flag t) nil [158012 158027])
            ("AVAIL_ALLOCA" variable (:constant-flag t) nil [158118 158130])
            ("SAFE_ALLOCA" variable (:constant-flag t) nil [158229 158240])
            ("SAFE_NALLOCA" variable (:constant-flag t) nil [158547 158559])
            ("SAFE_ALLOCA_STRING" variable (:constant-flag t) nil [158994 159012])
            ("SAFE_FREE" variable (:constant-flag t) nil [159234 159243])
            ("SAFE_FREE_UNBIND_TO" variable (:constant-flag t) nil [159959 159978])
            ("unbind_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160186 160192])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160193 160197]))                  
                :type "int")
                nil [160175 160198])
            ("SAFE_ALLOCA_LISP_EXTRA" variable (:constant-flag t) nil [160325 160347])
            ("SAFE_ALLOCA_LISP" variable (:constant-flag t) nil [161177 161193])
            ("USE_STACK_LISP_OBJECTS" variable (:constant-flag t) nil [161992 162014])
            ("STACK_CONS" variable (:constant-flag t) nil [162847 162857])
            ("AUTO_CONS_EXPR" variable (:constant-flag t) nil [162938 162952])
            ("AUTO_CONS" variable (:constant-flag t) nil [163301 163310])
            ("AUTO_LIST1" variable (:constant-flag t) nil [163372 163382])
            ("AUTO_LIST2" variable (:constant-flag t) nil [163480 163490])
            ("AUTO_LIST3" variable (:constant-flag t) nil [163635 163645])
            ("AUTO_LIST4" variable (:constant-flag t) nil [163810 163820])
            ("AUTO_STRING" variable (:constant-flag t) nil [164377 164388])
            ("AUTO_STRING_WITH_LEN" variable (:constant-flag t) nil [164829 164849])
            ("FOR_EACH_TAIL" variable (:constant-flag t) nil [165676 165689])
            ("FOR_EACH_TAIL_SAFE" variable (:constant-flag t) nil [165896 165914])
            ("tortoise" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [166090 166111])
            ("n" variable (:type "int") nil [166128 166130])
            ("q" variable (:type "unsigned short int") nil [166133 166154])
            ("FOR_EACH_TAIL_INTERNAL" variable (:constant-flag t) nil [166855 166877])
            ("FOR_EACH_ALIST_VALUE" variable (:constant-flag t) nil [167335 167355]))          
      :file "lisp.h"
      :pointmax 167738
      :fsize 167743
      :lastmodtime '(25315 53065 893489 50000)
      :unmatched-syntax '((symbol 167693 . 167710) (close-paren 167690 . 167691) (punctuation 167688 . 167689) (close-paren 167687 . 167688) (open-paren 167686 . 167687) (symbol 167664 . 167685) (close-paren 167658 . 167659) (number 167657 . 167658) (punctuation 167655 . 167656) (symbol 167638 . 167654) (open-paren 167637 . 167638) (IF 167634 . 167636) (open-paren 167630 . 167631) (close-paren 167628 . 167629) (VOID 167624 . 167628) (open-paren 167623 . 167624) (symbol 167614 . 167622) (VOID 167609 . 167613) (symbol 167602 . 167608) (punctuation 166156 . 166157) (close-paren 166155 . 166156) (semantic-list #("((a) > (b) ? (a) : (b))" 0 1 (macros (("b") ("a")))) 166123 . 166127) (symbol 166114 . 166122) (open-paren 166086 . 166087) (symbol 166063 . 166085) (STRUCT 166056 . 166062) (punctuation 165283 . 165284) (close-paren 165282 . 165283) (number 165278 . 165281) (punctuation 165276 . 165277) (symbol 165257 . 165275) (open-paren 165255 . 165256) (ENUM 165250 . 165254) (punctuation 162638 . 162639) (close-paren 162637 . 162638) (close-paren 162633 . 162634) (symbol 162604 . 162633) (punctuation 162603 . 162604) (punctuation 162601 . 162602) (punctuation 162600 . 162601) (symbol 162582 . 162596) (open-paren 162581 . 162582) (punctuation 162579 . 162580) (symbol 162562 . 162578) (punctuation 162556 . 162557) (symbol "false" 162534 . 162556) (punctuation 162532 . 162533) (symbol 162517 . 162531) (open-paren 162511 . 162512) (ENUM 162504 . 162508) (punctuation 162232 . 162233) (close-paren 162231 . 162232) (symbol 162225 . 162230) (punctuation 162223 . 162224) (symbol 162193 . 162222) (open-paren 162191 . 162192) (ENUM 162186 . 162190) (close-paren 161903 . 161904) (close-paren 161902 . 161903) (number 161901 . 161902) (punctuation 161899 . 161900) (number 161898 . 161899) (punctuation 161896 . 161897) (number 161895 . 161896) (open-paren 161894 . 161895) (symbol 161882 . 161893) (punctuation 161880 . 161881) (punctuation 161878 . 161879) (punctuation 161877 . 161878) (symbol 161867 . 161876) (symbol 161859 . 161866) (punctuation 161858 . 161859) (punctuation 161856 . 161857) (punctuation 161855 . 161856) (symbol "12" 161846 . 161854) (symbol 161838 . 161845) (punctuation 161836 . 161837) (punctuation 161835 . 161836) (close-paren 160199 . 160200) (RETURN 160168 . 160174) (punctuation 160164 . 160165) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "count" 160146 . 160151)))) 160137 . 160164) (open-paren 160133 . 160134) (close-paren 160131 . 160132) (symbol 160128 . 160131) (symbol 160116 . 160127) (punctuation 160114 . 160115) (symbol 160106 . 160114) (symbol 160096 . 160105) (punctuation 160094 . 160095) (symbol 160089 . 160094) (symbol 160079 . 160088) (open-paren 160078 . 160079) (symbol 160058 . 160077) (symbol 160046 . 160057) (symbol 160039 . 160045) (close-paren 159656 . 159657) (semantic-list 159361 . 159655) (semantic-list 159321 . 159356) (WHILE 159315 . 159320) (open-paren 159311 . 159312) (close-paren 159309 . 159310) (symbol 159301 . 159309) (symbol 159291 . 159300) (open-paren 159290 . 159291) (symbol 159280 . 159289) (VOID 159275 . 159279) (symbol 159268 . 159274) (close-paren 157974 . 157975) (semantic-list 157971 . 157974) (open-paren 157970 . 157971) (symbol 157949 . 157969) (close-paren 157945 . 157946) (symbol 157939 . 157945) (open-paren 157938 . 157939) (symbol 157923 . 157937) (punctuation 157922 . 157923) (VOID 157917 . 157921) (EXTERN 157910 . 157916) (punctuation 157907 . 157908) (close-paren 157906 . 157907) (number 157901 . 157905) (punctuation 157899 . 157900) (number 157896 . 157898) (punctuation 157894 . 157895) (symbol 157883 . 157893) (open-paren 157881 . 157882) (symbol 157870 . 157880) (ENUM 157865 . 157869) (punctuation 157413 . 157414) (close-paren 157412 . 157413) (VOID 157408 . 157412) (open-paren 157407 . 157408) (symbol 157390 . 157406) (VOID 157385 . 157389) (EXTERN 157378 . 157384) (close-paren 157319 . 157320) (semantic-list 157311 . 157316) (RETURN 157274 . 157280) (open-paren 157201 . 157202) (close-paren 157199 . 157200) (symbol 157196 . 157199) (punctuation 157195 . 157196) (CHAR 157190 . 157194) (CONST 157184 . 157189) (open-paren 157183 . 157184) (symbol 157175 . 157182) (punctuation 157173 . 157174) (CHAR 157168 . 157172) (symbol 157161 . 157167) (punctuation 157158 . 157159) (close-paren 157157 . 157158) (symbol 157148 . 157157) (punctuation 157146 . 157147) (punctuation 157145 . 157146) (CHAR 157140 . 157144) (CONST 157134 . 157139) (open-paren 157133 . 157134) (symbol 157116 . 157132) (punctuation 157115 . 157116) (CHAR 157110 . 157114) (EXTERN 157103 . 157109) (punctuation 157100 . 157101) (close-paren 157099 . 157100) (punctuation 157098 . 157099) (CHAR 157093 . 157097) (CONST 157087 . 157092) (open-paren 157086 . 157087) (symbol 157078 . 157085) (VOID 157073 . 157077) (EXTERN 157066 . 157072) (close-paren 157056 . 157057) (open-paren 157054 . 157055) (close-paren 157052 . 157053) (symbol 157051 . 157052) (punctuation 157050 . 157051) (CONST 157044 . 157049) (VOID 157039 . 157043) (open-paren 157038 . 157039) (symbol 157017 . 157037) (VOID 157012 . 157016) (symbol 157005 . 157011) (close-paren 156836 . 156837) (punctuation 156829 . 156830) (symbol 156824 . 156828) (RETURN 156817 . 156823) (number 156811 . 156812) (punctuation 156809 . 156810) (semantic-list 156795 . 156803) (open-paren 156736 . 156737) (close-paren 156734 . 156735) (symbol 156728 . 156734) (symbol 156716 . 156727) (punctuation 156714 . 156715) (symbol 156710 . 156714) (punctuation 156709 . 156710) (CHAR 156704 . 156708) (open-paren 156703 . 156704) (symbol 156692 . 156702) (punctuation 156690 . 156691) (CHAR 156685 . 156689) (symbol 156678 . 156684) (punctuation 156520 . 156521) (close-paren 156519 . 156520) (punctuation 156518 . 156519) (CONST 156512 . 156517) (CHAR 156507 . 156511) (punctuation 156505 . 156506) (punctuation 156504 . 156505) (punctuation 156503 . 156504) (CHAR 156498 . 156502) (open-paren 156497 . 156498) (symbol 156487 . 156496) (VOID 156482 . 156486) (EXTERN 156475 . 156481) (close-paren 156427 . 156428) (symbol 156416 . 156427) (open-paren 156415 . 156416) (symbol 156403 . 156414) (punctuation 156402 . 156403) (CHAR 156397 . 156401) (EXTERN 156390 . 156396) (close-paren 156342 . 156343) (punctuation 156341 . 156342) (CONST 156335 . 156340) (CHAR 156330 . 156334) (open-paren 156329 . 156330) (symbol 156321 . 156328) (punctuation 156320 . 156321) (CHAR 156315 . 156319) (EXTERN 156308 . 156314) (close-paren 156276 . 156277) (symbol 156267 . 156276) (punctuation 156265 . 156266) (symbol 156256 . 156265) (punctuation 156254 . 156255) (symbol 156245 . 156254) (punctuation 156243 . 156244) (punctuation 156242 . 156243) (symbol 156232 . 156241) (punctuation 156230 . 156231) (punctuation 156229 . 156230) (VOID 156224 . 156228) (open-paren 156223 . 156224) (symbol 156215 . 156222) (punctuation 156214 . 156215) (VOID 156209 . 156213) (EXTERN 156202 . 156208) (close-paren 156173 . 156174) (semantic-list 156168 . 156173) (open-paren 156167 . 156168) (symbol 156146 . 156166) (close-paren 156142 . 156143) (symbol 156133 . 156142) (punctuation 156131 . 156132) (symbol 156122 . 156131) (punctuation 156120 . 156121) (punctuation 156119 . 156120) (VOID 156114 . 156118) (open-paren 156113 . 156114) (symbol 156103 . 156112) (punctuation 156102 . 156103) (VOID 156097 . 156101) (EXTERN 156090 . 156096) (close-paren 156061 . 156062) (semantic-list 156056 . 156061) (open-paren 156055 . 156056) (symbol 156033 . 156054) (close-paren 156029 . 156030) (symbol 156020 . 156029) (punctuation 156018 . 156019) (symbol 156009 . 156018) (open-paren 156008 . 156009) (symbol 155999 . 156007) (punctuation 155998 . 155999) (VOID 155993 . 155997) (EXTERN 155986 . 155992) (punctuation 155984 . 155985) (close-paren 155983 . 155984) (punctuation 155982 . 155983) (VOID 155977 . 155981) (open-paren 155976 . 155977) (symbol 155970 . 155975) (VOID 155965 . 155969) (EXTERN 155958 . 155964) (close-paren 155929 . 155930) (semantic-list 155926 . 155929) (open-paren 155925 . 155926) (symbol 155904 . 155924) (close-paren 155900 . 155901) (symbol 155894 . 155900) (punctuation 155892 . 155893) (punctuation 155891 . 155892) (VOID 155886 . 155890) (open-paren 155885 . 155886) (symbol 155876 . 155884) (punctuation 155875 . 155876) (VOID 155870 . 155874) (EXTERN 155863 . 155869) (close-paren 155834 . 155835) (semantic-list 155831 . 155834) (open-paren 155830 . 155831) (symbol 155808 . 155829) (close-paren 155804 . 155805) (symbol 155798 . 155804) (open-paren 155797 . 155798) (symbol 155789 . 155796) (punctuation 155788 . 155789) (VOID 155783 . 155787) (EXTERN 155776 . 155782) (close-paren 155747 . 155748) (semantic-list 155744 . 155747) (open-paren 155743 . 155744) (symbol 155721 . 155742) (close-paren 155717 . 155718) (symbol 155711 . 155717) (open-paren 155710 . 155711) (symbol 155702 . 155709) (punctuation 155701 . 155702) (VOID 155696 . 155700) (EXTERN 155689 . 155695) (punctuation 155655 . 155656) (close-paren 155654 . 155655) (open-paren 155653 . 155654) (symbol 155644 . 155653) (CHAR 155639 . 155643) (EXTERN 155632 . 155638) (punctuation 155630 . 155631) (close-paren 155629 . 155630) (open-paren 155628 . 155629) (symbol 155620 . 155628) (CHAR 155615 . 155619) (EXTERN 155608 . 155614) (close-paren 155567 . 155568) (RETURN 155553 . 155559) (open-paren 155549 . 155550) (close-paren 155547 . 155548) (symbol 155546 . 155547) (symbol 155534 . 155545) (open-paren 155533 . 155534) (symbol 155507 . 155532) (BOOL 155502 . 155506) (symbol 155495 . 155501) (close-paren 155492 . 155493) (RETURN 155478 . 155484) (open-paren 155474 . 155475) (close-paren 155472 . 155473) (symbol 155471 . 155472) (symbol 155459 . 155470) (open-paren 155458 . 155459) (symbol 155436 . 155457) (BOOL 155431 . 155435) (symbol 155424 . 155430) (punctuation 154764 . 154765) (close-paren 154763 . 154764) (VOID 154759 . 154763) (open-paren 154758 . 154759) (symbol 154741 . 154757) (VOID 154736 . 154740) (EXTERN 154729 . 154735) (punctuation 154727 . 154728) (close-paren 154726 . 154727) (symbol 154720 . 154726) (open-paren 154719 . 154720) (symbol 154706 . 154718) (VOID 154701 . 154705) (EXTERN 154694 . 154700) (punctuation 154199 . 154200) (close-paren 154198 . 154199) (VOID 154194 . 154198) (open-paren 154193 . 154194) (symbol 154181 . 154192) (VOID 154176 . 154180) (EXTERN 154169 . 154175) (punctuation 153606 . 153607) (close-paren 153605 . 153606) (VOID 153601 . 153605) (open-paren 153600 . 153601) (symbol 153585 . 153599) (VOID 153580 . 153584) (EXTERN 153573 . 153579) (punctuation 152747 . 152748) (close-paren 152746 . 152747) (VOID 152742 . 152746) (open-paren 152741 . 152742) (symbol 152731 . 152740) (VOID 152726 . 152730) (EXTERN 152719 . 152725) (punctuation 152717 . 152718) (close-paren 152716 . 152717) (VOID 152712 . 152716) (open-paren 152711 . 152712) (symbol 152698 . 152710) (VOID 152693 . 152697) (EXTERN 152686 . 152692) (punctuation 152657 . 152658) (close-paren 152656 . 152657) (symbol 152645 . 152656) (open-paren 152644 . 152645) (symbol 152630 . 152643) (punctuation 152628 . 152629) (CHAR 152623 . 152627) (EXTERN 152616 . 152622) (punctuation 152614 . 152615) (close-paren 152613 . 152614) (VOID 152609 . 152613) (open-paren 152608 . 152609) (symbol 152591 . 152607) (VOID 152586 . 152590) (EXTERN 152579 . 152585) (punctuation 152546 . 152547) (close-paren 152545 . 152546) (number 152544 . 152545) (punctuation 152542 . 152543) (number 152541 . 152542) (open-paren 152540 . 152541) (symbol 152516 . 152539) (close-paren 152514 . 152515) (punctuation 152513 . 152514) (punctuation 152512 . 152513) (punctuation 152511 . 152512) (punctuation 152509 . 152510) (symbol 152504 . 152509) (punctuation 152503 . 152504) (CHAR 152498 . 152502) (CONST 152492 . 152497) (open-paren 152491 . 152492) (symbol 152485 . 152490) (VOID "void" 152479 . 152484) (symbol "ATTRIBUTE_COLD" 152479 . 152484) (EXTERN 152472 . 152478) (punctuation 152470 . 152471) (close-paren 152469 . 152470) (VOID 152465 . 152469) (open-paren 152464 . 152465) (symbol 152451 . 152463) (VOID 152446 . 152450) (EXTERN 152439 . 152445) (punctuation 152377 . 152378) (close-paren 152376 . 152377) (symbol 152365 . 152376) (punctuation 152363 . 152364) (symbol 152352 . 152363) (punctuation 152350 . 152351) (BOOL 152346 . 152350) (punctuation 152299 . 152300) (symbol 152288 . 152299) (punctuation 152286 . 152287) (symbol 152275 . 152286) (punctuation 152228 . 152229) (symbol 152217 . 152228) (punctuation 152215 . 152216) (symbol 152204 . 152215) (open-paren 152203 . 152204) (symbol 152178 . 152202) (symbol 152166 . 152177) (EXTERN 152159 . 152165) (punctuation 152157 . 152158) (close-paren 152156 . 152157) (VOID 152152 . 152156) (open-paren 152151 . 152152) (symbol 152137 . 152150) (VOID 152132 . 152136) (EXTERN 152125 . 152131) (punctuation 152095 . 152096) (close-paren 152094 . 152095) (VOID 152090 . 152094) (open-paren 152089 . 152090) (symbol 152077 . 152088) (VOID 152072 . 152076) (EXTERN 152065 . 152071) (punctuation 152037 . 152038) (close-paren 152036 . 152037) (VOID 152032 . 152036) (open-paren 152031 . 152032) (symbol 152014 . 152030) (VOID 152009 . 152013) (EXTERN 152002 . 152008) (punctuation 152000 . 152001) (close-paren 151999 . 152000) (INT 151996 . 151999) (open-paren 151995 . 151996) (symbol 151977 . 151994) (symbol 151965 . 151976) (EXTERN 151958 . 151964) (punctuation 151956 . 151957) (close-paren 151955 . 151956) (VOID 151951 . 151955) (open-paren 151950 . 151951) (symbol 151931 . 151949) (VOID 151926 . 151930) (EXTERN 151919 . 151925) (punctuation 151886 . 151887) (close-paren 151885 . 151886) (VOID 151881 . 151885) (open-paren 151880 . 151881) (symbol 151866 . 151879) (VOID 151861 . 151865) (EXTERN 151854 . 151860) (punctuation 151824 . 151825) (close-paren 151823 . 151824) (VOID 151819 . 151823) (open-paren 151818 . 151819) (symbol 151801 . 151817) (VOID 151796 . 151800) (EXTERN 151789 . 151795) (punctuation 151787 . 151788) (close-paren 151786 . 151787) (punctuation 151785 . 151786) (symbol 151778 . 151784) (STRUCT 151771 . 151777) (open-paren 151770 . 151771) (symbol 151756 . 151769) (VOID 151751 . 151755) (EXTERN 151744 . 151750) (punctuation 151742 . 151743) (close-paren 151741 . 151742) (VOID 151737 . 151741) (open-paren 151736 . 151737) (symbol 151719 . 151735) (VOID 151714 . 151718) (EXTERN 151707 . 151713) (punctuation 151674 . 151675) (close-paren 151673 . 151674) (VOID 151669 . 151673) (open-paren 151668 . 151669) (symbol 151653 . 151667) (VOID 151648 . 151652) (EXTERN 151641 . 151647) (punctuation 151639 . 151640) (close-paren 151638 . 151639) (symbol 151627 . 151638) (punctuation 151625 . 151626) (symbol 151614 . 151625) (punctuation 151612 . 151613) (symbol 151601 . 151612) (punctuation 151599 . 151600) (symbol 151588 . 151599) (open-paren 151587 . 151588) (symbol 151575 . 151586) (INT 151571 . 151574) (EXTERN 151564 . 151570) (punctuation 151562 . 151563) (close-paren 151561 . 151562) (punctuation 151560 . 151561) (CONST 151554 . 151559) (CHAR 151549 . 151553) (punctuation 151547 . 151548) (INT 151544 . 151547) (punctuation 151542 . 151543) (punctuation 151541 . 151542) (CONST 151535 . 151540) (CHAR 151530 . 151534) (punctuation 151528 . 151529) (INT 151525 . 151528) (open-paren 151524 . 151525) (symbol 151505 . 151523) (INT 151501 . 151504) (EXTERN 151494 . 151500) (punctuation 151492 . 151493) (close-paren 151491 . 151492) (punctuation 151490 . 151491) (CONST 151484 . 151489) (CHAR 151479 . 151483) (open-paren 151478 . 151479) (symbol 151465 . 151477) (VOID 151460 . 151464) (EXTERN 151453 . 151459) (punctuation 151451 . 151452) (close-paren 151450 . 151451) (symbol 151441 . 151450) (punctuation 151439 . 151440) (punctuation 151438 . 151439) (CONST 151432 . 151437) (VOID 151427 . 151431) (punctuation 151425 . 151426) (INT 151422 . 151425) (open-paren 151421 . 151422) (symbol 151404 . 151420) (symbol 151394 . 151403) (EXTERN 151387 . 151393) (punctuation 151385 . 151386) (close-paren 151384 . 151385) (symbol 151375 . 151384) (punctuation 151373 . 151374) (punctuation 151372 . 151373) (CONST 151366 . 151371) (VOID 151361 . 151365) (punctuation 151359 . 151360) (INT 151356 . 151359) (open-paren 151355 . 151356) (symbol 151339 . 151354) (symbol 151329 . 151338) (EXTERN 151322 . 151328) (punctuation 151320 . 151321) (close-paren 151319 . 151320) (symbol 151310 . 151319) (punctuation 151308 . 151309) (punctuation 151307 . 151308) (CONST 151301 . 151306) (VOID 151296 . 151300) (punctuation 151294 . 151295) (INT 151291 . 151294) (open-paren 151290 . 151291) (symbol 151278 . 151289) (symbol 151268 . 151277) (EXTERN 151261 . 151267) (punctuation 151259 . 151260) (close-paren 151258 . 151259) (symbol 151249 . 151258) (punctuation 151247 . 151248) (punctuation 151246 . 151247) (VOID 151241 . 151245) (punctuation 151239 . 151240) (INT 151236 . 151239) (open-paren 151235 . 151236) (symbol 151219 . 151234) (symbol 151209 . 151218) (EXTERN 151202 . 151208) (punctuation 151200 . 151201) (close-paren 151199 . 151200) (symbol 151190 . 151199) (punctuation 151188 . 151189) (punctuation 151187 . 151188) (VOID 151182 . 151186) (punctuation 151180 . 151181) (INT 151177 . 151180) (open-paren 151176 . 151177) (symbol 151165 . 151175) (symbol 151155 . 151164) (EXTERN 151148 . 151154) (punctuation 151146 . 151147) (close-paren 151145 . 151146) (INT 151142 . 151145) (open-paren 151141 . 151142) (symbol 151129 . 151140) (INT 151125 . 151128) (EXTERN 151118 . 151124) (punctuation 151116 . 151117) (close-paren 151115 . 151116) (semantic-list 151112 . 151115) (INT 151109 . 151112) (open-paren 151108 . 151109) (symbol 151097 . 151107) (INT 151093 . 151096) (EXTERN 151086 . 151092) (punctuation 151084 . 151085) (close-paren 151083 . 151084) (INT 151080 . 151083) (punctuation 151078 . 151079) (INT 151075 . 151078) (punctuation 151073 . 151074) (punctuation 151072 . 151073) (CHAR 151067 . 151071) (CONST 151061 . 151066) (open-paren 151060 . 151061) (symbol 151042 . 151059) (INT 151038 . 151041) (EXTERN 151031 . 151037) (punctuation 151029 . 151030) (close-paren 151028 . 151029) (INT 151025 . 151028) (punctuation 151023 . 151024) (INT 151020 . 151023) (punctuation 151018 . 151019) (punctuation 151017 . 151018) (CHAR 151012 . 151016) (CONST 151006 . 151011) (open-paren 151005 . 151006) (symbol 150994 . 151004) (INT 150990 . 150993) (EXTERN 150983 . 150989) (punctuation 150981 . 150982) (close-paren 150980 . 150981) (INT 150977 . 150980) (punctuation 150975 . 150976) (INT 150972 . 150975) (punctuation 150970 . 150971) (punctuation 150969 . 150970) (CONST 150963 . 150968) (CHAR 150958 . 150962) (punctuation 150956 . 150957) (INT 150953 . 150956) (open-paren 150952 . 150953) (symbol 150939 . 150951) (INT 150935 . 150938) (EXTERN 150928 . 150934) (punctuation 150926 . 150927) (close-paren 150925 . 150926) (INT 150922 . 150925) (punctuation 150920 . 150921) (punctuation 150919 . 150920) (VOID 150914 . 150918) (punctuation 150912 . 150913) (punctuation 150911 . 150912) (CONST 150905 . 150910) (CHAR 150900 . 150904) (punctuation 150898 . 150899) (INT 150895 . 150898) (open-paren 150894 . 150895) (symbol 150880 . 150893) (INT 150876 . 150879) (EXTERN 150869 . 150875) (close-paren 150856 . 150857) (VOID 150852 . 150856) (open-paren 150851 . 150852) (symbol 150839 . 150850) (VOID "void" 150833 . 150838) (symbol "ATTRIBUTE_COLD" 150833 . 150838) (EXTERN 150826 . 150832) (punctuation 150824 . 150825) (close-paren 150823 . 150824) (INT 150820 . 150823) (open-paren 150819 . 150820) (symbol 150803 . 150818) (VOID 150798 . 150802) (EXTERN 150791 . 150797) (punctuation 150789 . 150790) (close-paren 150788 . 150789) (VOID 150784 . 150788) (open-paren 150783 . 150784) (symbol 150771 . 150782) (VOID 150766 . 150770) (EXTERN 150759 . 150765) (punctuation 150757 . 150758) (close-paren 150756 . 150757) (symbol 150747 . 150756) (punctuation 150745 . 150746) (punctuation 150744 . 150745) (VOID 150739 . 150743) (open-paren 150738 . 150739) (symbol 150726 . 150737) (VOID 150721 . 150725) (EXTERN 150714 . 150720) (punctuation 150712 . 150713) (close-paren 150711 . 150712) (VOID 150707 . 150711) (open-paren 150706 . 150707) (symbol 150695 . 150705) (symbol 150685 . 150694) (EXTERN 150678 . 150684) (punctuation 150676 . 150677) (close-paren 150675 . 150676) (INT 150672 . 150675) (punctuation 150670 . 150671) (INT 150667 . 150670) (punctuation 150665 . 150666) (INT 150662 . 150665) (open-paren 150661 . 150662) (symbol 150645 . 150660) (INT 150641 . 150644) (EXTERN 150634 . 150640) (punctuation 150632 . 150633) (close-paren 150631 . 150632) (INT 150628 . 150631) (open-paren 150627 . 150628) (symbol 150617 . 150626) (VOID 150612 . 150616) (EXTERN 150605 . 150611) (punctuation 150603 . 150604) (close-paren 150602 . 150603) (INT 150599 . 150602) (open-paren 150598 . 150599) (symbol 150582 . 150597) (VOID 150577 . 150581) (EXTERN 150570 . 150576) (punctuation 150568 . 150569) (close-paren 150567 . 150568) (VOID 150563 . 150567) (open-paren 150562 . 150563) (symbol 150542 . 150561) (VOID 150537 . 150541) (EXTERN 150530 . 150536) (punctuation 150528 . 150529) (close-paren 150527 . 150528) (VOID 150523 . 150527) (open-paren 150522 . 150523) (symbol 150503 . 150521) (VOID 150498 . 150502) (EXTERN 150491 . 150497) (punctuation 150489 . 150490) (close-paren 150488 . 150489) (punctuation 150487 . 150488) (symbol 150470 . 150486) (STRUCT 150463 . 150469) (open-paren 150462 . 150463) (symbol 150446 . 150461) (VOID 150441 . 150445) (EXTERN 150434 . 150440) (punctuation 150432 . 150433) (close-paren 150431 . 150432) (punctuation 150430 . 150431) (symbol 150413 . 150429) (STRUCT 150406 . 150412) (open-paren 150405 . 150406) (symbol 150390 . 150404) (VOID 150385 . 150389) (EXTERN 150378 . 150384) (punctuation 150376 . 150377) (close-paren 150375 . 150376) (VOID 150371 . 150375) (open-paren 150370 . 150371) (symbol 150352 . 150369) (VOID 150347 . 150351) (EXTERN 150340 . 150346) (punctuation 150338 . 150339) (close-paren 150337 . 150338) (VOID 150333 . 150337) (open-paren 150332 . 150333) (symbol 150320 . 150331) (VOID 150315 . 150319) (EXTERN 150308 . 150314) (punctuation 150306 . 150307) (close-paren 150305 . 150306) (VOID 150301 . 150305) (open-paren 150300 . 150301) (symbol 150287 . 150299) (VOID 150282 . 150286) (EXTERN 150275 . 150281) (punctuation 150273 . 150274) (close-paren 150272 . 150273) (VOID 150268 . 150272) (open-paren 150267 . 150268) (symbol 150245 . 150266) (VOID 150240 . 150244) (EXTERN 150233 . 150239) (punctuation 150231 . 150232) (close-paren 150230 . 150231) (symbol 150229 . 150230) (CHAR 150224 . 150228) (open-paren 150223 . 150224) (symbol 150212 . 150222) (VOID 150207 . 150211) (EXTERN 150200 . 150206) (punctuation 150198 . 150199) (close-paren 150197 . 150198) (VOID 150193 . 150197) (open-paren 150192 . 150193) (symbol 150165 . 150191) (punctuation 150164 . 150165) (CHAR 150159 . 150163) (EXTERN 150152 . 150158) (punctuation 150150 . 150151) (close-paren 150149 . 150150) (VOID 150145 . 150149) (open-paren 150144 . 150145) (symbol 150126 . 150143) (VOID 150121 . 150125) (EXTERN 150114 . 150120) (punctuation 150112 . 150113) (close-paren 150111 . 150112) (punctuation 150110 . 150111) (CONST 150104 . 150109) (punctuation 150103 . 150104) (CHAR 150098 . 150102) (punctuation 150096 . 150097) (punctuation 150095 . 150096) (CONST 150089 . 150094) (punctuation 150088 . 150089) (CHAR 150083 . 150087) (punctuation 150081 . 150082) (punctuation 150080 . 150081) (CONST 150074 . 150079) (CHAR 150069 . 150073) (open-paren 150068 . 150069) (symbol 150052 . 150067) (INT 150048 . 150051) (EXTERN 150041 . 150047) (close-paren 150032 . 150033) (RETURN 150019 . 150025) (open-paren 150015 . 150016) (close-paren 150013 . 150014) (symbol 150009 . 150013) (punctuation 150008 . 150009) (punctuation 150007 . 150008) (CHAR 150002 . 150006) (punctuation 150000 . 150001) (symbol 149996 . 150000) (INT 149992 . 149995) (open-paren 149991 . 149992) (symbol 149955 . 149990) (INT 149951 . 149954) (symbol 149944 . 149950) (punctuation 149746 . 149747) (close-paren 149745 . 149746) (VOID 149741 . 149745) (open-paren 149740 . 149741) (symbol 149726 . 149739) (VOID 149721 . 149725) (EXTERN 149714 . 149720) (punctuation 149684 . 149685) (close-paren 149683 . 149684) (VOID 149679 . 149683) (open-paren 149678 . 149679) (symbol 149665 . 149677) (VOID 149660 . 149664) (EXTERN 149653 . 149659) (punctuation 149624 . 149625) (close-paren 149623 . 149624) (symbol 149612 . 149623) (punctuation 149610 . 149611) (symbol 149599 . 149610) (open-paren 149598 . 149599) (symbol 149569 . 149597) (VOID 149564 . 149568) (EXTERN 149557 . 149563) (punctuation 149524 . 149525) (close-paren 149523 . 149524) (VOID 149519 . 149523) (open-paren 149518 . 149519) (symbol 149505 . 149517) (VOID 149500 . 149504) (EXTERN 149493 . 149499) (punctuation 149491 . 149492) (close-paren 149490 . 149491) (symbol 149479 . 149490) (punctuation 149441 . 149442) (symbol 149430 . 149441) (punctuation 149428 . 149429) (symbol 149417 . 149428) (punctuation 149407 . 149408) (symbol 149398 . 149407) (punctuation 149396 . 149397) (symbol 149387 . 149396) (open-paren 149386 . 149387) (symbol 149363 . 149385) (VOID 149358 . 149362) (EXTERN 149351 . 149357) (punctuation 149349 . 149350) (close-paren 149348 . 149349) (symbol 149339 . 149348) (punctuation 149337 . 149338) (symbol 149328 . 149337) (open-paren 149327 . 149328) (symbol 149313 . 149326) (VOID 149308 . 149312) (EXTERN 149301 . 149307) (punctuation 149299 . 149300) (close-paren 149298 . 149299) (VOID 149294 . 149298) (open-paren 149293 . 149294) (symbol 149273 . 149292) (VOID 149268 . 149272) (EXTERN 149261 . 149267) (punctuation 149259 . 149260) (close-paren 149258 . 149259) (BOOL 149254 . 149258) (punctuation 149252 . 149253) (symbol 149241 . 149252) (punctuation 149239 . 149240) (symbol 149230 . 149239) (open-paren 149229 . 149230) (symbol 149215 . 149228) (VOID 149210 . 149214) (EXTERN 149203 . 149209) (punctuation 149201 . 149202) (close-paren 149200 . 149201) (symbol 149191 . 149200) (punctuation 149189 . 149190) (symbol 149180 . 149189) (open-paren 149179 . 149180) (symbol 149165 . 149178) (VOID 149160 . 149164) (EXTERN 149153 . 149159) (punctuation 149151 . 149152) (close-paren 149150 . 149151) (punctuation 149149 . 149150) (symbol 149142 . 149148) (STRUCT 149135 . 149141) (open-paren 149134 . 149135) (symbol 149115 . 149133) (VOID 149110 . 149114) (EXTERN 149103 . 149109) (punctuation 149074 . 149075) (close-paren 149073 . 149074) (VOID 149069 . 149073) (open-paren 149068 . 149069) (symbol 149053 . 149067) (VOID 149048 . 149052) (EXTERN 149041 . 149047) (punctuation 149039 . 149040) (close-paren 149038 . 149039) (VOID 149034 . 149038) (open-paren 149033 . 149034) (symbol 149021 . 149032) (VOID 149016 . 149020) (EXTERN 149009 . 149015) (punctuation 148978 . 148979) (close-paren 148977 . 148978) (symbol 148966 . 148977) (open-paren 148965 . 148966) (symbol 148945 . 148964) (symbol 148933 . 148944) (EXTERN 148926 . 148932) (punctuation 148924 . 148925) (close-paren 148923 . 148924) (punctuation 148922 . 148923) (symbol 148910 . 148921) (punctuation 148908 . 148909) (symbol 148899 . 148908) (punctuation 148897 . 148898) (symbol 148886 . 148897) (punctuation 148877 . 148878) (symbol 148866 . 148877) (punctuation 148864 . 148865) (symbol 148853 . 148864) (punctuation 148851 . 148852) (symbol 148840 . 148851) (open-paren 148839 . 148840) (symbol 148824 . 148838) (symbol 148812 . 148823) (EXTERN 148805 . 148811) (punctuation 148803 . 148804) (close-paren 148802 . 148803) (VOID 148798 . 148802) (open-paren 148797 . 148798) (symbol 148780 . 148796) (VOID 148775 . 148779) (EXTERN 148768 . 148774) (punctuation 148735 . 148736) (close-paren 148734 . 148735) (BOOL 148730 . 148734) (open-paren 148729 . 148730) (symbol 148710 . 148728) (INT 148706 . 148709) (EXTERN 148699 . 148705) (punctuation 148697 . 148698) (close-paren 148696 . 148697) (VOID 148692 . 148696) (open-paren 148691 . 148692) (symbol 148679 . 148690) (VOID 148674 . 148678) (EXTERN 148667 . 148673) (punctuation 148665 . 148666) (close-paren 148664 . 148665) (BOOL 148660 . 148664) (punctuation 148658 . 148659) (BOOL 148654 . 148658) (punctuation 148652 . 148653) (symbol 148641 . 148652) (open-paren 148640 . 148641) (symbol 148625 . 148639) (symbol 148613 . 148624) (EXTERN 148606 . 148612) (punctuation 148604 . 148605) (close-paren 148603 . 148604) (symbol 148592 . 148603) (open-paren 148591 . 148592) (symbol 148575 . 148590) (symbol 148563 . 148574) (EXTERN 148556 . 148562) (punctuation 148528 . 148529) (close-paren 148527 . 148528) (VOID 148523 . 148527) (open-paren 148522 . 148523) (symbol 148505 . 148521) (VOID 148500 . 148504) (EXTERN 148493 . 148499) (punctuation 148491 . 148492) (close-paren 148490 . 148491) (VOID 148486 . 148490) (open-paren 148485 . 148486) (symbol 148461 . 148484) (VOID 148456 . 148460) (EXTERN 148449 . 148455) (punctuation 148447 . 148448) (close-paren 148446 . 148447) (VOID 148442 . 148446) (open-paren 148441 . 148442) (symbol 148427 . 148440) (VOID 148422 . 148426) (EXTERN 148415 . 148421) (punctuation 148413 . 148414) (close-paren 148412 . 148413) (VOID 148408 . 148412) (open-paren 148407 . 148408) (symbol 148391 . 148406) (VOID 148386 . 148390) (EXTERN 148379 . 148385) (close-paren 148350 . 148351) (symbol 148339 . 148350) (open-paren 148338 . 148339) (symbol 148315 . 148337) (punctuation 148314 . 148315) (punctuation 148313 . 148314) (CHAR 148308 . 148312) (EXTERN 148301 . 148307) (punctuation 148299 . 148300) (close-paren 148298 . 148299) (punctuation 148297 . 148298) (symbol 148288 . 148296) (CONST 148282 . 148287) (punctuation 148280 . 148281) (punctuation 148279 . 148280) (CHAR 148274 . 148278) (CONST 148268 . 148273) (punctuation 148266 . 148267) (punctuation 148265 . 148266) (CHAR 148260 . 148264) (CONST 148254 . 148259) (punctuation 148228 . 148229) (punctuation 148227 . 148228) (punctuation 148226 . 148227) (CHAR 148221 . 148225) (punctuation 148219 . 148220) (punctuation 148218 . 148219) (punctuation 148217 . 148218) (CHAR 148212 . 148216) (punctuation 148210 . 148211) (INT 148207 . 148210) (punctuation 148205 . 148206) (INT 148202 . 148205) (punctuation 148200 . 148201) (INT 148197 . 148200) (punctuation 148195 . 148196) (punctuation 148194 . 148195) (symbol 148188 . 148193) (open-paren 148187 . 148188) (symbol 148175 . 148186) (INT 148171 . 148174) (EXTERN 148164 . 148170) (punctuation 148000 . 148001) (close-paren 147999 . 148000) (symbol 147988 . 147999) (open-paren 147987 . 147988) (symbol 147958 . 147986) (VOID 147953 . 147957) (EXTERN 147946 . 147952) (punctuation 147944 . 147945) (close-paren 147943 . 147944) (VOID 147939 . 147943) (open-paren 147938 . 147939) (symbol 147922 . 147937) (VOID 147917 . 147921) (EXTERN 147910 . 147916) (punctuation 147908 . 147909) (close-paren 147907 . 147908) (INT 147904 . 147907) (open-paren 147903 . 147904) (symbol 147884 . 147902) (VOID 147879 . 147883) (EXTERN 147872 . 147878) (punctuation 147758 . 147759) (close-paren 147757 . 147758) (INT 147754 . 147757) (open-paren 147753 . 147754) (symbol 147721 . 147752) (VOID 147716 . 147720) (EXTERN 147709 . 147715) (punctuation 147707 . 147708) (close-paren 147706 . 147707) (INT 147703 . 147706) (open-paren 147702 . 147703) (symbol 147673 . 147701) (VOID 147668 . 147672) (EXTERN 147661 . 147667) (punctuation 147204 . 147205) (close-paren 147203 . 147204) (INT 147200 . 147203) (punctuation 147198 . 147199) (punctuation 147197 . 147198) (symbol 147184 . 147196) (STRUCT 147177 . 147183) (punctuation 147170 . 147171) (symbol 147159 . 147170) (punctuation 147157 . 147158) (BOOL 147153 . 147157) (punctuation 147151 . 147152) (INT 147148 . 147151) (punctuation 147146 . 147147) (INT 147143 . 147146) (punctuation 147141 . 147142) (symbol 147133 . 147141) (open-paren 147132 . 147133) (symbol 147104 . 147131) (INT 147100 . 147103) (EXTERN 147093 . 147099) (punctuation 147091 . 147092) (close-paren 147090 . 147091) (symbol 147079 . 147090) (open-paren 147078 . 147079) (symbol 147056 . 147077) (VOID 147051 . 147055) (EXTERN 147044 . 147050) (punctuation 146068 . 146069) (close-paren 146067 . 146068) (symbol 146056 . 146067) (punctuation 146054 . 146055) (INT 146051 . 146054) (open-paren 146050 . 146051) (symbol 146034 . 146049) (VOID 146029 . 146033) (EXTERN 146022 . 146028) (close-paren 145993 . 145994) (INT 145990 . 145993) (open-paren 145989 . 145990) (symbol 145974 . 145988) (punctuation 145973 . 145974) (CHAR 145968 . 145972) (EXTERN 145961 . 145967) (close-paren 145952 . 145953) (open-paren 145951 . 145952) (close-paren 145949 . 145950) (VOID 145945 . 145949) (open-paren 145944 . 145945) (symbol 145913 . 145943) (VOID 145908 . 145912) (symbol 145901 . 145907) (close-paren 145899 . 145900) (open-paren 145898 . 145899) (close-paren 145896 . 145897) (VOID 145892 . 145896) (open-paren 145891 . 145892) (symbol 145856 . 145890) (VOID 145851 . 145855) (symbol 145844 . 145850) (close-paren 145842 . 145843) (open-paren 145841 . 145842) (close-paren 145839 . 145840) (VOID 145835 . 145839) (open-paren 145834 . 145835) (symbol 145821 . 145833) (VOID 145816 . 145820) (symbol 145809 . 145815) (punctuation 145605 . 145606) (close-paren 145604 . 145605) (INT 145601 . 145604) (punctuation 145599 . 145600) (INT 145596 . 145599) (open-paren 145595 . 145596) (symbol 145571 . 145594) (VOID "void" 145565 . 145570) (symbol "ATTRIBUTE_COLD" 145565 . 145570) (EXTERN 145558 . 145564) (punctuation 145491 . 145492) (close-paren 145490 . 145491) (BOOL 145486 . 145490) (punctuation 145484 . 145485) (punctuation 145483 . 145484) (CHAR 145478 . 145482) (CONST 145472 . 145477) (punctuation 145470 . 145471) (punctuation 145469 . 145470) (CHAR 145464 . 145468) (CONST 145458 . 145463) (open-paren 145457 . 145458) (symbol 145441 . 145456) (symbol 145429 . 145440) (EXTERN 145422 . 145428) (punctuation 145228 . 145229) (close-paren 145227 . 145228) (VOID 145223 . 145227) (open-paren 145222 . 145223) (symbol 145208 . 145221) (VOID 145203 . 145207) (EXTERN 145196 . 145202) (punctuation 145194 . 145195) (close-paren 145193 . 145194) (VOID 145189 . 145193) (open-paren 145188 . 145189) (symbol 145172 . 145187) (VOID 145167 . 145171) (EXTERN 145160 . 145166) (punctuation 145158 . 145159) (close-paren 145157 . 145158) (symbol 145146 . 145157) (open-paren 145145 . 145146) (symbol 145123 . 145144) (VOID 145118 . 145122) (EXTERN 145111 . 145117) (punctuation 145109 . 145110) (close-paren 145108 . 145109) (symbol 145097 . 145108) (punctuation 145095 . 145096) (punctuation 145094 . 145095) (symbol 145088 . 145093) (STRUCT 145081 . 145087) (open-paren 145080 . 145081) (symbol 145064 . 145079) (symbol 145052 . 145063) (EXTERN 145045 . 145051) (punctuation 145043 . 145044) (close-paren 145042 . 145043) (symbol 145031 . 145042) (punctuation 145029 . 145030) (INT 145026 . 145029) (punctuation 145024 . 145025) (INT 145021 . 145024) (punctuation 145019 . 145020) (symbol 145008 . 145019) (open-paren 145007 . 145008) (symbol 144991 . 145006) (symbol 144979 . 144990) (EXTERN 144972 . 144978) (punctuation 144970 . 144971) (close-paren 144969 . 144970) (symbol 144958 . 144969) (punctuation 144956 . 144957) (symbol 144945 . 144956) (punctuation 144943 . 144944) (punctuation 144942 . 144943) (symbol 144930 . 144941) (open-paren 144929 . 144930) (symbol 144914 . 144928) (VOID 144909 . 144913) (EXTERN 144902 . 144908) (punctuation 144900 . 144901) (close-paren 144899 . 144900) (symbol 144888 . 144899) (punctuation 144886 . 144887) (symbol 144875 . 144886) (punctuation 144873 . 144874) (punctuation 144872 . 144873) (symbol 144866 . 144871) (STRUCT 144859 . 144865) (open-paren 144858 . 144859) (symbol 144840 . 144857) (VOID 144835 . 144839) (EXTERN 144828 . 144834) (punctuation 144798 . 144799) (close-paren 144797 . 144798) (VOID 144793 . 144797) (open-paren 144792 . 144793) (symbol 144777 . 144791) (VOID 144772 . 144776) (EXTERN 144765 . 144771) (punctuation 144763 . 144764) (close-paren 144762 . 144763) (symbol 144753 . 144762) (punctuation 144751 . 144752) (symbol 144742 . 144751) (punctuation 144740 . 144741) (symbol 144731 . 144740) (open-paren 144730 . 144731) (symbol 144712 . 144729) (BOOL 144707 . 144711) (EXTERN 144700 . 144706) (punctuation 144698 . 144699) (close-paren 144697 . 144698) (VOID 144693 . 144697) (open-paren 144692 . 144693) (symbol 144666 . 144691) (VOID 144661 . 144665) (EXTERN 144654 . 144660) (punctuation 144652 . 144653) (close-paren 144651 . 144652) (VOID 144647 . 144651) (open-paren 144646 . 144647) (symbol 144631 . 144645) (symbol 144621 . 144630) (EXTERN 144614 . 144620) (punctuation 144583 . 144584) (close-paren 144582 . 144583) (VOID 144578 . 144582) (open-paren 144577 . 144578) (symbol 144560 . 144576) (VOID 144555 . 144559) (EXTERN 144548 . 144554) (punctuation 144546 . 144547) (close-paren 144545 . 144546) (VOID 144541 . 144545) (open-paren 144540 . 144541) (symbol 144523 . 144539) (VOID 144518 . 144522) (EXTERN 144511 . 144517) (punctuation 144509 . 144510) (close-paren 144508 . 144509) (VOID 144504 . 144508) (open-paren 144503 . 144504) (symbol 144489 . 144502) (VOID 144484 . 144488) (EXTERN 144477 . 144483) (punctuation 144475 . 144476) (close-paren 144474 . 144475) (VOID 144470 . 144474) (open-paren 144469 . 144470) (symbol 144448 . 144468) (VOID 144443 . 144447) (EXTERN 144436 . 144442) (punctuation 144434 . 144435) (close-paren 144433 . 144434) (VOID 144429 . 144433) (open-paren 144428 . 144429) (symbol 144411 . 144427) (VOID 144406 . 144410) (EXTERN 144399 . 144405) (punctuation 144397 . 144398) (close-paren 144396 . 144397) (VOID 144392 . 144396) (open-paren 144391 . 144392) (symbol 144374 . 144390) (symbol 144362 . 144373) (EXTERN 144355 . 144361) (punctuation 144353 . 144354) (close-paren 144352 . 144353) (VOID 144348 . 144352) (open-paren 144347 . 144348) (symbol 144329 . 144346) (symbol 144317 . 144328) (EXTERN 144310 . 144316) (punctuation 144308 . 144309) (close-paren 144307 . 144308) (symbol 144296 . 144307) (open-paren 144295 . 144296) (symbol 144280 . 144294) (symbol 144268 . 144279) (EXTERN 144261 . 144267) (punctuation 144259 . 144260) (close-paren 144258 . 144259) (punctuation 144257 . 144258) (CHAR 144252 . 144256) (CONST 144246 . 144251) (punctuation 144244 . 144245) (symbol 144233 . 144244) (open-paren 144232 . 144233) (symbol 144213 . 144231) (VOID 144208 . 144212) (EXTERN 144201 . 144207) (punctuation 144199 . 144200) (close-paren 144198 . 144199) (symbol 144187 . 144198) (open-paren 144186 . 144187) (symbol 144171 . 144185) (VOID 144166 . 144170) (EXTERN 144159 . 144165) (punctuation 144157 . 144158) (close-paren 144156 . 144157) (BOOL 144152 . 144156) (open-paren 144151 . 144152) (symbol 144119 . 144150) (BOOL 144114 . 144118) (EXTERN 144107 . 144113) (punctuation 144105 . 144106) (close-paren 144104 . 144105) (VOID 144100 . 144104) (open-paren 144099 . 144100) (symbol 144059 . 144098) (BOOL 144054 . 144058) (EXTERN 144047 . 144053) (punctuation 144045 . 144046) (close-paren 144044 . 144045) (VOID 144040 . 144044) (open-paren 144039 . 144040) (symbol 144018 . 144038) (BOOL 144013 . 144017) (EXTERN 144006 . 144012) (punctuation 143898 . 143899) (close-paren 143897 . 143898) (VOID 143893 . 143897) (open-paren 143892 . 143893) (symbol 143871 . 143891) (VOID 143866 . 143870) (EXTERN 143859 . 143865) (punctuation 143857 . 143858) (close-paren 143856 . 143857) (punctuation 143855 . 143856) (INT 143851 . 143854) (punctuation 143849 . 143850) (symbol 143838 . 143849) (open-paren 143837 . 143838) (symbol 143822 . 143836) (symbol 143810 . 143821) (EXTERN 143803 . 143809) (punctuation 143801 . 143802) (close-paren 143800 . 143801) (punctuation 143799 . 143800) (INT 143795 . 143798) (punctuation 143793 . 143794) (symbol 143782 . 143793) (open-paren 143781 . 143782) (symbol 143767 . 143780) (symbol 143755 . 143766) (EXTERN 143748 . 143754) (punctuation 143746 . 143747) (close-paren 143745 . 143746) (symbol 143734 . 143745) (open-paren 143733 . 143734) (symbol 143718 . 143732) (symbol 143706 . 143717) (EXTERN 143699 . 143705) (punctuation 143585 . 143586) (close-paren 143584 . 143585) (VOID 143580 . 143584) (open-paren 143579 . 143580) (symbol 143564 . 143578) (VOID 143559 . 143563) (EXTERN 143552 . 143558) (punctuation 143406 . 143407) (close-paren 143405 . 143406) (VOID 143401 . 143405) (open-paren 143400 . 143401) (symbol 143384 . 143399) (VOID 143379 . 143383) (EXTERN 143372 . 143378) (punctuation 143370 . 143371) (close-paren 143369 . 143370) (VOID 143365 . 143369) (open-paren 143364 . 143365) (symbol 143346 . 143363) (VOID 143341 . 143345) (EXTERN 143334 . 143340) (punctuation 143301 . 143302) (close-paren 143300 . 143301) (VOID 143296 . 143300) (open-paren 143295 . 143296) (symbol 143276 . 143294) (VOID 143271 . 143275) (EXTERN 143264 . 143270) (punctuation 143228 . 143229) (close-paren 143227 . 143228) (VOID 143223 . 143227) (open-paren 143222 . 143223) (symbol 143206 . 143221) (VOID 143201 . 143205) (EXTERN 143194 . 143200) (punctuation 143161 . 143162) (close-paren 143160 . 143161) (VOID 143156 . 143160) (open-paren 143155 . 143156) (symbol 143125 . 143154) (VOID 143120 . 143124) (EXTERN 143113 . 143119) (punctuation 143111 . 143112) (close-paren 143110 . 143111) (VOID 143106 . 143110) (open-paren 143105 . 143106) (symbol 143089 . 143104) (VOID 143084 . 143088) (EXTERN 143077 . 143083) (punctuation 143075 . 143076) (close-paren 143074 . 143075) (VOID 143070 . 143074) (open-paren 143069 . 143070) (symbol 143041 . 143068) (VOID 143036 . 143040) (EXTERN 143029 . 143035) (punctuation 143027 . 143028) (close-paren 143026 . 143027) (VOID 143022 . 143026) (open-paren 143021 . 143022) (symbol 143003 . 143020) (VOID 142998 . 143002) (EXTERN 142991 . 142997) (punctuation 142989 . 142990) (close-paren 142988 . 142989) (symbol 142979 . 142988) (open-paren 142978 . 142979) (symbol 142963 . 142977) (symbol 142951 . 142962) (EXTERN 142944 . 142950) (punctuation 142910 . 142911) (close-paren 142909 . 142910) (symbol 142898 . 142909) (open-paren 142897 . 142898) (symbol 142875 . 142896) (symbol 142865 . 142874) (EXTERN 142858 . 142864) (punctuation 142856 . 142857) (close-paren 142855 . 142856) (symbol 142844 . 142855) (punctuation 142842 . 142843) (symbol 142833 . 142842) (open-paren 142832 . 142833) (symbol 142818 . 142831) (BOOL 142813 . 142817) (EXTERN 142806 . 142812) (punctuation 142804 . 142805) (close-paren 142803 . 142804) (BOOL 142799 . 142803) (punctuation 142797 . 142798) (punctuation 142796 . 142797) (symbol 142790 . 142795) (STRUCT 142783 . 142789) (open-paren 142782 . 142783) (symbol 142754 . 142781) (VOID 142749 . 142753) (EXTERN 142742 . 142748) (punctuation 142632 . 142633) (close-paren 142631 . 142632) (VOID 142627 . 142631) (open-paren 142626 . 142627) (symbol 142607 . 142625) (VOID 142602 . 142606) (EXTERN 142595 . 142601) (punctuation 142593 . 142594) (close-paren 142592 . 142593) (VOID 142588 . 142592) (open-paren 142587 . 142588) (symbol 142572 . 142586) (VOID 142567 . 142571) (EXTERN 142560 . 142566) (punctuation 142558 . 142559) (close-paren 142557 . 142558) (punctuation 142556 . 142557) (symbol 142546 . 142555) (punctuation 142544 . 142545) (symbol 142535 . 142544) (punctuation 142525 . 142526) (symbol 142516 . 142525) (punctuation 142514 . 142515) (symbol 142505 . 142514) (open-paren 142504 . 142505) (symbol 142479 . 142503) (symbol 142469 . 142478) (EXTERN 142462 . 142468) (punctuation 142460 . 142461) (close-paren 142459 . 142460) (punctuation 142458 . 142459) (symbol 142448 . 142457) (punctuation 142446 . 142447) (symbol 142437 . 142446) (punctuation 142424 . 142425) (symbol 142415 . 142424) (punctuation 142413 . 142414) (symbol 142404 . 142413) (open-paren 142403 . 142404) (symbol 142382 . 142402) (symbol 142372 . 142381) (EXTERN 142365 . 142371) (punctuation 142363 . 142364) (close-paren 142362 . 142363) (punctuation 142361 . 142362) (symbol 142351 . 142360) (punctuation 142349 . 142350) (punctuation 142348 . 142349) (symbol 142338 . 142347) (punctuation 142336 . 142337) (symbol 142327 . 142336) (open-paren 142326 . 142327) (symbol 142302 . 142325) (symbol 142292 . 142301) (EXTERN 142285 . 142291) (punctuation 142283 . 142284) (close-paren 142282 . 142283) (BOOL 142278 . 142282) (punctuation 142276 . 142277) (symbol 142267 . 142276) (punctuation 142260 . 142261) (symbol 142251 . 142260) (punctuation 142249 . 142250) (symbol 142240 . 142249) (punctuation 142238 . 142239) (symbol 142229 . 142238) (punctuation 142227 . 142228) (symbol 142218 . 142227) (open-paren 142217 . 142218) (symbol 142204 . 142216) (VOID 142199 . 142203) (EXTERN 142192 . 142198) (punctuation 142190 . 142191) (close-paren 142189 . 142190) (BOOL 142185 . 142189) (punctuation 142183 . 142184) (punctuation 142182 . 142183) (symbol 142172 . 142181) (punctuation 142170 . 142171) (punctuation 142169 . 142170) (symbol 142159 . 142168) (punctuation 142157 . 142158) (symbol 142148 . 142157) (punctuation 142136 . 142137) (symbol 142127 . 142136) (punctuation 142125 . 142126) (symbol 142116 . 142125) (punctuation 142114 . 142115) (symbol 142105 . 142114) (punctuation 142103 . 142104) (symbol 142094 . 142103) (open-paren 142093 . 142094) (symbol 142080 . 142092) (symbol 142070 . 142079) (EXTERN 142063 . 142069) (punctuation 142061 . 142062) (close-paren 142060 . 142061) (symbol 142049 . 142060) (punctuation 142047 . 142048) (symbol 142038 . 142047) (punctuation 142036 . 142037) (symbol 142027 . 142036) (punctuation 141991 . 141992) (symbol 141982 . 141991) (punctuation 141980 . 141981) (symbol 141971 . 141980) (punctuation 141969 . 141970) (symbol 141958 . 141969) (open-paren 141957 . 141958) (symbol 141941 . 141956) (symbol 141931 . 141940) (EXTERN 141924 . 141930) (punctuation 141922 . 141923) (close-paren 141921 . 141922) (symbol 141912 . 141921) (punctuation 141902 . 141903) (punctuation 141901 . 141902) (CHAR 141896 . 141900) (CONST 141890 . 141895) (punctuation 141888 . 141889) (symbol 141877 . 141888) (open-paren 141876 . 141877) (symbol 141844 . 141875) (symbol 141834 . 141843) (EXTERN 141827 . 141833) (close-paren 141824 . 141825) (RETURN 141752 . 141758) (open-paren 141748 . 141749) (close-paren 141746 . 141747) (symbol 141740 . 141746) (symbol 141728 . 141739) (punctuation 141726 . 141727) (symbol 141720 . 141726) (symbol 141708 . 141719) (open-paren 141707 . 141708) (symbol 141677 . 141706) (symbol 141667 . 141676) (symbol 141660 . 141666) (close-paren 141657 . 141658) (RETURN 141599 . 141605) (open-paren 141595 . 141596) (close-paren 141593 . 141594) (symbol 141587 . 141593) (symbol 141575 . 141586) (punctuation 141573 . 141574) (symbol 141567 . 141573) (symbol 141555 . 141566) (open-paren 141554 . 141555) (symbol 141536 . 141553) (symbol 141526 . 141535) (symbol 141519 . 141525) (punctuation 141516 . 141517) (close-paren 141515 . 141516) (symbol 141504 . 141515) (punctuation 141492 . 141493) (symbol 141481 . 141492) (punctuation 141479 . 141480) (symbol 141468 . 141479) (open-paren 141467 . 141468) (symbol 141440 . 141466) (symbol 141430 . 141439) (EXTERN 141423 . 141429) (punctuation 141421 . 141422) (close-paren 141420 . 141421) (VOID 141416 . 141420) (open-paren 141415 . 141416) (symbol 141385 . 141414) (VOID 141380 . 141384) (EXTERN 141373 . 141379) (punctuation 141371 . 141372) (close-paren 141370 . 141371) (symbol 141364 . 141370) (symbol 141354 . 141363) (punctuation 141352 . 141353) (symbol 141346 . 141352) (symbol 141336 . 141345) (punctuation 141302 . 141303) (symbol 141294 . 141302) (symbol 141284 . 141293) (open-paren 141283 . 141284) (symbol 141264 . 141282) (VOID 141259 . 141263) (EXTERN 141252 . 141258) (punctuation 141250 . 141251) (close-paren 141249 . 141250) (VOID 141245 . 141249) (open-paren 141244 . 141245) (symbol 141224 . 141243) (VOID 141219 . 141223) (EXTERN 141212 . 141218) (punctuation 141210 . 141211) (close-paren 141209 . 141210) (VOID 141205 . 141209) (open-paren 141204 . 141205) (symbol 141184 . 141203) (VOID 141179 . 141183) (EXTERN 141172 . 141178) (punctuation 141141 . 141142) (close-paren 141140 . 141141) (VOID 141136 . 141140) (open-paren 141135 . 141136) (symbol 141120 . 141134) (VOID 141115 . 141119) (EXTERN 141108 . 141114) (punctuation 141106 . 141107) (close-paren 141105 . 141106) (VOID 141101 . 141105) (open-paren 141100 . 141101) (symbol 141088 . 141099) (VOID 141083 . 141087) (EXTERN 141076 . 141082) (punctuation 141074 . 141075) (close-paren 141073 . 141074) (symbol 141062 . 141073) (open-paren 141061 . 141062) (symbol 141033 . 141060) (BOOL 141028 . 141032) (EXTERN 141021 . 141027) (punctuation 141019 . 141020) (close-paren 141018 . 141019) (symbol 141007 . 141018) (open-paren 141006 . 141007) (symbol 140989 . 141005) (BOOL 140984 . 140988) (EXTERN 140977 . 140983) (punctuation 140975 . 140976) (close-paren 140974 . 140975) (punctuation 140973 . 140974) (CONST 140967 . 140972) (CHAR 140962 . 140966) (punctuation 140960 . 140961) (symbol 140949 . 140960) (punctuation 140947 . 140948) (INT 140944 . 140947) (open-paren 140943 . 140944) (symbol 140920 . 140942) (symbol 140908 . 140919) (EXTERN 140901 . 140907) (punctuation 140899 . 140900) (close-paren 140898 . 140899) (symbol 140887 . 140898) (open-paren 140886 . 140887) (symbol 140865 . 140885) (BOOL 140860 . 140864) (EXTERN 140853 . 140859) (punctuation 140851 . 140852) (close-paren 140850 . 140851) (INT 140847 . 140850) (punctuation 140845 . 140846) (symbol 140834 . 140845) (open-paren 140833 . 140834) (symbol 140812 . 140832) (symbol 140800 . 140811) (EXTERN 140793 . 140799) (punctuation 140791 . 140792) (close-paren 140790 . 140791) (symbol 140779 . 140790) (punctuation 140777 . 140778) (punctuation 140776 . 140777) (CHAR 140771 . 140775) (CONST 140765 . 140770) (open-paren 140764 . 140765) (symbol 140739 . 140763) (VOID "void" 140733 . 140738) (symbol "ATTRIBUTE_COLD" 140733 . 140738) (EXTERN 140726 . 140732) (punctuation 140724 . 140725) (close-paren 140723 . 140724) (symbol 140712 . 140723) (punctuation 140710 . 140711) (punctuation 140709 . 140710) (CHAR 140704 . 140708) (CONST 140698 . 140703) (open-paren 140697 . 140698) (symbol 140679 . 140696) (VOID "void" 140673 . 140678) (symbol "ATTRIBUTE_COLD" 140673 . 140678) (EXTERN 140666 . 140672) (punctuation 140664 . 140665) (close-paren 140663 . 140664) (INT 140660 . 140663) (punctuation 140658 . 140659) (symbol 140647 . 140658) (punctuation 140645 . 140646) (punctuation 140644 . 140645) (CHAR 140639 . 140643) (CONST 140633 . 140638) (open-paren 140632 . 140633) (symbol 140614 . 140631) (VOID "void" 140608 . 140613) (symbol "ATTRIBUTE_COLD" 140608 . 140613) (EXTERN 140601 . 140607) (punctuation 140599 . 140600) (close-paren 140598 . 140599) (INT 140595 . 140598) (punctuation 140593 . 140594) (symbol 140582 . 140593) (punctuation 140580 . 140581) (punctuation 140579 . 140580) (CHAR 140574 . 140578) (CONST 140568 . 140573) (open-paren 140567 . 140568) (symbol 140547 . 140566) (symbol 140535 . 140546) (EXTERN 140528 . 140534) (punctuation 140526 . 140527) (close-paren 140525 . 140526) (INT 140522 . 140525) (punctuation 140520 . 140521) (punctuation 140519 . 140520) (CONST 140513 . 140518) (CHAR 140508 . 140512) (open-paren 140507 . 140508) (symbol 140493 . 140506) (BOOL 140488 . 140492) (EXTERN 140481 . 140487) (punctuation 140479 . 140480) (close-paren 140478 . 140479) (symbol 140467 . 140478) (open-paren 140466 . 140467) (symbol 140445 . 140465) (VOID 140440 . 140444) (EXTERN 140433 . 140439) (punctuation 140431 . 140432) (close-paren 140430 . 140431) (punctuation 140429 . 140430) (VOID 140424 . 140428) (open-paren 140423 . 140424) (symbol 140409 . 140422) (VOID 140404 . 140408) (EXTERN 140397 . 140403) (punctuation 140395 . 140396) (close-paren 140394 . 140395) (INT 140391 . 140394) (open-paren 140390 . 140391) (symbol 140372 . 140389) (VOID 140367 . 140371) (EXTERN 140360 . 140366) (punctuation 140358 . 140359) (close-paren 140357 . 140358) (INT 140354 . 140357) (punctuation 140352 . 140353) (symbol 140341 . 140352) (punctuation 140334 . 140335) (symbol 140323 . 140334) (punctuation 140321 . 140322) (symbol 140310 . 140321) (punctuation 140308 . 140309) (symbol 140297 . 140308) (punctuation 140290 . 140291) (symbol 140279 . 140290) (punctuation 140277 . 140278) (symbol 140266 . 140277) (punctuation 140264 . 140265) (symbol 140253 . 140264) (open-paren 140252 . 140253) (symbol 140239 . 140251) (symbol 140227 . 140238) (EXTERN 140220 . 140226) (punctuation 140218 . 140219) (close-paren 140217 . 140218) (symbol 140206 . 140217) (open-paren 140205 . 140206) (symbol 140182 . 140204) (symbol 140170 . 140181) (EXTERN 140163 . 140169) (close-paren 140134 . 140135) (VOID 140130 . 140134) (open-paren 140129 . 140130) (symbol 140117 . 140128) (punctuation 140116 . 140117) (CONST 140110 . 140115) (CHAR 140105 . 140109) (EXTERN 140098 . 140104) (punctuation 140096 . 140097) (close-paren 140095 . 140096) (punctuation 140094 . 140095) (CHAR 140089 . 140093) (CONST 140083 . 140088) (open-paren 140082 . 140083) (symbol 140061 . 140081) (BOOL 140056 . 140060) (EXTERN 140049 . 140055) (close-paren 140018 . 140019) (punctuation 140017 . 140018) (CONST 140011 . 140016) (CHAR 140006 . 140010) (punctuation 140004 . 140005) (punctuation 140003 . 140004) (CONST 139997 . 140002) (CHAR 139992 . 139996) (punctuation 139990 . 139991) (punctuation 139989 . 139990) (CHAR 139984 . 139988) (open-paren 139983 . 139984) (symbol 139967 . 139982) (punctuation 139966 . 139967) (CHAR 139961 . 139965) (EXTERN 139954 . 139960) (punctuation 139922 . 139923) (close-paren 139921 . 139922) (VOID 139917 . 139921) (open-paren 139916 . 139917) (symbol 139901 . 139915) (VOID 139896 . 139900) (EXTERN 139889 . 139895) (punctuation 139887 . 139888) (close-paren 139886 . 139887) (symbol 139877 . 139886) (punctuation 139875 . 139876) (symbol 139866 . 139875) (punctuation 139864 . 139865) (punctuation 139863 . 139864) (symbol 139856 . 139862) (STRUCT 139849 . 139855) (open-paren 139848 . 139849) (symbol 139835 . 139847) (symbol 139823 . 139834) (EXTERN 139816 . 139822) (punctuation 139814 . 139815) (close-paren 139813 . 139814) (symbol 139804 . 139813) (punctuation 139802 . 139803) (symbol 139793 . 139802) (punctuation 139744 . 139745) (symbol 139733 . 139744) (punctuation 139731 . 139732) (symbol 139720 . 139731) (open-paren 139719 . 139720) (symbol 139692 . 139718) (symbol 139680 . 139691) (EXTERN 139673 . 139679) (punctuation 139671 . 139672) (close-paren 139670 . 139671) (symbol 139661 . 139670) (punctuation 139659 . 139660) (symbol 139650 . 139659) (punctuation 139648 . 139649) (symbol 139637 . 139648) (punctuation 139635 . 139636) (symbol 139624 . 139635) (open-paren 139623 . 139624) (symbol 139607 . 139622) (symbol 139595 . 139606) (EXTERN 139588 . 139594) (punctuation 139586 . 139587) (close-paren 139585 . 139586) (symbol 139574 . 139585) (punctuation 139572 . 139573) (symbol 139561 . 139572) (punctuation 139559 . 139560) (symbol 139548 . 139559) (open-paren 139547 . 139548) (symbol 139525 . 139546) (symbol 139513 . 139524) (EXTERN 139506 . 139512) (punctuation 139504 . 139505) (close-paren 139503 . 139504) (punctuation 139502 . 139503) (symbol 139490 . 139501) (STRUCT 139483 . 139489) (open-paren 139482 . 139483) (symbol 139467 . 139481) (VOID 139462 . 139466) (EXTERN 139455 . 139461) (punctuation 139453 . 139454) (close-paren 139452 . 139453) (symbol 139441 . 139452) (open-paren 139440 . 139441) (symbol 139426 . 139439) (VOID 139421 . 139425) (EXTERN 139414 . 139420) (punctuation 139412 . 139413) (close-paren 139411 . 139412) (symbol 139402 . 139411) (punctuation 139400 . 139401) (punctuation 139399 . 139400) (symbol 139392 . 139398) (STRUCT 139385 . 139391) (open-paren 139384 . 139385) (symbol 139361 . 139383) (symbol 139351 . 139360) (EXTERN 139344 . 139350) (punctuation 139342 . 139343) (close-paren 139341 . 139342) (symbol 139332 . 139341) (punctuation 139330 . 139331) (punctuation 139329 . 139330) (symbol 139322 . 139328) (STRUCT 139315 . 139321) (open-paren 139314 . 139315) (symbol 139291 . 139313) (symbol 139281 . 139290) (EXTERN 139274 . 139280) (punctuation 139272 . 139273) (close-paren 139271 . 139272) (punctuation 139270 . 139271) (symbol 139263 . 139269) (STRUCT 139256 . 139262) (open-paren 139255 . 139256) (symbol 139235 . 139254) (VOID 139230 . 139234) (EXTERN 139223 . 139229) (punctuation 139221 . 139222) (close-paren 139220 . 139221) (symbol 139209 . 139220) (open-paren 139208 . 139209) (symbol 139187 . 139207) (symbol 139177 . 139186) (EXTERN 139170 . 139176) (punctuation 139168 . 139169) (close-paren 139167 . 139168) (symbol 139156 . 139167) (open-paren 139155 . 139156) (symbol 139139 . 139154) (symbol 139129 . 139138) (EXTERN 139122 . 139128) (punctuation 139090 . 139091) (close-paren 139089 . 139090) (VOID 139085 . 139089) (open-paren 139084 . 139085) (symbol 139069 . 139083) (VOID 139064 . 139068) (EXTERN 139057 . 139063) (punctuation 139055 . 139056) (close-paren 139054 . 139055) (VOID 139050 . 139054) (open-paren 139049 . 139050) (symbol 139037 . 139048) (VOID 139032 . 139036) (EXTERN 139025 . 139031) (punctuation 139023 . 139024) (close-paren 139022 . 139023) (VOID 139018 . 139022) (open-paren 139017 . 139018) (symbol 139000 . 139016) (VOID 138995 . 138999) (EXTERN 138988 . 138994) (punctuation 138986 . 138987) (close-paren 138985 . 138986) (symbol 138974 . 138985) (open-paren 138973 . 138974) (symbol 138953 . 138972) (symbol 138941 . 138952) (EXTERN 138934 . 138940) (punctuation 138932 . 138933) (close-paren 138931 . 138932) (symbol 138920 . 138931) (open-paren 138919 . 138920) (symbol 138899 . 138918) (symbol 138887 . 138898) (EXTERN 138880 . 138886) (punctuation 138878 . 138879) (close-paren 138877 . 138878) (symbol 138868 . 138877) (open-paren 138867 . 138868) (symbol 138849 . 138866) (BOOL 138844 . 138848) (EXTERN 138837 . 138843) (punctuation 138835 . 138836) (close-paren 138834 . 138835) (symbol 138823 . 138834) (punctuation 138821 . 138822) (symbol 138810 . 138821) (punctuation 138808 . 138809) (symbol 138797 . 138808) (punctuation 138754 . 138755) (BOOL 138750 . 138754) (punctuation 138748 . 138749) (symbol 138737 . 138748) (punctuation 138735 . 138736) (symbol 138724 . 138735) (open-paren 138723 . 138724) (symbol 138695 . 138722) (VOID 138690 . 138694) (EXTERN 138683 . 138689) (punctuation 138681 . 138682) (close-paren 138680 . 138681) (symbol 138671 . 138680) (punctuation 138669 . 138670) (symbol 138660 . 138669) (open-paren 138659 . 138660) (symbol 138633 . 138658) (VOID 138628 . 138632) (EXTERN 138621 . 138627) (punctuation 138619 . 138620) (close-paren 138618 . 138619) (symbol 138609 . 138618) (punctuation 138607 . 138608) (symbol 138598 . 138607) (open-paren 138597 . 138598) (symbol 138570 . 138596) (VOID 138565 . 138569) (EXTERN 138558 . 138564) (punctuation 138556 . 138557) (close-paren 138555 . 138556) (symbol 138546 . 138555) (punctuation 138544 . 138545) (symbol 138535 . 138544) (open-paren 138534 . 138535) (symbol 138507 . 138533) (VOID 138502 . 138506) (EXTERN 138495 . 138501) (punctuation 138493 . 138494) (close-paren 138492 . 138493) (symbol 138481 . 138492) (open-paren 138480 . 138481) (symbol 138471 . 138479) (VOID "void" 138465 . 138470) (symbol "ATTRIBUTE_COLD" 138465 . 138470) (EXTERN 138458 . 138464) (punctuation 138456 . 138457) (close-paren 138455 . 138456) (VOID 138451 . 138455) (open-paren 138450 . 138451) (symbol 138414 . 138449) (symbol 138402 . 138413) (EXTERN 138395 . 138401) (punctuation 138393 . 138394) (close-paren 138392 . 138393) (symbol 138381 . 138392) (open-paren 138380 . 138381) (symbol 138352 . 138379) (BOOL 138347 . 138351) (EXTERN 138340 . 138346) (punctuation 138309 . 138310) (close-paren 138308 . 138309) (VOID 138304 . 138308) (open-paren 138303 . 138304) (symbol 138287 . 138302) (VOID 138282 . 138286) (EXTERN 138275 . 138281) (punctuation 138273 . 138274) (close-paren 138272 . 138273) (VOID 138268 . 138272) (open-paren 138267 . 138268) (symbol 138254 . 138266) (VOID 138249 . 138253) (EXTERN 138242 . 138248) (punctuation 138240 . 138241) (close-paren 138239 . 138240) (BOOL 138235 . 138239) (punctuation 138233 . 138234) (symbol 138224 . 138233) (punctuation 138213 . 138214) (symbol 138204 . 138213) (punctuation 138202 . 138203) (symbol 138193 . 138202) (punctuation 138191 . 138192) (symbol 138182 . 138191) (open-paren 138181 . 138182) (symbol 138157 . 138180) (symbol 138145 . 138156) (EXTERN 138138 . 138144) (punctuation 138136 . 138137) (close-paren 138135 . 138136) (BOOL 138131 . 138135) (punctuation 138129 . 138130) (symbol 138120 . 138129) (punctuation 138118 . 138119) (symbol 138109 . 138118) (open-paren 138108 . 138109) (symbol 138089 . 138107) (symbol 138077 . 138088) (EXTERN 138070 . 138076) (punctuation 138068 . 138069) (close-paren 138067 . 138068) (symbol 138056 . 138067) (open-paren 138055 . 138056) (symbol 138030 . 138054) (VOID 138025 . 138029) (EXTERN 138018 . 138024) (punctuation 138016 . 138017) (close-paren 138015 . 138016) (VOID 138011 . 138015) (open-paren 138010 . 138011) (symbol 137988 . 138009) (symbol 137976 . 137987) (EXTERN 137969 . 137975) (punctuation 137967 . 137968) (close-paren 137966 . 137967) (symbol 137955 . 137966) (punctuation 137953 . 137954) (symbol 137942 . 137953) (open-paren 137941 . 137942) (symbol 137918 . 137940) (VOID 137913 . 137917) (EXTERN 137906 . 137912) (punctuation 137904 . 137905) (close-paren 137903 . 137904) (punctuation 137902 . 137903) (symbol 137890 . 137901) (UNION 137884 . 137889) (open-paren 137883 . 137884) (symbol 137863 . 137882) (VOID 137858 . 137862) (EXTERN 137851 . 137857) (punctuation 137849 . 137850) (close-paren 137848 . 137849) (symbol 137837 . 137848) (open-paren 137836 . 137837) (symbol 137828 . 137835) (VOID 137823 . 137827) (EXTERN 137816 . 137822) (punctuation 137784 . 137785) (close-paren 137783 . 137784) (VOID 137779 . 137783) (open-paren 137778 . 137779) (symbol 137759 . 137777) (VOID 137754 . 137758) (EXTERN 137747 . 137753) (punctuation 137745 . 137746) (close-paren 137744 . 137745) (VOID 137740 . 137744) (open-paren 137739 . 137740) (symbol 137726 . 137738) (VOID 137721 . 137725) (EXTERN 137714 . 137720) (close-paren 136428 . 136429) (punctuation 136426 . 136427) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 136398 . 136404) ("type" symbol "Lisp_Vectorlike" 136381 . 136396) ("a" symbol "o" 136378 . 136379)))) 136370 . 136426) (RETURN 136363 . 136369) (punctuation 136359 . 136360) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MODULE_FUNCTIONP" 136338 . 136354)))) 136329 . 136359) (open-paren 136325 . 136326) (close-paren 136323 . 136324) (symbol 136322 . 136323) (symbol 136310 . 136321) (open-paren 136309 . 136310) (symbol 136292 . 136308) (punctuation 136290 . 136291) (symbol 136269 . 136289) (STRUCT 136262 . 136268) (symbol 136255 . 136261) (close-paren 136252 . 136253) (RETURN 136204 . 136210) (open-paren 136200 . 136201) (close-paren 136198 . 136199) (symbol 136197 . 136198) (symbol 136185 . 136196) (open-paren 136184 . 136185) (symbol 136167 . 136183) (BOOL 136162 . 136166) (symbol 136155 . 136161) (punctuation 135769 . 135770) (close-paren 135768 . 135769) (symbol 135762 . 135768) (punctuation 135761 . 135762) (symbol 135749 . 135760) (STRUCT 135742 . 135748) (open-paren 135741 . 135742) (symbol 135712 . 135740) (BOOL 135707 . 135711) (EXTERN 135700 . 135706) (punctuation 135698 . 135699) (close-paren 135697 . 135698) (VOID 135693 . 135697) (open-paren 135692 . 135693) (symbol 135669 . 135691) (symbol 135657 . 135668) (punctuation 135655 . 135656) (close-paren 135654 . 135655) (symbol 135649 . 135654) (symbol 135637 . 135648) (open-paren 135636 . 135637) (symbol 135622 . 135635) (VOID 135617 . 135621) (EXTERN 135610 . 135616) (punctuation 135608 . 135609) (close-paren 135607 . 135608) (symbol 135604 . 135607) (punctuation 135603 . 135604) (symbol 135591 . 135602) (UNION 135585 . 135590) (punctuation 135583 . 135584) (symbol 135578 . 135583) (punctuation 135577 . 135578) (symbol 135565 . 135576) (UNION 135559 . 135564) (open-paren 135558 . 135559) (symbol 135545 . 135557) (VOID 135540 . 135544) (EXTERN 135533 . 135539) (punctuation 135531 . 135532) (close-paren 135530 . 135531) (symbol 135521 . 135530) (punctuation 135519 . 135520) (punctuation 135518 . 135519) (symbol 135506 . 135517) (punctuation 135504 . 135505) (symbol 135493 . 135504) (open-paren 135492 . 135493) (symbol 135472 . 135491) (symbol 135462 . 135471) (EXTERN 135455 . 135461) (punctuation 135453 . 135454) (close-paren 135452 . 135453) (symbol 135441 . 135452) (open-paren 135440 . 135441) (symbol 135428 . 135439) (VOID 135423 . 135427) (EXTERN 135416 . 135422) (punctuation 135414 . 135415) (close-paren 135413 . 135414) (VOID 135409 . 135413) (open-paren 135408 . 135409) (symbol 135395 . 135407) (VOID 135390 . 135394) (EXTERN 135383 . 135389) (punctuation 135381 . 135382) (close-paren 135380 . 135381) (VOID 135376 . 135380) (open-paren 135375 . 135376) (symbol 135365 . 135374) (VOID 135360 . 135364) (EXTERN 135353 . 135359) (punctuation 135351 . 135352) (close-paren 135350 . 135351) (symbol 135339 . 135350) (punctuation 135337 . 135338) (symbol 135326 . 135337) (punctuation 135324 . 135325) (symbol 135313 . 135324) (open-paren 135312 . 135313) (symbol 135301 . 135311) (symbol 135289 . 135300) (EXTERN 135282 . 135288) (punctuation 135280 . 135281) (close-paren 135279 . 135280) (symbol 135268 . 135279) (punctuation 135266 . 135267) (symbol 135255 . 135266) (open-paren 135254 . 135255) (symbol 135243 . 135253) (symbol 135231 . 135242) (EXTERN 135224 . 135230) (punctuation 135222 . 135223) (close-paren 135221 . 135222) (punctuation 135220 . 135221) (punctuation 135219 . 135220) (punctuation 135218 . 135219) (punctuation 135216 . 135217) (symbol 135205 . 135216) (punctuation 135203 . 135204) (symbol 135194 . 135203) (open-paren 135193 . 135194) (symbol 135183 . 135192) (symbol 135171 . 135182) (EXTERN 135164 . 135170) (punctuation 135162 . 135163) (close-paren 135161 . 135162) (VOID 135157 . 135161) (open-paren 135156 . 135157) (symbol 135141 . 135155) (VOID 135136 . 135140) (EXTERN 135129 . 135135) (punctuation 135127 . 135128) (close-paren 135126 . 135127) (symbol 135123 . 135126) (symbol 135111 . 135122) (open-paren 135110 . 135111) (symbol 135096 . 135109) (symbol 135084 . 135095) (EXTERN 135077 . 135083) (punctuation 135075 . 135076) (close-paren 135074 . 135075) (symbol 135063 . 135074) (open-paren 135062 . 135063) (symbol 135050 . 135061) (VOID 135045 . 135049) (EXTERN 135038 . 135044) (punctuation 135036 . 135037) (close-paren 135035 . 135036) (number 135034 . 135035) (punctuation 135032 . 135033) (number 135031 . 135032) (open-paren 135030 . 135031) (symbol 135006 . 135029) (close-paren 135002 . 135003) (symbol 134995 . 135002) (punctuation 134993 . 134994) (punctuation 134992 . 134993) (CHAR 134987 . 134991) (CONST 134981 . 134986) (open-paren 134980 . 134981) (symbol 134965 . 134979) (symbol 134953 . 134964) (EXTERN 134946 . 134952) (punctuation 134944 . 134945) (close-paren 134943 . 134944) (number 134942 . 134943) (punctuation 134940 . 134941) (number 134939 . 134940) (open-paren 134938 . 134939) (symbol 134914 . 134937) (close-paren 134910 . 134911) (symbol 134903 . 134910) (punctuation 134901 . 134902) (punctuation 134900 . 134901) (CHAR 134895 . 134899) (CONST 134889 . 134894) (open-paren 134888 . 134889) (symbol 134881 . 134887) (VOID "void" 134875 . 134880) (symbol "ATTRIBUTE_COLD" 134875 . 134880) (EXTERN 134868 . 134874) (punctuation 134866 . 134867) (close-paren 134865 . 134866) (number 134864 . 134865) (punctuation 134862 . 134863) (number 134861 . 134862) (open-paren 134860 . 134861) (symbol 134836 . 134859) (close-paren 134834 . 134835) (punctuation 134833 . 134834) (punctuation 134832 . 134833) (punctuation 134831 . 134832) (punctuation 134829 . 134830) (punctuation 134828 . 134829) (CHAR 134823 . 134827) (CONST 134817 . 134822) (open-paren 134816 . 134817) (symbol 134810 . 134815) (VOID "void" 134804 . 134809) (symbol "ATTRIBUTE_COLD" 134804 . 134809) (EXTERN 134797 . 134803) (punctuation 134795 . 134796) (close-paren 134794 . 134795) (punctuation 134793 . 134794) (symbol 134780 . 134792) (STRUCT 134773 . 134779) (open-paren 134772 . 134773) (symbol 134747 . 134771) (VOID 134742 . 134746) (EXTERN 134735 . 134741) (punctuation 134733 . 134734) (close-paren 134732 . 134733) (VOID 134728 . 134732) (open-paren 134727 . 134728) (symbol 134702 . 134726) (VOID 134697 . 134701) (EXTERN 134690 . 134696) (punctuation 134688 . 134689) (close-paren 134687 . 134688) (symbol 134676 . 134687) (punctuation 134674 . 134675) (symbol 134665 . 134674) (open-paren 134664 . 134665) (symbol 134654 . 134663) (symbol 134642 . 134653) (EXTERN 134635 . 134641) (punctuation 134633 . 134634) (close-paren 134632 . 134633) (punctuation 134631 . 134632) (VOID 134626 . 134630) (punctuation 134624 . 134625) (semantic-list 134616 . 134624) (semantic-list 134612 . 134615) (VOID 134607 . 134611) (punctuation 134605 . 134606) (symbol 134596 . 134605) (open-paren 134595 . 134596) (symbol 134572 . 134594) (VOID 134567 . 134571) (EXTERN 134560 . 134566) (punctuation 134558 . 134559) (close-paren 134557 . 134558) (symbol 134546 . 134557) (punctuation 134544 . 134545) (semantic-list 134531 . 134544) (semantic-list 134527 . 134530) (VOID 134522 . 134526) (punctuation 134520 . 134521) (symbol 134511 . 134520) (open-paren 134510 . 134511) (symbol 134491 . 134509) (VOID 134486 . 134490) (EXTERN 134479 . 134485) (punctuation 134477 . 134478) (close-paren 134476 . 134477) (symbol 134467 . 134476) (open-paren 134466 . 134467) (symbol 134445 . 134465) (VOID 134440 . 134444) (EXTERN 134433 . 134439) (punctuation 134431 . 134432) (close-paren 134430 . 134431) (punctuation 134429 . 134430) (VOID 134424 . 134428) (punctuation 134422 . 134423) (symbol 134410 . 134422) (ENUM 134405 . 134409) (open-paren 134404 . 134405) (symbol 134375 . 134403) (VOID 134370 . 134374) (EXTERN 134363 . 134369) (punctuation 134361 . 134362) (close-paren 134360 . 134361) (VOID 134356 . 134360) (open-paren 134355 . 134356) (symbol 134325 . 134354) (VOID 134320 . 134324) (EXTERN 134313 . 134319) (punctuation 134311 . 134312) (close-paren 134310 . 134311) (VOID 134306 . 134310) (open-paren 134305 . 134306) (symbol 134273 . 134304) (VOID 134268 . 134272) (EXTERN 134261 . 134267) (punctuation 134259 . 134260) (close-paren 134258 . 134259) (semantic-list 134252 . 134258) (semantic-list 134248 . 134251) (VOID 134243 . 134247) (open-paren 134242 . 134243) (symbol 134215 . 134241) (VOID 134210 . 134214) (EXTERN 134203 . 134209) (punctuation 134201 . 134202) (close-paren 134200 . 134201) (symbol 134192 . 134200) (punctuation 134190 . 134191) (semantic-list 134180 . 134190) (semantic-list 134176 . 134179) (VOID 134171 . 134175) (open-paren 134170 . 134171) (symbol 134141 . 134169) (VOID 134136 . 134140) (EXTERN 134129 . 134135) (punctuation 134127 . 134128) (close-paren 134126 . 134127) (INT 134123 . 134126) (punctuation 134121 . 134122) (semantic-list 134116 . 134121) (semantic-list 134112 . 134115) (VOID 134107 . 134111) (open-paren 134106 . 134107) (symbol 134080 . 134105) (VOID 134075 . 134079) (EXTERN 134068 . 134074) (punctuation 134066 . 134067) (close-paren 134065 . 134066) (punctuation 134064 . 134065) (VOID 134059 . 134063) (punctuation 134057 . 134058) (semantic-list 134049 . 134057) (semantic-list 134045 . 134048) (VOID 134040 . 134044) (open-paren 134039 . 134040) (symbol 134013 . 134038) (VOID 134008 . 134012) (EXTERN 134001 . 134007) (punctuation 133999 . 134000) (close-paren 133998 . 133999) (symbol 133989 . 133998) (punctuation 133987 . 133988) (punctuation 133986 . 133987) (symbol 133974 . 133985) (open-paren 133973 . 133974) (symbol 133945 . 133972) (VOID 133940 . 133944) (EXTERN 133933 . 133939) (punctuation 133931 . 133932) (close-paren 133930 . 133931) (symbol 133919 . 133930) (punctuation 133917 . 133918) (semantic-list 133904 . 133917) (semantic-list 133900 . 133903) (VOID 133895 . 133899) (open-paren 133894 . 133895) (symbol 133872 . 133893) (VOID 133867 . 133871) (EXTERN 133860 . 133866) (punctuation 133858 . 133859) (close-paren 133857 . 133858) (symbol 133846 . 133857) (punctuation 133844 . 133845) (symbol 133833 . 133844) (open-paren 133832 . 133833) (symbol 133823 . 133831) (VOID 133818 . 133822) (EXTERN 133811 . 133817) (punctuation 133809 . 133810) (close-paren 133808 . 133809) (symbol 133797 . 133808) (ENUM 133792 . 133796) (punctuation 133790 . 133791) (symbol 133779 . 133790) (open-paren 133778 . 133779) (symbol 133756 . 133777) (punctuation 133755 . 133756) (symbol 133747 . 133754) (STRUCT 133740 . 133746) (EXTERN 133733 . 133739) (close-paren 133702 . 133703) (symbol 133691 . 133702) (ENUM 133686 . 133690) (punctuation 133684 . 133685) (symbol 133673 . 133684) (open-paren 133672 . 133673) (symbol 133659 . 133671) (punctuation 133658 . 133659) (symbol 133650 . 133657) (STRUCT 133643 . 133649) (EXTERN 133636 . 133642) (punctuation 133634 . 133635) (close-paren 133633 . 133634) (punctuation 133597 . 133598) (punctuation 133582 . 133583) (punctuation 133581 . 133582) (VOID 133576 . 133580) (punctuation 133574 . 133575) (punctuation 133563 . 133564) (open-paren 133549 . 133550) (symbol 133530 . 133548) (symbol 133518 . 133529) (EXTERN 133511 . 133517) (punctuation 133509 . 133510) (close-paren 133508 . 133509) (punctuation 133466 . 133467) (punctuation 133451 . 133452) (symbol 133440 . 133451) (punctuation 133433 . 133434) (punctuation 133432 . 133433) (symbol 133420 . 133431) (punctuation 133418 . 133419) (symbol 133409 . 133418) (punctuation 133407 . 133408) (punctuation 133378 . 133379) (open-paren 133364 . 133365) (symbol 133334 . 133359) (symbol 133322 . 133333) (EXTERN 133315 . 133321) (punctuation 133313 . 133314) (close-paren 133312 . 133313) (punctuation 133296 . 133297) (punctuation 133281 . 133282) (symbol 133270 . 133281) (punctuation 133268 . 133269) (symbol 133257 . 133268) (punctuation 133255 . 133256) (symbol 133244 . 133255) (punctuation 133242 . 133243) (symbol 133231 . 133242) (punctuation 133229 . 133230) (symbol 133218 . 133229) (punctuation 133216 . 133217) (symbol 133205 . 133216) (punctuation 133203 . 133204) (punctuation 133135 . 133136) (open-paren 133121 . 133122) (symbol 133095 . 133120) (symbol 133083 . 133094) (EXTERN 133076 . 133082) (punctuation 133074 . 133075) (close-paren 133073 . 133074) (punctuation 133057 . 133058) (punctuation 133042 . 133043) (symbol 133031 . 133042) (punctuation 133029 . 133030) (symbol 133018 . 133029) (punctuation 133016 . 133017) (symbol 133005 . 133016) (punctuation 133003 . 133004) (symbol 132992 . 133003) (punctuation 132990 . 132991) (symbol 132979 . 132990) (punctuation 132977 . 132978) (punctuation 132922 . 132923) (open-paren 132908 . 132909) (symbol 132882 . 132907) (symbol 132870 . 132881) (EXTERN 132863 . 132869) (punctuation 132861 . 132862) (close-paren 132860 . 132861) (punctuation 132844 . 132845) (punctuation 132829 . 132830) (symbol 132818 . 132829) (punctuation 132816 . 132817) (symbol 132805 . 132816) (punctuation 132803 . 132804) (symbol 132792 . 132803) (punctuation 132790 . 132791) (symbol 132779 . 132790) (punctuation 132777 . 132778) (punctuation 132735 . 132736) (open-paren 132721 . 132722) (symbol 132695 . 132720) (symbol 132683 . 132694) (EXTERN 132676 . 132682) (punctuation 132674 . 132675) (close-paren 132673 . 132674) (punctuation 132657 . 132658) (punctuation 132642 . 132643) (symbol 132631 . 132642) (punctuation 132629 . 132630) (symbol 132618 . 132629) (punctuation 132616 . 132617) (symbol 132605 . 132616) (punctuation 132603 . 132604) (punctuation 132574 . 132575) (open-paren 132560 . 132561) (symbol 132534 . 132559) (symbol 132522 . 132533) (EXTERN 132515 . 132521) (punctuation 132513 . 132514) (close-paren 132512 . 132513) (punctuation 132496 . 132497) (punctuation 132481 . 132482) (symbol 132470 . 132481) (punctuation 132468 . 132469) (symbol 132457 . 132468) (punctuation 132455 . 132456) (punctuation 132439 . 132440) (open-paren 132425 . 132426) (symbol 132399 . 132424) (symbol 132387 . 132398) (EXTERN 132380 . 132386) (punctuation 132378 . 132379) (close-paren 132377 . 132378) (punctuation 132361 . 132362) (punctuation 132346 . 132347) (symbol 132335 . 132346) (punctuation 132333 . 132334) (punctuation 132324 . 132325) (open-paren 132310 . 132311) (symbol 132286 . 132309) (symbol 132274 . 132285) (EXTERN 132267 . 132273) (punctuation 132265 . 132266) (close-paren 132264 . 132265) (symbol 132253 . 132264) (punctuation 132251 . 132252) (symbol 132240 . 132251) (punctuation 132238 . 132239) (symbol 132227 . 132238) (open-paren 132226 . 132227) (symbol 132197 . 132225) (symbol 132185 . 132196) (EXTERN 132178 . 132184) (punctuation 132176 . 132177) (close-paren 132175 . 132176) (symbol 132164 . 132175) (punctuation 132162 . 132163) (punctuation 132146 . 132147) (punctuation 132131 . 132132) (symbol 132120 . 132131) (open-paren 132119 . 132120) (symbol 132104 . 132118) (symbol 132092 . 132103) (EXTERN 132085 . 132091) (punctuation 132083 . 132084) (close-paren 132082 . 132083) (symbol 132071 . 132082) (punctuation 132069 . 132070) (symbol 132058 . 132069) (punctuation 132056 . 132057) (symbol 132045 . 132056) (punctuation 132043 . 132044) (symbol 132032 . 132043) (punctuation 132030 . 132031) (symbol 132019 . 132030) (punctuation 132017 . 132018) (symbol 132006 . 132017) (punctuation 132004 . 132005) (symbol 131993 . 132004) (punctuation 131991 . 131992) (symbol 131980 . 131991) (punctuation 131978 . 131979) (symbol 131967 . 131978) (open-paren 131966 . 131967) (symbol 131960 . 131965) (symbol 131948 . 131959) (EXTERN 131941 . 131947) (punctuation 131939 . 131940) (close-paren 131938 . 131939) (symbol 131927 . 131938) (punctuation 131925 . 131926) (symbol 131914 . 131925) (punctuation 131912 . 131913) (symbol 131901 . 131912) (punctuation 131899 . 131900) (symbol 131888 . 131899) (punctuation 131886 . 131887) (symbol 131875 . 131886) (punctuation 131873 . 131874) (symbol 131862 . 131873) (punctuation 131860 . 131861) (symbol 131849 . 131860) (punctuation 131847 . 131848) (symbol 131836 . 131847) (open-paren 131835 . 131836) (symbol 131829 . 131834) (symbol 131817 . 131828) (EXTERN 131810 . 131816) (punctuation 131808 . 131809) (close-paren 131807 . 131808) (symbol 131796 . 131807) (punctuation 131794 . 131795) (symbol 131783 . 131794) (punctuation 131781 . 131782) (symbol 131770 . 131781) (punctuation 131768 . 131769) (symbol 131757 . 131768) (punctuation 131755 . 131756) (symbol 131744 . 131755) (punctuation 131742 . 131743) (symbol 131731 . 131742) (punctuation 131729 . 131730) (symbol 131718 . 131729) (open-paren 131717 . 131718) (symbol 131711 . 131716) (symbol 131699 . 131710) (EXTERN 131692 . 131698) (punctuation 131690 . 131691) (close-paren 131689 . 131690) (symbol 131678 . 131689) (punctuation 131676 . 131677) (symbol 131665 . 131676) (punctuation 131663 . 131664) (symbol 131652 . 131663) (punctuation 131650 . 131651) (symbol 131639 . 131650) (punctuation 131637 . 131638) (symbol 131626 . 131637) (punctuation 131624 . 131625) (symbol 131613 . 131624) (open-paren 131612 . 131613) (symbol 131606 . 131611) (symbol 131594 . 131605) (EXTERN 131587 . 131593) (punctuation 131585 . 131586) (close-paren 131584 . 131585) (symbol 131573 . 131584) (punctuation 131571 . 131572) (symbol 131560 . 131571) (punctuation 131558 . 131559) (symbol 131547 . 131558) (punctuation 131545 . 131546) (symbol 131534 . 131545) (punctuation 131532 . 131533) (symbol 131521 . 131532) (open-paren 131520 . 131521) (symbol 131514 . 131519) (symbol 131502 . 131513) (EXTERN 131495 . 131501) (punctuation 131493 . 131494) (close-paren 131492 . 131493) (symbol 131481 . 131492) (punctuation 131479 . 131480) (symbol 131468 . 131479) (punctuation 131466 . 131467) (symbol 131455 . 131466) (punctuation 131453 . 131454) (symbol 131442 . 131453) (open-paren 131441 . 131442) (symbol 131435 . 131440) (symbol 131423 . 131434) (EXTERN 131416 . 131422) (punctuation 131414 . 131415) (close-paren 131413 . 131414) (symbol 131402 . 131413) (punctuation 131400 . 131401) (symbol 131389 . 131400) (punctuation 131387 . 131388) (symbol 131376 . 131387) (open-paren 131375 . 131376) (symbol 131369 . 131374) (symbol 131357 . 131368) (EXTERN 131350 . 131356) (punctuation 131348 . 131349) (close-paren 131347 . 131348) (symbol 131336 . 131347) (punctuation 131334 . 131335) (symbol 131323 . 131334) (open-paren 131322 . 131323) (symbol 131316 . 131321) (symbol 131304 . 131315) (EXTERN 131297 . 131303) (punctuation 131295 . 131296) (close-paren 131294 . 131295) (symbol 131283 . 131294) (open-paren 131282 . 131283) (symbol 131276 . 131281) (symbol 131264 . 131275) (EXTERN 131257 . 131263) (punctuation 131255 . 131256) (close-paren 131254 . 131255) (symbol 131243 . 131254) (punctuation 131241 . 131242) (symbol 131230 . 131241) (open-paren 131229 . 131230) (symbol 131222 . 131228) (symbol 131210 . 131221) (EXTERN 131203 . 131209) (punctuation 131201 . 131202) (close-paren 131200 . 131201) (symbol 131196 . 131200) (symbol 131184 . 131195) (open-paren 131183 . 131184) (symbol 131174 . 131182) (symbol 131162 . 131173) (EXTERN 131155 . 131161) (punctuation 131153 . 131154) (close-paren 131152 . 131153) (symbol 131142 . 131152) (punctuation 131141 . 131142) (symbol 131129 . 131140) (punctuation 131127 . 131128) (symbol 131120 . 131127) (symbol 131110 . 131119) (punctuation 131108 . 131109) (symbol 131104 . 131108) (punctuation 131103 . 131104) (symbol 131093 . 131102) (STRUCT 131086 . 131092) (open-paren 131085 . 131086) (symbol 131072 . 131084) (symbol 131060 . 131071) (EXTERN 131053 . 131059) (punctuation 131051 . 131052) (close-paren 131050 . 131051) (symbol 131039 . 131050) (open-paren 131038 . 131039) (symbol 131028 . 131037) (BOOL 131023 . 131027) (EXTERN 131016 . 131022) (punctuation 131014 . 131015) (close-paren 131013 . 131014) (VOID 131009 . 131013) (open-paren 131008 . 131009) (symbol 130993 . 131007) (VOID "void" 130987 . 130992) (symbol "ATTRIBUTE_COLD" 130987 . 130992) (EXTERN 130980 . 130986) (punctuation 130978 . 130979) (close-paren 130977 . 130978) (symbol 130966 . 130977) (punctuation 130964 . 130965) (punctuation 130963 . 130964) (CHAR 130958 . 130962) (CONST 130952 . 130957) (open-paren 130951 . 130952) (symbol 130938 . 130950) (VOID "void" 130932 . 130937) (symbol "ATTRIBUTE_COLD" 130932 . 130937) (EXTERN 130925 . 130931) (punctuation 130923 . 130924) (close-paren 130922 . 130923) (symbol 130911 . 130922) (punctuation 130909 . 130910) (symbol 130898 . 130909) (punctuation 130896 . 130897) (symbol 130885 . 130896) (punctuation 130883 . 130884) (symbol 130872 . 130883) (open-paren 130871 . 130872) (symbol 130862 . 130870) (VOID "void" 130856 . 130861) (symbol "ATTRIBUTE_COLD" 130856 . 130861) (EXTERN 130849 . 130855) (punctuation 130847 . 130848) (close-paren 130846 . 130847) (symbol 130835 . 130846) (punctuation 130833 . 130834) (symbol 130822 . 130833) (punctuation 130820 . 130821) (symbol 130809 . 130820) (open-paren 130808 . 130809) (symbol 130799 . 130807) (VOID "void" 130793 . 130798) (symbol "ATTRIBUTE_COLD" 130793 . 130798) (EXTERN 130786 . 130792) (punctuation 130784 . 130785) (close-paren 130783 . 130784) (symbol 130772 . 130783) (punctuation 130770 . 130771) (symbol 130759 . 130770) (open-paren 130758 . 130759) (symbol 130749 . 130757) (VOID "void" 130743 . 130748) (symbol "ATTRIBUTE_COLD" 130743 . 130748) (EXTERN 130736 . 130742) (punctuation 130734 . 130735) (close-paren 130733 . 130734) (symbol 130722 . 130733) (open-paren 130721 . 130722) (symbol 130712 . 130720) (VOID "void" 130706 . 130711) (symbol "ATTRIBUTE_COLD" 130706 . 130711) (EXTERN 130699 . 130705) (close-paren 130697 . 130698) (open-paren 130663 . 130664) (close-paren 130661 . 130662) (symbol 130657 . 130661) (symbol 130645 . 130656) (punctuation 130643 . 130644) (symbol 130631 . 130643) (symbol 130619 . 130630) (open-paren 130618 . 130619) (symbol 130610 . 130617) (VOID "void" 130604 . 130609) (symbol "ATTRIBUTE_COLD" 130604 . 130609) (symbol 130597 . 130603) (punctuation 130595 . 130596) (close-paren 130594 . 130595) (VOID 130590 . 130594) (open-paren 130589 . 130590) (symbol 130584 . 130588) (symbol 130572 . 130583) (EXTERN 130565 . 130571) (punctuation 130563 . 130564) (close-paren 130562 . 130563) (punctuation 130505 . 130506) (punctuation 130479 . 130480) (symbol 130475 . 130479) (punctuation 130474 . 130475) (symbol 130462 . 130473) (punctuation 130460 . 130461) (symbol 130455 . 130460) (symbol 130445 . 130454) (open-paren 130444 . 130445) (symbol 130425 . 130443) (symbol 130413 . 130424) (EXTERN 130406 . 130412) (punctuation 130404 . 130405) (close-paren 130403 . 130404) (symbol 130392 . 130403) (punctuation 130390 . 130391) (symbol 130379 . 130390) (punctuation 130377 . 130378) (symbol 130366 . 130377) (open-paren 130365 . 130366) (symbol 130344 . 130364) (VOID 130339 . 130343) (EXTERN 130332 . 130338) (punctuation 130330 . 130331) (close-paren 130329 . 130330) (symbol 130318 . 130329) (open-paren 130317 . 130318) (symbol 130308 . 130316) (VOID 130303 . 130307) (EXTERN 130296 . 130302) (punctuation 130088 . 130089) (close-paren 130087 . 130088) (symbol 130076 . 130087) (open-paren 130075 . 130076) (symbol 130061 . 130074) (BOOL 130056 . 130060) (EXTERN 130049 . 130055) (close-paren 129875 . 129876) (semantic-list 129867 . 129872) (RETURN 129829 . 129835) (open-paren 129825 . 129826) (close-paren 129823 . 129824) (symbol 129820 . 129823) (punctuation 129819 . 129820) (CHAR 129814 . 129818) (CONST 129808 . 129813) (open-paren 129807 . 129808) (symbol 129791 . 129806) (symbol 129779 . 129790) (symbol 129772 . 129778) (close-paren 129769 . 129770) (semantic-list 129761 . 129766) (RETURN 129732 . 129738) (open-paren 129728 . 129729) (close-paren 129726 . 129727) (symbol 129723 . 129726) (punctuation 129722 . 129723) (CHAR 129717 . 129721) (CONST 129711 . 129716) (open-paren 129710 . 129711) (symbol 129703 . 129709) (symbol 129691 . 129702) (symbol 129684 . 129690) (punctuation 129681 . 129682) (close-paren 129680 . 129681) (VOID 129676 . 129680) (open-paren 129675 . 129676) (symbol 129661 . 129674) (VOID 129656 . 129660) (EXTERN 129649 . 129655) (punctuation 129647 . 129648) (close-paren 129646 . 129647) (VOID 129642 . 129646) (open-paren 129641 . 129642) (symbol 129630 . 129640) (VOID 129625 . 129629) (EXTERN 129618 . 129624) (punctuation 129616 . 129617) (close-paren 129615 . 129616) (VOID 129611 . 129615) (open-paren 129610 . 129611) (symbol 129592 . 129609) (VOID 129587 . 129591) (EXTERN 129580 . 129586) (punctuation 129578 . 129579) (close-paren 129577 . 129578) (symbol 129566 . 129577) (punctuation 129564 . 129565) (punctuation 129563 . 129564) (CHAR 129558 . 129562) (CONST 129552 . 129557) (open-paren 129551 . 129552) (symbol 129539 . 129550) (VOID 129534 . 129538) (EXTERN 129527 . 129533) (punctuation 129525 . 129526) (close-paren 129524 . 129525) (symbol 129513 . 129524) (punctuation 129486 . 129487) (semantic-list 129460 . 129486) (semantic-list 129456 . 129459) (VOID 129451 . 129455) (punctuation 129449 . 129450) (symbol 129438 . 129449) (open-paren 129437 . 129438) (symbol 129425 . 129436) (VOID 129420 . 129424) (EXTERN 129413 . 129419) (punctuation 129411 . 129412) (close-paren 129410 . 129411) (punctuation 129409 . 129410) (symbol 129399 . 129408) (punctuation 129397 . 129398) (INT 129394 . 129397) (punctuation 129392 . 129393) (punctuation 129391 . 129392) (CONST 129385 . 129390) (CHAR 129380 . 129384) (open-paren 129379 . 129380) (symbol 129362 . 129378) (symbol 129350 . 129361) (EXTERN 129343 . 129349) (punctuation 129341 . 129342) (close-paren 129340 . 129341) (number 129338 . 129339) (punctuation 129336 . 129337) (symbol 129316 . 129335) (open-paren 129314 . 129315) (ENUM 129309 . 129313) (punctuation 129307 . 129308) (close-paren 129306 . 129307) (BOOL 129302 . 129306) (punctuation 129300 . 129301) (BOOL 129296 . 129300) (punctuation 129294 . 129295) (symbol 129283 . 129294) (punctuation 129281 . 129282) (punctuation 129280 . 129281) (symbol 129268 . 129279) (punctuation 129248 . 129249) (symbol 129237 . 129248) (punctuation 129235 . 129236) (symbol 129224 . 129235) (punctuation 129222 . 129223) (symbol 129211 . 129222) (open-paren 129210 . 129211) (symbol 129204 . 129209) (INT 129200 . 129203) (EXTERN 129193 . 129199) (punctuation 129191 . 129192) (close-paren 129190 . 129191) (symbol 129179 . 129190) (punctuation 129177 . 129178) (symbol 129166 . 129177) (punctuation 129158 . 129159) (symbol 129147 . 129158) (punctuation 129145 . 129146) (symbol 129134 . 129145) (punctuation 129132 . 129133) (symbol 129121 . 129132) (open-paren 129120 . 129121) (symbol 129099 . 129119) (symbol 129087 . 129098) (EXTERN 129080 . 129086) (punctuation 129078 . 129079) (close-paren 129077 . 129078) (punctuation 129076 . 129077) (CHAR 129071 . 129075) (CONST 129065 . 129070) (punctuation 129063 . 129064) (symbol 129052 . 129063) (open-paren 129051 . 129052) (symbol 129042 . 129050) (BOOL 129037 . 129041) (EXTERN 129030 . 129036) (close-paren 129028 . 129029) (semantic-list 128958 . 128971) (IF 128955 . 128957) (open-paren 128951 . 128952) (close-paren 128949 . 128950) (symbol 128948 . 128949) (symbol 128936 . 128947) (open-paren 128935 . 128936) (symbol 128919 . 128934) (VOID 128914 . 128918) (symbol 128907 . 128913) (punctuation 128905 . 128906) (close-paren 128904 . 128905) (symbol 128895 . 128904) (punctuation 128893 . 128894) (symbol 128884 . 128893) (punctuation 128882 . 128883) (punctuation 128881 . 128882) (CHAR 128876 . 128880) (CONST 128870 . 128875) (punctuation 128868 . 128869) (symbol 128857 . 128868) (open-paren 128856 . 128857) (symbol 128847 . 128855) (symbol 128835 . 128846) (EXTERN 128828 . 128834) (punctuation 128826 . 128827) (close-paren 128825 . 128826) (symbol 128814 . 128825) (punctuation 128812 . 128813) (symbol 128801 . 128812) (open-paren 128800 . 128801) (symbol 128788 . 128799) (VOID 128783 . 128787) (EXTERN 128776 . 128782) (punctuation 128774 . 128775) (close-paren 128773 . 128774) (symbol 128762 . 128773) (punctuation 128760 . 128761) (symbol 128749 . 128760) (punctuation 128747 . 128748) (symbol 128736 . 128747) (open-paren 128735 . 128736) (symbol 128721 . 128734) (symbol 128709 . 128720) (EXTERN 128702 . 128708) (punctuation 128700 . 128701) (close-paren 128699 . 128700) (symbol 128690 . 128699) (punctuation 128688 . 128689) (punctuation 128687 . 128688) (CHAR 128682 . 128686) (CONST 128676 . 128681) (open-paren 128675 . 128676) (symbol 128657 . 128674) (symbol 128645 . 128656) (EXTERN 128638 . 128644) (punctuation 128636 . 128637) (close-paren 128635 . 128636) (symbol 128626 . 128635) (punctuation 128624 . 128625) (punctuation 128623 . 128624) (CHAR 128618 . 128622) (CONST 128612 . 128617) (open-paren 128611 . 128612) (symbol 128602 . 128610) (symbol 128590 . 128601) (EXTERN 128583 . 128589) (punctuation 128581 . 128582) (close-paren 128580 . 128581) (symbol 128569 . 128580) (open-paren 128568 . 128569) (symbol 128554 . 128567) (symbol 128542 . 128553) (EXTERN 128535 . 128541) (punctuation 128505 . 128506) (close-paren 128504 . 128505) (number 128503 . 128504) (punctuation 128501 . 128502) (number 128500 . 128501) (open-paren 128499 . 128500) (symbol 128475 . 128498) (close-paren 128471 . 128472) (symbol 128464 . 128471) (punctuation 128462 . 128463) (punctuation 128461 . 128462) (CONST 128455 . 128460) (CHAR 128450 . 128454) (punctuation 128441 . 128442) (symbol 128432 . 128441) (punctuation 128430 . 128431) (punctuation 128429 . 128430) (CHAR 128424 . 128428) (punctuation 128422 . 128423) (punctuation 128421 . 128422) (symbol 128411 . 128420) (punctuation 128409 . 128410) (punctuation 128408 . 128409) (punctuation 128407 . 128408) (CHAR 128402 . 128406) (open-paren 128401 . 128402) (symbol 128391 . 128400) (symbol 128381 . 128390) (EXTERN 128374 . 128380) (punctuation 128372 . 128373) (close-paren 128371 . 128372) (number 128370 . 128371) (punctuation 128368 . 128369) (number 128367 . 128368) (open-paren 128366 . 128367) (symbol 128342 . 128365) (close-paren 128338 . 128339) (punctuation 128337 . 128338) (punctuation 128336 . 128337) (punctuation 128335 . 128336) (punctuation 128333 . 128334) (punctuation 128332 . 128333) (CONST 128326 . 128331) (CHAR 128321 . 128325) (punctuation 128313 . 128314) (symbol 128304 . 128313) (punctuation 128302 . 128303) (punctuation 128301 . 128302) (CHAR 128296 . 128300) (punctuation 128294 . 128295) (punctuation 128293 . 128294) (symbol 128283 . 128292) (punctuation 128281 . 128282) (punctuation 128280 . 128281) (punctuation 128279 . 128280) (CHAR 128274 . 128278) (open-paren 128273 . 128274) (symbol 128264 . 128272) (symbol 128254 . 128263) (EXTERN 128247 . 128253) (punctuation 128245 . 128246) (close-paren 128244 . 128245) (number 128243 . 128244) (punctuation 128241 . 128242) (number 128240 . 128241) (open-paren 128239 . 128240) (symbol 128215 . 128238) (close-paren 128211 . 128212) (punctuation 128210 . 128211) (punctuation 128209 . 128210) (punctuation 128208 . 128209) (punctuation 128206 . 128207) (punctuation 128205 . 128206) (CONST 128199 . 128204) (CHAR 128194 . 128198) (punctuation 128192 . 128193) (punctuation 128191 . 128192) (CHAR 128186 . 128190) (open-paren 128185 . 128186) (symbol 128176 . 128184) (symbol 128166 . 128175) (EXTERN 128159 . 128165) (punctuation 128157 . 128158) (close-paren 128156 . 128157) (symbol 128149 . 128156) (punctuation 128143 . 128144) (punctuation 128142 . 128143) (CHAR 128137 . 128141) (CONST 128131 . 128136) (punctuation 128129 . 128130) (punctuation 128128 . 128129) (CHAR 128123 . 128127) (CONST 128117 . 128122) (punctuation 128115 . 128116) (symbol 128106 . 128115) (punctuation 128104 . 128105) (punctuation 128103 . 128104) (CHAR 128098 . 128102) (open-paren 128097 . 128098) (symbol 128090 . 128096) (symbol 128080 . 128089) (EXTERN 128073 . 128079) (punctuation 128042 . 128043) (close-paren 128041 . 128042) (VOID 128037 . 128041) (open-paren 128036 . 128037) (symbol 128022 . 128035) (VOID 128017 . 128021) (EXTERN 128010 . 128016) (punctuation 128008 . 128009) (close-paren 128007 . 128008) (VOID 128003 . 128007) (open-paren 128002 . 128003) (symbol 127986 . 128001) (VOID 127981 . 127985) (EXTERN 127974 . 127980) (punctuation 127972 . 127973) (close-paren 127971 . 127972) (DOUBLE 127965 . 127971) (punctuation 127963 . 127964) (punctuation 127962 . 127963) (CHAR 127957 . 127961) (open-paren 127956 . 127957) (symbol 127940 . 127955) (INT 127936 . 127939) (EXTERN 127929 . 127935) (punctuation 127891 . 127892) (close-paren 127890 . 127891) (symbol 127879 . 127890) (punctuation 127877 . 127878) (punctuation 127861 . 127862) (punctuation 127846 . 127847) (punctuation 127845 . 127846) (CHAR 127840 . 127844) (CONST 127834 . 127839) (open-paren 127833 . 127834) (symbol 127789 . 127824) (symbol 127777 . 127788) (EXTERN 127770 . 127776) (punctuation 127768 . 127769) (close-paren 127767 . 127768) (symbol 127756 . 127767) (punctuation 127749 . 127750) (punctuation 127748 . 127749) (CHAR 127743 . 127747) (CONST 127737 . 127742) (punctuation 127735 . 127736) (symbol 127724 . 127735) (punctuation 127722 . 127723) (symbol 127711 . 127722) (open-paren 127710 . 127711) (symbol 127690 . 127709) (VOID 127685 . 127689) (EXTERN 127678 . 127684) (punctuation 127652 . 127653) (close-paren 127651 . 127652) (punctuation 127650 . 127651) (CHAR 127645 . 127649) (CONST 127639 . 127644) (open-paren 127638 . 127639) (symbol 127613 . 127637) (VOID 127608 . 127612) (EXTERN 127601 . 127607) (close-paren 127579 . 127580) (symbol 127568 . 127579) (open-paren 127567 . 127568) (symbol 127555 . 127566) (VOID 127550 . 127554) (EXTERN 127543 . 127549) (punctuation 127469 . 127470) (close-paren 127468 . 127469) (VOID 127464 . 127468) (open-paren 127463 . 127464) (symbol 127447 . 127462) (VOID 127442 . 127446) (EXTERN 127435 . 127441) (punctuation 127433 . 127434) (close-paren 127432 . 127433) (INT 127429 . 127432) (punctuation 127427 . 127428) (symbol 127416 . 127427) (open-paren 127415 . 127416) (symbol 127394 . 127414) (symbol 127382 . 127393) (EXTERN 127375 . 127381) (punctuation 127373 . 127374) (close-paren 127372 . 127373) (symbol 127361 . 127372) (open-paren 127360 . 127361) (symbol 127346 . 127359) (symbol 127334 . 127345) (EXTERN 127327 . 127333) (punctuation 127325 . 127326) (close-paren 127324 . 127325) (UNSIGNED 127316 . 127324) (punctuation 127314 . 127315) (UNSIGNED 127306 . 127314) (punctuation 127299 . 127300) (punctuation 127298 . 127299) (symbol 127290 . 127297) (STRUCT 127283 . 127289) (punctuation 127281 . 127282) (symbol 127270 . 127281) (punctuation 127263 . 127264) (symbol 127252 . 127263) (punctuation 127250 . 127251) (symbol 127239 . 127250) (punctuation 127232 . 127233) (semantic-list 127206 . 127232) (semantic-list 127192 . 127205) (VOID 127187 . 127191) (open-paren 127186 . 127187) (symbol 127159 . 127185) (VOID 127154 . 127158) (EXTERN 127147 . 127153) (punctuation 127145 . 127146) (close-paren 127144 . 127145) (symbol 127133 . 127144) (punctuation 127131 . 127132) (symbol 127120 . 127131) (punctuation 127118 . 127119) (symbol 127107 . 127118) (punctuation 127077 . 127078) (semantic-list 127010 . 127077) (semantic-list 127006 . 127009) (VOID 127001 . 127005) (open-paren 127000 . 127001) (symbol 126985 . 126999) (VOID 126980 . 126984) (EXTERN 126973 . 126979) (punctuation 126971 . 126972) (close-paren 126970 . 126971) (symbol 126959 . 126970) (punctuation 126957 . 126958) (INT 126954 . 126957) (punctuation 126952 . 126953) (INT 126949 . 126952) (punctuation 126947 . 126948) (symbol 126936 . 126947) (open-paren 126935 . 126936) (symbol 126914 . 126934) (VOID 126909 . 126913) (EXTERN 126902 . 126908) (punctuation 126900 . 126901) (close-paren 126899 . 126900) (punctuation 126898 . 126899) (INT 126894 . 126897) (punctuation 126892 . 126893) (punctuation 126891 . 126892) (INT 126887 . 126890) (punctuation 126840 . 126841) (INT 126837 . 126840) (punctuation 126835 . 126836) (symbol 126824 . 126835) (open-paren 126823 . 126824) (symbol 126798 . 126822) (symbol 126786 . 126797) (EXTERN 126779 . 126785) (punctuation 126777 . 126778) (close-paren 126776 . 126777) (symbol 126765 . 126776) (open-paren 126764 . 126765) (symbol 126748 . 126763) (symbol 126736 . 126747) (EXTERN 126729 . 126735) (punctuation 126363 . 126364) (close-paren 126362 . 126363) (VOID 126358 . 126362) (open-paren 126357 . 126358) (symbol 126336 . 126356) (VOID 126331 . 126335) (EXTERN 126324 . 126330) (punctuation 126315 . 126316) (close-paren 126314 . 126315) (semantic-list 126311 . 126314) (open-paren 126310 . 126311) (symbol 126288 . 126309) (close-paren 126286 . 126287) (symbol 126280 . 126286) (punctuation 126278 . 126279) (symbol 126272 . 126278) (open-paren 126271 . 126272) (symbol 126257 . 126270) (punctuation 126256 . 126257) (VOID 126251 . 126255) (EXTERN 126244 . 126250) (punctuation 126058 . 126059) (close-paren 126057 . 126058) (symbol 126046 . 126057) (open-paren 126045 . 126046) (symbol 126025 . 126044) (INT 126021 . 126024) (EXTERN 126014 . 126020) (close-paren 125985 . 125986) (VOID 125981 . 125985) (open-paren 125980 . 125981) (symbol 125964 . 125979) (punctuation 125963 . 125964) (symbol 125956 . 125962) (STRUCT 125949 . 125955) (EXTERN 125942 . 125948) (punctuation 125940 . 125941) (close-paren 125939 . 125940) (VOID 125935 . 125939) (open-paren 125934 . 125935) (symbol 125920 . 125933) (VOID 125915 . 125919) (EXTERN 125908 . 125914) (punctuation 125906 . 125907) (close-paren 125905 . 125906) (VOID 125901 . 125905) (open-paren 125900 . 125901) (symbol 125889 . 125899) (VOID 125884 . 125888) (EXTERN 125877 . 125883) (punctuation 125875 . 125876) (close-paren 125874 . 125875) (VOID 125870 . 125874) (open-paren 125869 . 125870) (symbol 125853 . 125868) (VOID 125848 . 125852) (EXTERN 125841 . 125847) (punctuation 125839 . 125840) (close-paren 125838 . 125839) (punctuation 125837 . 125838) (symbol 125827 . 125836) (STRUCT 125820 . 125826) (open-paren 125819 . 125820) (symbol 125809 . 125818) (VOID 125804 . 125808) (EXTERN 125797 . 125803) (punctuation 125795 . 125796) (close-paren 125794 . 125795) (symbol 125783 . 125794) (punctuation 125781 . 125782) (symbol 125770 . 125781) (punctuation 125768 . 125769) (symbol 125757 . 125768) (open-paren 125756 . 125757) (symbol 125742 . 125755) (symbol 125730 . 125741) (EXTERN 125723 . 125729) (punctuation 125721 . 125722) (close-paren 125720 . 125721) (VOID 125716 . 125720) (open-paren 125715 . 125716) (symbol 125688 . 125714) (symbol 125678 . 125687) (EXTERN 125671 . 125677) (punctuation 125669 . 125670) (close-paren 125668 . 125669) (VOID 125664 . 125668) (open-paren 125663 . 125664) (symbol 125640 . 125662) (VOID 125635 . 125639) (EXTERN 125628 . 125634) (punctuation 125626 . 125627) (close-paren 125625 . 125626) (DOUBLE 125619 . 125625) (open-paren 125618 . 125619) (symbol 125607 . 125617) (symbol 125595 . 125606) (EXTERN 125588 . 125594) (close-paren 124663 . 124664) (symbol 124654 . 124663) (ENUM 124649 . 124653) (punctuation 124639 . 124640) (INT 124636 . 124639) (punctuation 124634 . 124635) (INT 124631 . 124634) (punctuation 124629 . 124630) (INT 124626 . 124629) (open-paren 124625 . 124626) (symbol 124603 . 124624) (punctuation 124602 . 124603) (symbol 124590 . 124601) (STRUCT 124583 . 124589) (EXTERN 124576 . 124582) (close-paren 124573 . 124574) (semantic-list 124547 . 124553) (RETURN 124505 . 124511) (open-paren 124501 . 124502) (close-paren 124499 . 124500) (symbol 124495 . 124499) (symbol 124485 . 124494) (open-paren 124484 . 124485) (symbol 124468 . 124483) (symbol 124456 . 124467) (symbol 124449 . 124455) (close-paren 124327 . 124328) (RETURN 124317 . 124323) (punctuation 124293 . 124294) (punctuation 124292 . 124293) (semantic-list 124289 . 124292) (symbol 124273 . 124288) (punctuation 124255 . 124256) (punctuation 124254 . 124255) (semantic-list 124251 . 124254) (symbol 124235 . 124250) (punctuation 124231 . 124232) (semantic-list #("((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 0 1 (macros (("code" semantic-list "(v)" 124206 . 124209) ("v" symbol "XVECTOR" 124198 . 124205)))) 124184 . 124231) (open-paren 124074 . 124075) (close-paren 124072 . 124073) (symbol 124064 . 124072) (INT 124060 . 124063) (punctuation 124058 . 124059) (symbol 124053 . 124058) (INT 124049 . 124052) (open-paren 124048 . 124049) (symbol 124021 . 124047) (symbol 124009 . 124020) (symbol 124002 . 124008) (close-paren 123946 . 123947) (semantic-list 123920 . 123926) (RETURN 123882 . 123888) (open-paren 123878 . 123879) (close-paren 123876 . 123877) (symbol 123872 . 123876) (symbol 123862 . 123871) (open-paren 123861 . 123862) (symbol 123842 . 123860) (symbol 123830 . 123841) (symbol 123823 . 123829) (close-paren 123791 . 123792) (symbol 123782 . 123791) (open-paren 123781 . 123782) (symbol 123765 . 123780) (punctuation 123764 . 123765) (symbol 123752 . 123763) (STRUCT 123745 . 123751) (EXTERN 123738 . 123744) (close-paren 123354 . 123355) (symbol 123345 . 123354) (open-paren 123344 . 123345) (symbol 123324 . 123343) (punctuation 123323 . 123324) (symbol 123311 . 123322) (STRUCT 123304 . 123310) (EXTERN 123297 . 123303) (punctuation 123295 . 123296) (close-paren 123294 . 123295) (symbol 123283 . 123294) (punctuation 123281 . 123282) (symbol 123272 . 123281) (open-paren 123271 . 123272) (symbol 123259 . 123270) (symbol 123247 . 123258) (EXTERN 123240 . 123246) (punctuation 123238 . 123239) (close-paren 123237 . 123238) (symbol 123226 . 123237) (punctuation 123224 . 123225) (symbol 123213 . 123224) (open-paren 123212 . 123213) (symbol 123202 . 123211) (symbol 123190 . 123201) (EXTERN 123183 . 123189) (close-paren 123180 . 123181) (semantic-list 123172 . 123177) (RETURN 123140 . 123146) (open-paren 123136 . 123137) (close-paren 123134 . 123135) (symbol 123131 . 123134) (punctuation 123130 . 123131) (CHAR 123125 . 123129) (CONST 123119 . 123124) (open-paren 123118 . 123119) (symbol 123105 . 123117) (symbol 123093 . 123104) (symbol 123086 . 123092) (close-paren 122989 . 122990) (semantic-list 122981 . 122986) (RETURN 122942 . 122948) (open-paren 122938 . 122939) (close-paren 122936 . 122937) (symbol 122933 . 122936) (punctuation 122932 . 122933) (CHAR 122927 . 122931) (CONST 122921 . 122926) (open-paren 122920 . 122921) (symbol 122900 . 122919) (symbol 122888 . 122899) (symbol 122881 . 122887) (punctuation 122807 . 122808) (close-paren 122806 . 122807) (symbol 122797 . 122806) (punctuation 122795 . 122796) (punctuation 122794 . 122795) (CHAR 122789 . 122793) (CONST 122783 . 122788) (open-paren 122782 . 122783) (symbol 122763 . 122781) (symbol 122751 . 122762) (EXTERN 122744 . 122750) (punctuation 122742 . 122743) (close-paren 122741 . 122742) (BOOL 122737 . 122741) (punctuation 122735 . 122736) (symbol 122726 . 122735) (punctuation 122724 . 122725) (symbol 122715 . 122724) (punctuation 122713 . 122714) (punctuation 122712 . 122713) (CHAR 122707 . 122711) (CONST 122701 . 122706) (open-paren 122700 . 122701) (symbol 122683 . 122699) (symbol 122671 . 122682) (EXTERN 122664 . 122670) (punctuation 122662 . 122663) (close-paren 122661 . 122662) (BOOL 122657 . 122661) (punctuation 122655 . 122656) (symbol 122646 . 122655) (punctuation 122644 . 122645) (symbol 122635 . 122644) (punctuation 122626 . 122627) (punctuation 122625 . 122626) (CHAR 122620 . 122624) (CONST 122614 . 122619) (open-paren 122613 . 122614) (symbol 122591 . 122612) (symbol 122579 . 122590) (EXTERN 122572 . 122578) (punctuation 122570 . 122571) (close-paren 122569 . 122570) (symbol 122560 . 122569) (punctuation 122558 . 122559) (symbol 122549 . 122558) (punctuation 122547 . 122548) (punctuation 122546 . 122547) (CHAR 122541 . 122545) (CONST 122535 . 122540) (open-paren 122534 . 122535) (symbol 122511 . 122533) (symbol 122499 . 122510) (EXTERN 122492 . 122498) (punctuation 122490 . 122491) (close-paren 122489 . 122490) (symbol 122480 . 122489) (punctuation 122478 . 122479) (symbol 122469 . 122478) (open-paren 122468 . 122469) (symbol 122439 . 122467) (symbol 122427 . 122438) (EXTERN 122420 . 122426) (punctuation 122418 . 122419) (close-paren 122417 . 122418) (symbol 122408 . 122417) (open-paren 122407 . 122408) (symbol 122388 . 122406) (symbol 122376 . 122387) (EXTERN 122369 . 122375) (punctuation 122367 . 122368) (close-paren 122366 . 122367) (punctuation 122365 . 122366) (symbol 122353 . 122364) (punctuation 122351 . 122352) (symbol 122342 . 122351) (open-paren 122341 . 122342) (symbol 122324 . 122340) (symbol 122312 . 122323) (EXTERN 122305 . 122311) (punctuation 122303 . 122304) (close-paren 122302 . 122303) (symbol 122293 . 122302) (punctuation 122291 . 122292) (symbol 122282 . 122291) (punctuation 122280 . 122281) (punctuation 122279 . 122280) (CHAR 122274 . 122278) (CONST 122268 . 122273) (open-paren 122267 . 122268) (symbol 122245 . 122266) (symbol 122233 . 122244) (EXTERN 122226 . 122232) (close-paren 122223 . 122224) (semantic-list 122215 . 122220) (RETURN 122175 . 122181) (open-paren 122171 . 122172) (close-paren 122169 . 122170) (symbol 122166 . 122169) (punctuation 122165 . 122166) (CHAR 122160 . 122164) (CONST 122154 . 122159) (open-paren 122153 . 122154) (symbol 122132 . 122152) (symbol 122120 . 122131) (symbol 122113 . 122119) (close-paren 122039 . 122040) (punctuation 122029 . 122030) (punctuation 122028 . 122029) (punctuation 122026 . 122027) (RETURN 122000 . 122006) (open-paren 121996 . 121997) (close-paren 121994 . 121995) (symbol 121993 . 121994) (punctuation 121992 . 121993) (symbol 121980 . 121991) (STRUCT 121973 . 121979) (CONST 121967 . 121972) (open-paren 121966 . 121967) (symbol 121952 . 121965) (symbol 121942 . 121951) (symbol 121935 . 121941) (punctuation 121932 . 121933) (close-paren 121931 . 121932) (symbol 121928 . 121931) (punctuation 121927 . 121928) (symbol 121909 . 121926) (UNION 121903 . 121908) (CONST 121897 . 121902) (open-paren 121896 . 121897) (symbol 121878 . 121895) (symbol 121868 . 121877) (EXTERN 121861 . 121867) (punctuation 121859 . 121860) (close-paren 121858 . 121859) (symbol 121849 . 121858) (punctuation 121847 . 121848) (punctuation 121846 . 121847) (CHAR 121841 . 121845) (CONST 121835 . 121840) (open-paren 121834 . 121835) (symbol 121814 . 121833) (symbol 121802 . 121813) (EXTERN 121795 . 121801) (punctuation 121793 . 121794) (close-paren 121792 . 121793) (number 121791 . 121792) (punctuation 121789 . 121790) (number 121788 . 121789) (open-paren 121787 . 121788) (symbol 121763 . 121786) (close-paren 121759 . 121760) (punctuation 121758 . 121759) (punctuation 121757 . 121758) (punctuation 121756 . 121757) (punctuation 121754 . 121755) (punctuation 121753 . 121754) (CHAR 121748 . 121752) (CONST 121742 . 121747) (punctuation 121740 . 121741) (punctuation 121739 . 121740) (CHAR 121734 . 121738) (open-paren 121733 . 121734) (symbol 121711 . 121732) (symbol 121699 . 121710) (EXTERN 121692 . 121698) (punctuation 121690 . 121691) (close-paren 121689 . 121690) (symbol 121680 . 121689) (punctuation 121678 . 121679) (punctuation 121677 . 121678) (CHAR 121672 . 121676) (CONST 121666 . 121671) (open-paren 121665 . 121666) (symbol 121653 . 121664) (symbol 121641 . 121652) (EXTERN 121634 . 121640) (punctuation 121632 . 121633) (close-paren 121631 . 121632) (VOID 121627 . 121631) (open-paren 121626 . 121627) (symbol 121610 . 121625) (VOID "void" 121604 . 121609) (symbol "ATTRIBUTE_COLD" 121604 . 121609) (EXTERN 121597 . 121603) (punctuation 121595 . 121596) (close-paren 121594 . 121595) (symbol 121583 . 121594) (punctuation 121581 . 121582) (symbol 121570 . 121581) (open-paren 121569 . 121570) (symbol 121552 . 121568) (symbol 121540 . 121551) (EXTERN 121533 . 121539) (punctuation 121531 . 121532) (close-paren 121530 . 121531) (symbol 121521 . 121530) (open-paren 121520 . 121521) (symbol 121496 . 121519) (symbol 121484 . 121495) (EXTERN 121477 . 121483) (close-paren 121474 . 121475) (semantic-list 121468 . 121471) (semantic-list 121454 . 121457) (semantic-list 121440 . 121443) (semantic-list 121426 . 121429) (RETURN 121403 . 121409) (open-paren 121399 . 121400) (close-paren 121397 . 121398) (symbol 121396 . 121397) (symbol 121387 . 121395) (punctuation 121385 . 121386) (symbol 121384 . 121385) (symbol 121375 . 121383) (punctuation 121373 . 121374) (symbol 121372 . 121373) (symbol 121363 . 121371) (punctuation 121361 . 121362) (symbol 121360 . 121361) (symbol 121351 . 121359) (open-paren 121350 . 121351) (symbol 121343 . 121349) (symbol 121331 . 121342) (symbol 121324 . 121330) (close-paren 121321 . 121322) (semantic-list 121315 . 121318) (semantic-list 121301 . 121304) (semantic-list 121287 . 121290) (RETURN 121264 . 121270) (open-paren 121260 . 121261) (close-paren 121258 . 121259) (symbol 121257 . 121258) (symbol 121248 . 121256) (punctuation 121246 . 121247) (symbol 121245 . 121246) (symbol 121236 . 121244) (punctuation 121234 . 121235) (symbol 121233 . 121234) (symbol 121224 . 121232) (open-paren 121223 . 121224) (symbol 121216 . 121222) (symbol 121204 . 121215) (symbol 121197 . 121203) (close-paren 121194 . 121195) (semantic-list 121188 . 121191) (semantic-list 121174 . 121177) (RETURN 121151 . 121157) (open-paren 121147 . 121148) (close-paren 121145 . 121146) (symbol 121144 . 121145) (symbol 121135 . 121143) (punctuation 121133 . 121134) (symbol 121132 . 121133) (symbol 121123 . 121131) (open-paren 121122 . 121123) (symbol 121115 . 121121) (symbol 121103 . 121114) (symbol 121096 . 121102) (close-paren 121093 . 121094) (semantic-list 121087 . 121090) (RETURN 121064 . 121070) (open-paren 121060 . 121061) (close-paren 121058 . 121059) (symbol 121057 . 121058) (symbol 121048 . 121056) (open-paren 121047 . 121048) (symbol 121040 . 121046) (symbol 121028 . 121039) (symbol 121021 . 121027) (punctuation 120963 . 120964) (close-paren 120962 . 120963) (symbol 120955 . 120962) (symbol 120939 . 120954) (STRUCT 120932 . 120938) (open-paren 120931 . 120932) (symbol 120909 . 120930) (VOID 120904 . 120908) (EXTERN 120897 . 120903) (punctuation 120895 . 120896) (close-paren 120894 . 120895) (open-paren 120812 . 120813) (symbol 120796 . 120811) (STRUCT 120789 . 120795) (punctuation 120786 . 120787) (close-paren 120785 . 120786) (symbol 120768 . 120784) (punctuation 120764 . 120765) (symbol 120739 . 120764) (punctuation 120735 . 120736) (symbol 120707 . 120735) (punctuation 120703 . 120704) (symbol 120686 . 120703) (open-paren 120682 . 120683) (symbol 120669 . 120681) (ENUM 120664 . 120668) (punctuation 120475 . 120476) (close-paren 120474 . 120475) (punctuation 120473 . 120474) (punctuation 120472 . 120473) (punctuation 120471 . 120472) (punctuation 120469 . 120470) (symbol 120458 . 120469) (punctuation 120456 . 120457) (symbol 120447 . 120456) (open-paren 120446 . 120447) (symbol 120435 . 120445) (symbol 120423 . 120434) (EXTERN 120416 . 120422) (punctuation 120414 . 120415) (close-paren 120413 . 120414) (punctuation 120412 . 120413) (punctuation 120411 . 120412) (punctuation 120410 . 120411) (punctuation 120408 . 120409) (symbol 120397 . 120408) (punctuation 120395 . 120396) (symbol 120386 . 120395) (open-paren 120385 . 120386) (symbol 120379 . 120384) (symbol 120367 . 120378) (EXTERN 120360 . 120366) (punctuation 120358 . 120359) (close-paren 120357 . 120358) (symbol 120346 . 120357) (punctuation 120339 . 120340) (symbol 120328 . 120339) (punctuation 120326 . 120327) (symbol 120315 . 120326) (punctuation 120313 . 120314) (symbol 120302 . 120313) (punctuation 120300 . 120301) (symbol 120289 . 120300) (open-paren 120288 . 120289) (symbol 120282 . 120287) (symbol 120270 . 120281) (EXTERN 120263 . 120269) (punctuation 120261 . 120262) (close-paren 120260 . 120261) (symbol 120249 . 120260) (punctuation 120247 . 120248) (symbol 120236 . 120247) (punctuation 120234 . 120235) (symbol 120223 . 120234) (punctuation 120221 . 120222) (symbol 120210 . 120221) (open-paren 120209 . 120210) (symbol 120203 . 120208) (symbol 120191 . 120202) (EXTERN 120184 . 120190) (punctuation 120182 . 120183) (close-paren 120181 . 120182) (symbol 120170 . 120181) (punctuation 120168 . 120169) (symbol 120157 . 120168) (punctuation 120155 . 120156) (symbol 120144 . 120155) (open-paren 120143 . 120144) (symbol 120137 . 120142) (symbol 120125 . 120136) (EXTERN 120118 . 120124) (punctuation 120116 . 120117) (close-paren 120115 . 120116) (symbol 120104 . 120115) (punctuation 120102 . 120103) (symbol 120091 . 120102) (open-paren 120090 . 120091) (symbol 120084 . 120089) (symbol 120072 . 120083) (EXTERN 120065 . 120071) (punctuation 120063 . 120064) (close-paren 120062 . 120063) (symbol 120051 . 120062) (open-paren 120050 . 120051) (symbol 120044 . 120049) (symbol 120032 . 120043) (EXTERN 120025 . 120031) (punctuation 119852 . 119853) (close-paren 119851 . 119852) (symbol 119845 . 119851) (symbol 119835 . 119844) (open-paren 119834 . 119835) (symbol 119804 . 119833) (BOOL 119799 . 119803) (EXTERN 119792 . 119798) (punctuation 119790 . 119791) (close-paren 119789 . 119790) (VOID 119785 . 119789) (open-paren 119784 . 119785) (symbol 119762 . 119783) (VOID 119757 . 119761) (EXTERN 119750 . 119756) (punctuation 119748 . 119749) (close-paren 119747 . 119748) (VOID 119743 . 119747) (open-paren 119742 . 119743) (symbol 119726 . 119741) (VOID 119721 . 119725) (EXTERN 119714 . 119720) (close-paren 119711 . 119712) (punctuation 119671 . 119672) (semantic-list 119669 . 119671) (semantic-list "((void) 0)" 119647 . 119668) (spp-arg-list nil 119647 . 119668) (open-paren 119643 . 119644) (close-paren 119641 . 119642) (symbol 119638 . 119641) (punctuation 119637 . 119638) (VOID 119632 . 119636) (punctuation 119630 . 119631) (semantic-list 119619 . 119630) (semantic-list 119611 . 119618) (VOID 119606 . 119610) (open-paren 119605 . 119606) (symbol 119583 . 119604) (VOID 119578 . 119582) (symbol 119571 . 119577) (punctuation 118751 . 118752) (close-paren 118750 . 118751) (symbol 118747 . 118750) (punctuation 118746 . 118747) (VOID 118741 . 118745) (punctuation 118739 . 118740) (semantic-list 118728 . 118739) (semantic-list 118720 . 118727) (VOID 118715 . 118719) (open-paren 118714 . 118715) (symbol 118691 . 118713) (VOID 118686 . 118690) (EXTERN 118679 . 118685) (punctuation 118677 . 118678) (close-paren 118676 . 118677) (punctuation 118675 . 118676) (CONST 118669 . 118674) (CHAR 118664 . 118668) (punctuation 118662 . 118663) (punctuation 118661 . 118662) (CONST 118655 . 118660) (CHAR 118650 . 118654) (open-paren 118649 . 118650) (symbol 118638 . 118648) (VOID 118633 . 118637) (EXTERN 118626 . 118632) (punctuation 118624 . 118625) (close-paren 118623 . 118624) (VOID 118619 . 118623) (open-paren 118618 . 118619) (symbol 118600 . 118617) (VOID 118595 . 118599) (EXTERN 118588 . 118594) (punctuation 118586 . 118587) (close-paren 118585 . 118586) (VOID 118581 . 118585) (open-paren 118580 . 118581) (symbol 118563 . 118579) (VOID 118558 . 118562) (EXTERN 118551 . 118557) (punctuation 118426 . 118427) (close-paren 118425 . 118426) (symbol 118416 . 118425) (punctuation 118414 . 118415) (punctuation 118413 . 118414) (symbol 118401 . 118412) (open-paren 118400 . 118401) (symbol 118387 . 118399) (VOID 118382 . 118386) (EXTERN 118375 . 118381) (punctuation 118373 . 118374) (close-paren 118372 . 118373) (symbol 118361 . 118372) (open-paren 118360 . 118361) (symbol 118348 . 118359) (VOID 118343 . 118347) (EXTERN 118336 . 118342) (punctuation 118334 . 118335) (close-paren 118333 . 118334) (symbol 118322 . 118333) (open-paren 118321 . 118322) (symbol 118307 . 118320) (BOOL 118302 . 118306) (EXTERN 118295 . 118301) (punctuation 118293 . 118294) (close-paren 118292 . 118293) (symbol 118283 . 118292) (open-paren 118282 . 118283) (symbol 118263 . 118281) (VOID "void" 118257 . 118262) (symbol "ATTRIBUTE_COLD" 118257 . 118262) (EXTERN 118250 . 118256) (punctuation 118248 . 118249) (close-paren 118247 . 118248) (symbol 118241 . 118247) (open-paren 118240 . 118241) (symbol 118228 . 118239) (VOID "void" 118222 . 118227) (symbol "ATTRIBUTE_COLD" 118222 . 118227) (EXTERN 118215 . 118221) (punctuation 118213 . 118214) (close-paren 118212 . 118213) (punctuation 118211 . 118212) (CHAR 118206 . 118210) (CONST 118200 . 118205) (open-paren 118199 . 118200) (symbol 118184 . 118198) (VOID 118179 . 118183) (EXTERN 118172 . 118178) (punctuation 118170 . 118171) (close-paren 118169 . 118170) (INT 118166 . 118169) (punctuation 118164 . 118165) (INT 118161 . 118164) (punctuation 118159 . 118160) (symbol 118150 . 118159) (punctuation 118148 . 118149) (symbol 118137 . 118148) (open-paren 118136 . 118137) (symbol 118117 . 118135) (punctuation 118116 . 118117) (CHAR 118111 . 118115) (UNSIGNED 118102 . 118110) (punctuation 118100 . 118101) (close-paren 118099 . 118100) (VOID 118095 . 118099) (open-paren 118094 . 118095) (symbol 118078 . 118093) (VOID 118073 . 118077) (EXTERN 118066 . 118072) (punctuation 118064 . 118065) (close-paren 118063 . 118064) (VOID 118059 . 118063) (open-paren 118058 . 118059) (symbol 118044 . 118057) (punctuation 118043 . 118044) (VOID 118038 . 118042) (EXTERN 118031 . 118037) (punctuation 118001 . 118002) (close-paren 118000 . 118001) (punctuation 117999 . 118000) (symbol 117989 . 117998) (punctuation 117987 . 117988) (punctuation 117986 . 117987) (symbol 117976 . 117985) (punctuation 117966 . 117967) (symbol 117957 . 117966) (punctuation 117955 . 117956) (punctuation 117954 . 117955) (CHAR 117949 . 117953) (UNSIGNED 117940 . 117948) (CONST 117934 . 117939) (open-paren 117933 . 117934) (symbol 117910 . 117932) (VOID 117905 . 117909) (EXTERN 117898 . 117904) (punctuation 117864 . 117865) (close-paren 117863 . 117864) (semantic-list 117849 . 117863) (semantic-list 117838 . 117848) (VOID 117833 . 117837) (punctuation 117831 . 117832) (punctuation 117830 . 117831) (VOID 117825 . 117829) (open-paren 117824 . 117825) (symbol 117808 . 117823) (VOID 117803 . 117807) (EXTERN 117796 . 117802) (punctuation 117763 . 117764) (close-paren 117762 . 117763) (VOID 117758 . 117762) (open-paren 117757 . 117758) (symbol 117739 . 117756) (VOID 117734 . 117738) (EXTERN 117727 . 117733) (punctuation 117693 . 117694) (close-paren 117692 . 117693) (punctuation 117691 . 117692) (INT 117687 . 117690) (punctuation 117685 . 117686) (punctuation 117684 . 117685) (INT 117680 . 117683) (punctuation 117678 . 117679) (punctuation 117677 . 117678) (INT 117673 . 117676) (punctuation 117671 . 117672) (punctuation 117670 . 117671) (INT 117666 . 117669) (punctuation 117664 . 117665) (punctuation 117663 . 117664) (INT 117659 . 117662) (punctuation 117651 . 117652) (punctuation 117650 . 117651) (INT 117646 . 117649) (punctuation 117644 . 117645) (symbol 117635 . 117644) (punctuation 117633 . 117634) (punctuation 117632 . 117633) (symbol 117625 . 117631) (STRUCT 117618 . 117624) (open-paren 117617 . 117618) (symbol 117603 . 117616) (BOOL 117598 . 117602) (EXTERN 117591 . 117597) (punctuation 117589 . 117590) (close-paren 117588 . 117589) (symbol 117577 . 117588) (open-paren 117576 . 117577) (symbol 117566 . 117575) (symbol 117554 . 117565) (EXTERN 117547 . 117553) (punctuation 117545 . 117546) (close-paren 117544 . 117545) (VOID 117540 . 117544) (open-paren 117539 . 117540) (symbol 117528 . 117538) (VOID 117523 . 117527) (EXTERN 117516 . 117522) (punctuation 117514 . 117515) (close-paren 117513 . 117514) (VOID 117509 . 117513) (open-paren 117508 . 117509) (symbol 117494 . 117507) (VOID 117489 . 117493) (EXTERN 117482 . 117488) (punctuation 117480 . 117481) (close-paren 117479 . 117480) (symbol 117468 . 117479) (punctuation 117466 . 117467) (punctuation 117465 . 117466) (symbol 117459 . 117464) (STRUCT 117452 . 117458) (open-paren 117451 . 117452) (symbol 117428 . 117450) (VOID 117423 . 117427) (punctuation 117420 . 117421) (close-paren 117419 . 117420) (symbol 117411 . 117419) (symbol 117401 . 117410) (punctuation 117399 . 117400) (symbol 117389 . 117399) (symbol 117379 . 117388) (open-paren 117378 . 117379) (symbol 117366 . 117377) (symbol 117356 . 117365) (EXTERN 117349 . 117355) (punctuation 117347 . 117348) (close-paren 117346 . 117347) (VOID 117342 . 117346) (open-paren 117341 . 117342) (symbol 117331 . 117340) (VOID 117326 . 117330) (EXTERN 117319 . 117325) (punctuation 117317 . 117318) (close-paren 117316 . 117317) (symbol 117307 . 117316) (open-paren 117306 . 117307) (symbol 117287 . 117305) (VOID 117282 . 117286) (EXTERN 117275 . 117281) (punctuation 117273 . 117274) (close-paren 117272 . 117273) (VOID 117268 . 117272) (open-paren 117267 . 117268) (symbol 117250 . 117266) (VOID 117245 . 117249) (EXTERN 117238 . 117244) (punctuation 117236 . 117237) (close-paren 117235 . 117236) (VOID 117231 . 117235) (open-paren 117230 . 117231) (symbol 117204 . 117229) (VOID 117199 . 117203) (EXTERN 117192 . 117198) (punctuation 117190 . 117191) (close-paren 117189 . 117190) (BOOL 117185 . 117189) (punctuation 117183 . 117184) (symbol 117172 . 117183) (punctuation 117170 . 117171) (punctuation 117169 . 117170) (CHAR 117164 . 117168) (CONST 117158 . 117163) (open-paren 117157 . 117158) (symbol 117137 . 117156) (VOID 117132 . 117136) (EXTERN 117125 . 117131) (punctuation 117123 . 117124) (close-paren 117122 . 117123) (BOOL 117118 . 117122) (punctuation 117116 . 117117) (BOOL 117112 . 117116) (punctuation 117110 . 117111) (symbol 117101 . 117110) (punctuation 117099 . 117100) (punctuation 117098 . 117099) (CHAR 117093 . 117097) (CONST 117087 . 117092) (open-paren 117086 . 117087) (symbol 117072 . 117085) (VOID 117067 . 117071) (EXTERN 117060 . 117066) (punctuation 117058 . 117059) (close-paren 117057 . 117058) (symbol 117046 . 117057) (open-paren 117045 . 117046) (symbol 117030 . 117044) (VOID 117025 . 117029) (EXTERN 117018 . 117024) (punctuation 117016 . 117017) (close-paren 117015 . 117016) (symbol 117004 . 117015) (open-paren 117003 . 117004) (symbol 116994 . 117002) (VOID 116989 . 116993) (EXTERN 116982 . 116988) (punctuation 116980 . 116981) (close-paren 116979 . 116980) (punctuation 116978 . 116979) (CHAR 116973 . 116977) (CONST 116967 . 116972) (open-paren 116966 . 116967) (symbol 116951 . 116965) (VOID 116946 . 116950) (EXTERN 116939 . 116945) (punctuation 116937 . 116938) (close-paren 116936 . 116937) (punctuation 116935 . 116936) (CHAR 116930 . 116934) (CONST 116924 . 116929) (open-paren 116923 . 116924) (symbol 116914 . 116922) (VOID 116909 . 116913) (EXTERN 116902 . 116908) (punctuation 116900 . 116901) (close-paren 116899 . 116900) (number 116898 . 116899) (punctuation 116896 . 116897) (number 116895 . 116896) (open-paren 116894 . 116895) (symbol 116870 . 116893) (close-paren 116868 . 116869) (punctuation 116867 . 116868) (punctuation 116866 . 116867) (punctuation 116865 . 116866) (punctuation 116863 . 116864) (punctuation 116862 . 116863) (CHAR 116857 . 116861) (CONST 116851 . 116856) (open-paren 116850 . 116851) (symbol 116842 . 116849) (VOID 116837 . 116841) (EXTERN 116830 . 116836) (punctuation 116828 . 116829) (close-paren 116827 . 116828) (BOOL 116823 . 116827) (punctuation 116821 . 116822) (BOOL 116817 . 116821) (open-paren 116816 . 116817) (symbol 116802 . 116815) (VOID 116797 . 116801) (EXTERN 116790 . 116796) (punctuation 116788 . 116789) (close-paren 116787 . 116788) (VOID 116783 . 116787) (open-paren 116782 . 116783) (symbol 116766 . 116781) (symbol 116754 . 116765) (EXTERN 116747 . 116753) (punctuation 116745 . 116746) (close-paren 116744 . 116745) (VOID 116740 . 116744) (open-paren 116739 . 116740) (symbol 116723 . 116738) (VOID 116718 . 116722) (EXTERN 116711 . 116717) (punctuation 116709 . 116710) (close-paren 116708 . 116709) (symbol 116697 . 116708) (open-paren 116696 . 116697) (symbol 116673 . 116695) (symbol 116661 . 116672) (EXTERN 116654 . 116660) (punctuation 116652 . 116653) (close-paren 116651 . 116652) (VOID 116647 . 116651) (open-paren 116646 . 116647) (symbol 116627 . 116645) (VOID 116622 . 116626) (EXTERN 116615 . 116621) (punctuation 116613 . 116614) (close-paren 116612 . 116613) (VOID 116608 . 116612) (open-paren 116607 . 116608) (symbol 116594 . 116606) (BOOL 116589 . 116593) (EXTERN 116582 . 116588) (punctuation 116580 . 116581) (close-paren 116579 . 116580) (BOOL 116575 . 116579) (open-paren 116574 . 116575) (symbol 116545 . 116573) (VOID 116540 . 116544) (EXTERN 116533 . 116539) (punctuation 116531 . 116532) (close-paren 116530 . 116531) (VOID 116526 . 116530) (open-paren 116525 . 116526) (symbol 116505 . 116524) (VOID 116500 . 116504) (EXTERN 116493 . 116499) (punctuation 116491 . 116492) (close-paren 116490 . 116491) (VOID 116486 . 116490) (open-paren 116485 . 116486) (symbol 116465 . 116484) (VOID 116460 . 116464) (EXTERN 116453 . 116459) (punctuation 116451 . 116452) (close-paren 116450 . 116451) (symbol 116443 . 116450) (punctuation 116441 . 116442) (punctuation 116440 . 116441) (CONST 116434 . 116439) (CHAR 116429 . 116433) (open-paren 116428 . 116429) (symbol 116416 . 116427) (VOID 116411 . 116415) (EXTERN 116404 . 116410) (punctuation 116402 . 116403) (close-paren 116401 . 116402) (punctuation 116400 . 116401) (punctuation 116399 . 116400) (punctuation 116398 . 116399) (punctuation 116396 . 116397) (punctuation 116395 . 116396) (CONST 116389 . 116394) (CHAR 116384 . 116388) (open-paren 116383 . 116384) (symbol 116372 . 116382) (VOID 116367 . 116371) (EXTERN 116360 . 116366) (punctuation 116358 . 116359) (close-paren 116357 . 116358) (number 116356 . 116357) (open-paren 116355 . 116356) (symbol 116339 . 116355) (symbol 116327 . 116338) (EXTERN 116320 . 116326) (punctuation 116249 . 116250) (close-paren 116248 . 116249) (INT 116245 . 116248) (punctuation 116243 . 116244) (BOOL 116239 . 116243) (punctuation 116237 . 116238) (symbol 116226 . 116237) (open-paren 116225 . 116226) (symbol 116217 . 116224) (symbol 116205 . 116216) (EXTERN 116198 . 116204) (punctuation 116065 . 116066) (close-paren 116064 . 116065) (VOID 116060 . 116064) (open-paren 116059 . 116060) (symbol 116044 . 116058) (VOID 116039 . 116043) (EXTERN 116032 . 116038) (punctuation 116030 . 116031) (close-paren 116029 . 116030) (BOOL 116025 . 116029) (punctuation 116023 . 116024) (symbol 116014 . 116023) (punctuation 116012 . 116013) (symbol 116003 . 116012) (punctuation 116001 . 116002) (punctuation 116000 . 116001) (CHAR 115995 . 115999) (CONST 115989 . 115994) (punctuation 115979 . 115980) (symbol 115970 . 115979) (punctuation 115968 . 115969) (symbol 115959 . 115968) (punctuation 115957 . 115958) (symbol 115948 . 115957) (punctuation 115946 . 115947) (symbol 115937 . 115946) (open-paren 115936 . 115937) (symbol 115920 . 115935) (VOID 115915 . 115919) (EXTERN 115908 . 115914) (punctuation 115906 . 115907) (close-paren 115905 . 115906) (BOOL 115901 . 115905) (punctuation 115899 . 115900) (BOOL 115895 . 115899) (punctuation 115893 . 115894) (BOOL 115889 . 115893) (punctuation 115881 . 115882) (BOOL 115877 . 115881) (punctuation 115875 . 115876) (BOOL 115871 . 115875) (punctuation 115869 . 115870) (symbol 115858 . 115869) (punctuation 115856 . 115857) (symbol 115847 . 115856) (punctuation 115845 . 115846) (symbol 115836 . 115845) (open-paren 115835 . 115836) (symbol 115821 . 115834) (VOID 115816 . 115820) (EXTERN 115809 . 115815) (punctuation 115807 . 115808) (close-paren 115806 . 115807) (INT 115803 . 115806) (punctuation 115801 . 115802) (symbol 115792 . 115801) (punctuation 115790 . 115791) (symbol 115781 . 115790) (punctuation 115771 . 115772) (symbol 115762 . 115771) (punctuation 115760 . 115761) (symbol 115751 . 115760) (open-paren 115750 . 115751) (symbol 115727 . 115749) (VOID 115722 . 115726) (EXTERN 115715 . 115721) (punctuation 115713 . 115714) (close-paren 115712 . 115713) (symbol 115703 . 115712) (punctuation 115701 . 115702) (symbol 115692 . 115701) (punctuation 115679 . 115680) (symbol 115670 . 115679) (punctuation 115668 . 115669) (symbol 115659 . 115668) (open-paren 115658 . 115659) (symbol 115632 . 115657) (VOID 115627 . 115631) (EXTERN 115620 . 115626) (punctuation 115618 . 115619) (close-paren 115617 . 115618) (symbol 115608 . 115617) (punctuation 115606 . 115607) (symbol 115597 . 115606) (punctuation 115590 . 115591) (symbol 115581 . 115590) (punctuation 115579 . 115580) (symbol 115570 . 115579) (punctuation 115568 . 115569) (symbol 115559 . 115568) (open-paren 115558 . 115559) (symbol 115538 . 115557) (VOID 115533 . 115537) (EXTERN 115526 . 115532) (punctuation 115524 . 115525) (close-paren 115523 . 115524) (symbol 115514 . 115523) (punctuation 115512 . 115513) (symbol 115503 . 115512) (punctuation 115501 . 115502) (symbol 115492 . 115501) (open-paren 115491 . 115492) (symbol 115471 . 115490) (VOID 115466 . 115470) (EXTERN 115459 . 115465) (punctuation 115457 . 115458) (close-paren 115456 . 115457) (symbol 115447 . 115456) (punctuation 115445 . 115446) (symbol 115436 . 115445) (punctuation 115434 . 115435) (punctuation 115433 . 115434) (symbol 115426 . 115432) (STRUCT 115419 . 115425) (open-paren 115418 . 115419) (symbol 115393 . 115417) (VOID 115388 . 115392) (EXTERN 115381 . 115387) (punctuation 115379 . 115380) (close-paren 115378 . 115379) (punctuation 115377 . 115378) (symbol 115367 . 115376) (punctuation 115365 . 115366) (symbol 115356 . 115365) (punctuation 115354 . 115355) (symbol 115345 . 115354) (open-paren 115344 . 115345) (symbol 115317 . 115343) (VOID 115312 . 115316) (EXTERN 115305 . 115311) (punctuation 115303 . 115304) (close-paren 115302 . 115303) (punctuation 115301 . 115302) (symbol 115291 . 115300) (punctuation 115289 . 115290) (symbol 115280 . 115289) (punctuation 115278 . 115279) (symbol 115269 . 115278) (open-paren 115268 . 115269) (symbol 115243 . 115267) (VOID 115238 . 115242) (EXTERN 115231 . 115237) (punctuation 115229 . 115230) (close-paren 115228 . 115229) (symbol 115219 . 115228) (punctuation 115217 . 115218) (symbol 115208 . 115217) (open-paren 115207 . 115208) (symbol 115195 . 115206) (VOID 115190 . 115194) (EXTERN 115183 . 115189) (punctuation 115181 . 115182) (close-paren 115180 . 115181) (BOOL 115176 . 115180) (punctuation 115174 . 115175) (symbol 115165 . 115174) (punctuation 115163 . 115164) (symbol 115154 . 115163) (punctuation 115148 . 115149) (symbol 115139 . 115148) (punctuation 115137 . 115138) (symbol 115128 . 115137) (open-paren 115127 . 115128) (symbol 115115 . 115126) (symbol 115103 . 115114) (EXTERN 115096 . 115102) (punctuation 115094 . 115095) (close-paren 115093 . 115094) (BOOL 115089 . 115093) (punctuation 115087 . 115088) (symbol 115078 . 115087) (punctuation 115076 . 115077) (symbol 115067 . 115076) (punctuation 115065 . 115066) (symbol 115056 . 115065) (punctuation 115054 . 115055) (symbol 115045 . 115054) (open-paren 115044 . 115045) (symbol 115029 . 115043) (VOID 115024 . 115028) (EXTERN 115017 . 115023) (punctuation 115015 . 115016) (close-paren 115014 . 115015) (symbol 115005 . 115014) (punctuation 115003 . 115004) (symbol 114994 . 115003) (open-paren 114993 . 114994) (symbol 114978 . 114992) (VOID 114973 . 114977) (EXTERN 114966 . 114972) (punctuation 114964 . 114965) (close-paren 114963 . 114964) (BOOL 114959 . 114963) (punctuation 114957 . 114958) (BOOL 114953 . 114957) (punctuation 114951 . 114952) (symbol 114942 . 114951) (punctuation 114940 . 114941) (symbol 114931 . 114940) (open-paren 114930 . 114931) (symbol 114918 . 114929) (symbol 114906 . 114917) (EXTERN 114899 . 114905) (punctuation 114897 . 114898) (close-paren 114896 . 114897) (symbol 114887 . 114896) (punctuation 114885 . 114886) (symbol 114876 . 114885) (open-paren 114875 . 114876) (symbol 114865 . 114874) (VOID 114860 . 114864) (EXTERN 114853 . 114859) (punctuation 114851 . 114852) (close-paren 114850 . 114851) (BOOL 114846 . 114850) (punctuation 114844 . 114845) (symbol 114835 . 114844) (punctuation 114821 . 114822) (symbol 114812 . 114821) (punctuation 114810 . 114811) (symbol 114801 . 114810) (punctuation 114787 . 114788) (symbol 114778 . 114787) (punctuation 114776 . 114777) (symbol 114765 . 114776) (open-paren 114764 . 114765) (symbol 114730 . 114763) (VOID 114725 . 114729) (EXTERN 114718 . 114724) (punctuation 114716 . 114717) (close-paren 114715 . 114716) (symbol 114706 . 114715) (punctuation 114704 . 114705) (punctuation 114703 . 114704) (CHAR 114698 . 114702) (CONST 114692 . 114697) (open-paren 114691 . 114692) (symbol 114657 . 114690) (VOID 114652 . 114656) (EXTERN 114645 . 114651) (punctuation 114643 . 114644) (close-paren 114642 . 114643) (symbol 114633 . 114642) (punctuation 114631 . 114632) (punctuation 114630 . 114631) (CHAR 114625 . 114629) (CONST 114619 . 114624) (open-paren 114618 . 114619) (symbol 114596 . 114617) (VOID 114591 . 114595) (EXTERN 114584 . 114590) (punctuation 114582 . 114583) (close-paren 114581 . 114582) (punctuation 114580 . 114581) (CHAR 114575 . 114579) (CONST 114569 . 114574) (open-paren 114568 . 114569) (symbol 114554 . 114567) (VOID 114549 . 114553) (EXTERN 114542 . 114548) (punctuation 114540 . 114541) (close-paren 114539 . 114540) (INT 114536 . 114539) (open-paren 114535 . 114536) (symbol 114523 . 114534) (VOID 114518 . 114522) (EXTERN 114511 . 114517) (punctuation 114509 . 114510) (close-paren 114508 . 114509) (BOOL 114504 . 114508) (punctuation 114502 . 114503) (symbol 114493 . 114502) (punctuation 114491 . 114492) (symbol 114482 . 114491) (punctuation 114480 . 114481) (punctuation 114479 . 114480) (symbol 114472 . 114478) (STRUCT 114465 . 114471) (open-paren 114464 . 114465) (symbol 114445 . 114463) (VOID 114440 . 114444) (EXTERN 114433 . 114439) (punctuation 114431 . 114432) (close-paren 114430 . 114431) (BOOL 114426 . 114430) (punctuation 114424 . 114425) (symbol 114415 . 114424) (punctuation 114413 . 114414) (symbol 114404 . 114413) (punctuation 114398 . 114399) (symbol 114389 . 114398) (punctuation 114387 . 114388) (symbol 114378 . 114387) (punctuation 114376 . 114377) (symbol 114365 . 114376) (open-paren 114364 . 114365) (symbol 114345 . 114363) (VOID 114340 . 114344) (EXTERN 114333 . 114339) (punctuation 114331 . 114332) (close-paren 114330 . 114331) (symbol 114314 . 114330) (BOOL 114309 . 114313) (punctuation 114307 . 114308) (symbol 114298 . 114307) (punctuation 114296 . 114297) (symbol 114287 . 114296) (open-paren 114286 . 114287) (symbol 114270 . 114285) (VOID 114265 . 114269) (EXTERN 114258 . 114264) (punctuation 114256 . 114257) (close-paren 114255 . 114256) (symbol 114239 . 114255) (BOOL 114234 . 114238) (punctuation 114232 . 114233) (symbol 114223 . 114232) (punctuation 114221 . 114222) (symbol 114212 . 114221) (open-paren 114211 . 114212) (symbol 114193 . 114210) (VOID 114188 . 114192) (EXTERN 114181 . 114187) (punctuation 114179 . 114180) (close-paren 114178 . 114179) (BOOL 114174 . 114178) (punctuation 114172 . 114173) (BOOL 114168 . 114172) (punctuation 114166 . 114167) (BOOL 114162 . 114166) (punctuation 114154 . 114155) (symbol 114145 . 114154) (punctuation 114143 . 114144) (symbol 114134 . 114143) (punctuation 114132 . 114133) (punctuation 114131 . 114132) (CHAR 114126 . 114130) (CONST 114120 . 114125) (open-paren 114119 . 114120) (symbol 114105 . 114118) (VOID 114100 . 114104) (EXTERN 114093 . 114099) (punctuation 114091 . 114092) (close-paren 114090 . 114091) (symbol 114081 . 114090) (punctuation 114079 . 114080) (punctuation 114078 . 114079) (CHAR 114073 . 114077) (CONST 114067 . 114072) (open-paren 114066 . 114067) (symbol 114047 . 114065) (VOID 114042 . 114046) (EXTERN 114035 . 114041) (punctuation 114033 . 114034) (close-paren 114032 . 114033) (symbol 114023 . 114032) (punctuation 114021 . 114022) (punctuation 114020 . 114021) (CHAR 114015 . 114019) (CONST 114009 . 114014) (open-paren 114008 . 114009) (symbol 114001 . 114007) (VOID 113996 . 114000) (EXTERN 113989 . 113995) (punctuation 113987 . 113988) (close-paren 113986 . 113987) (symbol 113977 . 113986) (punctuation 113975 . 113976) (symbol 113966 . 113975) (punctuation 113964 . 113965) (symbol 113955 . 113964) (punctuation 113947 . 113948) (punctuation 113946 . 113947) (CHAR 113941 . 113945) (UNSIGNED 113932 . 113940) (CONST 113926 . 113931) (open-paren 113925 . 113926) (symbol 113903 . 113924) (INT 113899 . 113902) (EXTERN 113892 . 113898) (punctuation 113890 . 113891) (close-paren 113889 . 113890) (symbol 113880 . 113889) (punctuation 113878 . 113879) (symbol 113869 . 113878) (punctuation 113867 . 113868) (symbol 113858 . 113867) (punctuation 113849 . 113850) (punctuation 113848 . 113849) (CHAR 113843 . 113847) (UNSIGNED 113834 . 113842) (CONST 113828 . 113833) (open-paren 113827 . 113828) (symbol 113804 . 113826) (INT 113800 . 113803) (EXTERN 113793 . 113799) (punctuation 113791 . 113792) (close-paren 113790 . 113791) (BOOL 113786 . 113790) (punctuation 113784 . 113785) (BOOL 113780 . 113784) (punctuation 113778 . 113779) (symbol 113769 . 113778) (punctuation 113760 . 113761) (punctuation 113759 . 113760) (CHAR 113754 . 113758) (UNSIGNED 113745 . 113753) (punctuation 113743 . 113744) (punctuation 113742 . 113743) (CHAR 113737 . 113741) (UNSIGNED 113728 . 113736) (CONST 113722 . 113727) (open-paren 113721 . 113722) (symbol 113711 . 113720) (symbol 113701 . 113710) (EXTERN 113694 . 113700) (punctuation 113692 . 113693) (close-paren 113691 . 113692) (symbol 113682 . 113691) (punctuation 113680 . 113681) (punctuation 113679 . 113680) (symbol 113672 . 113678) (STRUCT 113665 . 113671) (open-paren 113664 . 113665) (symbol 113653 . 113663) (VOID 113648 . 113652) (EXTERN 113641 . 113647) (punctuation 113639 . 113640) (close-paren 113638 . 113639) (symbol 113629 . 113638) (open-paren 113628 . 113629) (symbol 113619 . 113627) (VOID 113614 . 113618) (EXTERN 113607 . 113613) (punctuation 113605 . 113606) (close-paren 113604 . 113605) (VOID 113600 . 113604) (open-paren 113599 . 113600) (symbol 113583 . 113598) (VOID "void" 113577 . 113582) (symbol "ATTRIBUTE_COLD" 113577 . 113582) (EXTERN 113570 . 113576) (punctuation 113568 . 113569) (close-paren 113567 . 113568) (symbol 113558 . 113567) (punctuation 113556 . 113557) (symbol 113547 . 113556) (open-paren 113546 . 113547) (symbol 113532 . 113545) (VOID 113527 . 113531) (EXTERN 113520 . 113526) (punctuation 113375 . 113376) (close-paren 113374 . 113375) (VOID 113370 . 113374) (open-paren 113369 . 113370) (symbol 113355 . 113368) (VOID 113350 . 113354) (EXTERN 113343 . 113349) (punctuation 113341 . 113342) (close-paren 113340 . 113341) (symbol 113331 . 113340) (punctuation 113329 . 113330) (punctuation 113328 . 113329) (symbol 113322 . 113327) (STRUCT 113315 . 113321) (open-paren 113314 . 113315) (symbol 113300 . 113313) (INT 113296 . 113299) (EXTERN 113289 . 113295) (punctuation 113127 . 113128) (close-paren 113126 . 113127) (VOID 113122 . 113126) (open-paren 113121 . 113122) (symbol 113109 . 113120) (VOID 113104 . 113108) (EXTERN 113097 . 113103) (punctuation 113095 . 113096) (close-paren 113094 . 113095) (VOID 113090 . 113094) (open-paren 113089 . 113090) (symbol 113074 . 113088) (VOID 113069 . 113073) (EXTERN 113062 . 113068) (punctuation 113031 . 113032) (close-paren 113030 . 113031) (VOID 113026 . 113030) (open-paren 113025 . 113026) (symbol 113008 . 113024) (VOID 113003 . 113007) (EXTERN 112996 . 113002) (punctuation 112994 . 112995) (close-paren 112993 . 112994) (symbol 112992 . 112993) (symbol 112980 . 112991) (punctuation 112978 . 112979) (symbol 112977 . 112978) (symbol 112965 . 112976) (open-paren 112964 . 112965) (symbol 112953 . 112963) (symbol 112941 . 112952) (EXTERN 112934 . 112940) (punctuation 112925 . 112926) (close-paren 112924 . 112925) (DOUBLE 112918 . 112924) (open-paren 112917 . 112918) (symbol 112911 . 112916) (DOUBLE 112904 . 112910) (EXTERN 112897 . 112903) (punctuation 112876 . 112877) (close-paren 112875 . 112876) (DOUBLE 112869 . 112875) (open-paren 112868 . 112869) (symbol 112847 . 112867) (INT 112843 . 112846) (punctuation 112841 . 112842) (close-paren 112840 . 112841) (number 112838 . 112839) (punctuation 112836 . 112837) (number 112834 . 112835) (punctuation 112832 . 112833) (number 112830 . 112831) (punctuation 112828 . 112829) (punctuation 112827 . 112828) (symbol 112817 . 112826) (punctuation 112815 . 112816) (symbol 112800 . 112814) (open-paren 112798 . 112799) (ENUM 112793 . 112797) (punctuation 112791 . 112792) (close-paren 112790 . 112791) (number 112788 . 112790) (punctuation 112786 . 112787) (punctuation 112785 . 112786) (symbol 112775 . 112784) (punctuation 112773 . 112774) (punctuation 112772 . 112773) (number 112770 . 112771) (punctuation 112768 . 112769) (punctuation 112767 . 112768) (symbol 112757 . 112766) (open-paren 112756 . 112757) (symbol 112749 . 112755) (punctuation 112716 . 112717) (close-paren 112715 . 112716) (VOID 112711 . 112715) (open-paren 112710 . 112711) (symbol 112698 . 112709) (VOID 112693 . 112697) (EXTERN 112686 . 112692) (punctuation 112684 . 112685) (close-paren 112683 . 112684) (symbol 112672 . 112683) (open-paren 112671 . 112672) (symbol 112651 . 112670) (symbol 112639 . 112650) (EXTERN 112632 . 112638) (punctuation 112630 . 112631) (close-paren 112629 . 112630) (symbol 112618 . 112629) (open-paren 112617 . 112618) (symbol 112597 . 112616) (symbol 112585 . 112596) (EXTERN 112578 . 112584) (punctuation 112576 . 112577) (close-paren 112575 . 112576) (symbol 112566 . 112575) (punctuation 112564 . 112565) (symbol 112553 . 112564) (open-paren 112552 . 112553) (symbol 112532 . 112551) (symbol 112522 . 112531) (EXTERN 112515 . 112521) (punctuation 112513 . 112514) (close-paren 112512 . 112513) (symbol 112503 . 112512) (punctuation 112501 . 112502) (symbol 112490 . 112501) (open-paren 112489 . 112490) (symbol 112469 . 112488) (symbol 112459 . 112468) (EXTERN 112452 . 112458) (punctuation 112450 . 112451) (close-paren 112449 . 112450) (VOID 112445 . 112449) (open-paren 112444 . 112445) (symbol 112415 . 112443) (VOID 112410 . 112414) (EXTERN 112403 . 112409) (punctuation 112401 . 112402) (close-paren 112400 . 112401) (symbol 112389 . 112400) (punctuation 112387 . 112388) (symbol 112376 . 112387) (open-paren 112375 . 112376) (symbol 112361 . 112374) (symbol 112349 . 112360) (EXTERN 112342 . 112348) (punctuation 112340 . 112341) (close-paren 112339 . 112340) (symbol 112328 . 112339) (punctuation 112326 . 112327) (symbol 112315 . 112326) (open-paren 112314 . 112315) (symbol 112301 . 112313) (symbol 112289 . 112300) (EXTERN 112282 . 112288) (punctuation 112280 . 112281) (close-paren 112279 . 112280) (symbol 112268 . 112279) (punctuation 112266 . 112267) (symbol 112255 . 112266) (open-paren 112254 . 112255) (symbol 112247 . 112253) (symbol 112235 . 112246) (EXTERN 112228 . 112234) (punctuation 112226 . 112227) (close-paren 112225 . 112226) (symbol 112214 . 112225) (punctuation 112212 . 112213) (symbol 112201 . 112212) (open-paren 112200 . 112201) (symbol 112186 . 112199) (BOOL 112181 . 112185) (EXTERN 112174 . 112180) (punctuation 112172 . 112173) (close-paren 112171 . 112172) (symbol 112160 . 112171) (punctuation 112158 . 112159) (symbol 112147 . 112158) (punctuation 112145 . 112146) (symbol 112134 . 112145) (open-paren 112133 . 112134) (symbol 112125 . 112132) (symbol 112113 . 112124) (EXTERN 112106 . 112112) (punctuation 112104 . 112105) (close-paren 112103 . 112104) (symbol 112092 . 112103) (punctuation 112090 . 112091) (symbol 112079 . 112090) (open-paren 112078 . 112079) (symbol 112070 . 112077) (symbol 112058 . 112069) (EXTERN 112051 . 112057) (punctuation 112049 . 112050) (close-paren 112048 . 112049) (symbol 112037 . 112048) (punctuation 112035 . 112036) (symbol 112024 . 112035) (open-paren 112023 . 112024) (symbol 112004 . 112022) (INT 112000 . 112003) (EXTERN 111993 . 111999) (punctuation 111991 . 111992) (close-paren 111990 . 111991) (symbol 111979 . 111990) (open-paren 111978 . 111979) (symbol 111963 . 111977) (symbol 111951 . 111962) (EXTERN 111944 . 111950) (punctuation 111942 . 111943) (close-paren 111941 . 111942) (semantic-list 111915 . 111941) (semantic-list 111911 . 111914) (BOOL 111906 . 111910) (punctuation 111904 . 111905) (symbol 111893 . 111904) (punctuation 111891 . 111892) (symbol 111880 . 111891) (open-paren 111879 . 111880) (symbol 111871 . 111878) (symbol 111859 . 111870) (EXTERN 111852 . 111858) (punctuation 111850 . 111851) (close-paren 111849 . 111850) (symbol 111838 . 111849) (punctuation 111836 . 111837) (symbol 111825 . 111836) (punctuation 111823 . 111824) (symbol 111812 . 111823) (open-paren 111811 . 111812) (symbol 111805 . 111810) (symbol 111793 . 111804) (EXTERN 111786 . 111792) (punctuation 111784 . 111785) (close-paren 111783 . 111784) (symbol 111774 . 111783) (punctuation 111772 . 111773) (symbol 111763 . 111772) (punctuation 111754 . 111755) (symbol 111745 . 111754) (punctuation 111743 . 111744) (symbol 111734 . 111743) (punctuation 111732 . 111733) (symbol 111721 . 111732) (open-paren 111720 . 111721) (symbol 111705 . 111719) (symbol 111693 . 111704) (EXTERN 111686 . 111692) (punctuation 111684 . 111685) (close-paren 111683 . 111684) (punctuation 111682 . 111683) (symbol 111672 . 111681) (punctuation 111670 . 111671) (punctuation 111669 . 111670) (symbol 111659 . 111668) (punctuation 111657 . 111658) (symbol 111648 . 111657) (punctuation 111636 . 111637) (symbol 111625 . 111636) (punctuation 111623 . 111624) (symbol 111612 . 111623) (punctuation 111610 . 111611) (symbol 111599 . 111610) (open-paren 111598 . 111599) (symbol 111580 . 111597) (VOID 111575 . 111579) (EXTERN 111568 . 111574) (punctuation 111487 . 111488) (close-paren 111486 . 111487) (symbol 111475 . 111486) (punctuation 111473 . 111474) (punctuation 111472 . 111473) (symbol 111456 . 111471) (STRUCT 111449 . 111455) (open-paren 111448 . 111449) (symbol 111425 . 111447) (VOID 111420 . 111424) (punctuation 111418 . 111419) (close-paren 111417 . 111418) (symbol 111406 . 111417) (punctuation 111398 . 111399) (symbol 111387 . 111398) (punctuation 111385 . 111386) (symbol 111374 . 111385) (punctuation 111372 . 111373) (punctuation 111371 . 111372) (symbol 111355 . 111370) (STRUCT 111348 . 111354) (open-paren 111347 . 111348) (symbol 111338 . 111346) (symbol 111328 . 111337) (punctuation 111326 . 111327) (close-paren 111325 . 111326) (punctuation 111324 . 111325) (symbol 111312 . 111323) (punctuation 111310 . 111311) (symbol 111299 . 111310) (punctuation 111297 . 111298) (punctuation 111296 . 111297) (symbol 111280 . 111295) (STRUCT 111273 . 111279) (open-paren 111272 . 111273) (symbol 111260 . 111271) (symbol 111250 . 111259) (punctuation 111248 . 111249) (close-paren 111247 . 111248) (BOOL 111243 . 111247) (punctuation 111241 . 111242) (symbol 111230 . 111241) (punctuation 111199 . 111200) (FLOAT 111194 . 111199) (punctuation 111192 . 111193) (FLOAT 111187 . 111192) (punctuation 111185 . 111186) (symbol 111176 . 111185) (punctuation 111174 . 111175) (symbol 111159 . 111174) (STRUCT 111152 . 111158) (open-paren 111151 . 111152) (symbol 111135 . 111150) (symbol 111123 . 111134) (punctuation 111121 . 111122) (close-paren 111120 . 111121) (punctuation 111119 . 111120) (symbol 111103 . 111118) (STRUCT 111096 . 111102) (punctuation 111094 . 111095) (symbol 111083 . 111094) (open-paren 111082 . 111083) (symbol 111062 . 111081) (symbol 111050 . 111061) (punctuation 111048 . 111049) (close-paren 111047 . 111048) (punctuation 111046 . 111047) (symbol 111030 . 111045) (STRUCT 111023 . 111029) (punctuation 111021 . 111022) (symbol 111010 . 111021) (open-paren 111009 . 111010) (symbol 110996 . 111008) (symbol 110984 . 110995) (punctuation 110982 . 110983) (close-paren 110981 . 110982) (punctuation 110980 . 110981) (symbol 110964 . 110979) (STRUCT 110957 . 110963) (punctuation 110955 . 110956) (symbol 110944 . 110955) (open-paren 110943 . 110944) (symbol 110932 . 110942) (symbol 110920 . 110931) (punctuation 110918 . 110919) (close-paren 110917 . 110918) (symbol 110906 . 110917) (open-paren 110905 . 110906) (symbol 110898 . 110904) (symbol 110887 . 110897) (punctuation 110885 . 110886) (close-paren 110884 . 110885) (symbol 110875 . 110884) (punctuation 110873 . 110874) (punctuation 110872 . 110873) (CONST 110866 . 110871) (CHAR 110861 . 110865) (open-paren 110860 . 110861) (symbol 110848 . 110859) (symbol 110837 . 110847) (punctuation 110835 . 110836) (close-paren 110834 . 110835) (punctuation 110833 . 110834) (symbol 110823 . 110832) (punctuation 110821 . 110822) (punctuation 110820 . 110821) (symbol 110810 . 110819) (punctuation 110808 . 110809) (symbol 110797 . 110808) (open-paren 110796 . 110797) (symbol 110771 . 110795) (punctuation 110770 . 110771) (CHAR 110765 . 110769) (EXTERN 110758 . 110764) (punctuation 110756 . 110757) (close-paren 110755 . 110756) (INT 110752 . 110755) (punctuation 110750 . 110751) (punctuation 110749 . 110750) (CONST 110743 . 110748) (VOID 110738 . 110742) (punctuation 110736 . 110737) (punctuation 110735 . 110736) (CHAR 110730 . 110734) (open-paren 110729 . 110730) (symbol 110715 . 110728) (VOID 110710 . 110714) (EXTERN 110703 . 110709) (punctuation 110701 . 110702) (close-paren 110700 . 110701) (BOOL 110696 . 110700) (punctuation 110694 . 110695) (punctuation 110693 . 110694) (symbol 110677 . 110692) (STRUCT 110670 . 110676) (open-paren 110669 . 110670) (symbol 110652 . 110668) (BOOL 110647 . 110651) (EXTERN 110640 . 110646) (punctuation 110638 . 110639) (close-paren 110637 . 110638) (symbol 110628 . 110637) (punctuation 110626 . 110627) (symbol 110617 . 110626) (punctuation 110615 . 110616) (symbol 110604 . 110615) (open-paren 110603 . 110604) (symbol 110589 . 110602) (symbol 110577 . 110588) (EXTERN 110570 . 110576) (close-paren 110551 . 110552) (symbol 110542 . 110551) (open-paren 110541 . 110542) (symbol 110523 . 110540) (symbol 110513 . 110522) (EXTERN 110506 . 110512) (punctuation 110504 . 110505) (close-paren 110503 . 110504) (symbol 110492 . 110503) (open-paren 110491 . 110492) (symbol 110479 . 110490) (symbol 110469 . 110478) (EXTERN 110462 . 110468) (punctuation 110460 . 110461) (close-paren 110459 . 110460) (number 110456 . 110458) (punctuation 110454 . 110455) (symbol 110430 . 110453) (open-paren 110428 . 110429) (ENUM 110423 . 110427) (punctuation 110395 . 110396) (close-paren 110394 . 110395) (VOID 110390 . 110394) (open-paren 110389 . 110390) (symbol 110374 . 110388) (VOID 110369 . 110373) (EXTERN 110362 . 110368) (punctuation 110360 . 110361) (close-paren 110359 . 110360) (VOID 110355 . 110359) (open-paren 110354 . 110355) (symbol 110337 . 110353) (VOID 110332 . 110336) (EXTERN 110325 . 110331) (punctuation 110239 . 110240) (close-paren 110238 . 110239) (VOID 110234 . 110238) (open-paren 110233 . 110234) (symbol 110217 . 110232) (VOID 110212 . 110216) (EXTERN 110205 . 110211) (punctuation 110203 . 110204) (close-paren 110202 . 110203) (VOID 110198 . 110202) (open-paren 110197 . 110198) (symbol 110179 . 110196) (VOID 110174 . 110178) (EXTERN 110167 . 110173) (punctuation 110165 . 110166) (close-paren 110164 . 110165) (VOID 110160 . 110164) (open-paren 110159 . 110160) (symbol 110146 . 110158) (VOID 110141 . 110145) (EXTERN 110134 . 110140) (punctuation 110102 . 110103) (close-paren 110101 . 110102) (VOID 110097 . 110101) (open-paren 110096 . 110097) (symbol 110078 . 110095) (VOID 110073 . 110077) (EXTERN 110066 . 110072) (punctuation 110064 . 110065) (close-paren 110063 . 110064) (symbol 110054 . 110063) (punctuation 110052 . 110053) (punctuation 110051 . 110052) (CHAR 110046 . 110050) (UNSIGNED 110037 . 110045) (CONST 110031 . 110036) (open-paren 110030 . 110031) (symbol 110006 . 110029) (symbol 109996 . 110005) (EXTERN 109989 . 109995) (punctuation 109987 . 109988) (close-paren 109986 . 109987) (symbol 109977 . 109986) (punctuation 109975 . 109976) (punctuation 109974 . 109975) (CHAR 109969 . 109973) (UNSIGNED 109960 . 109968) (CONST 109954 . 109959) (open-paren 109953 . 109954) (symbol 109939 . 109952) (symbol 109929 . 109938) (EXTERN 109922 . 109928) (punctuation 109888 . 109889) (close-paren 109887 . 109888) (symbol 109876 . 109887) (open-paren 109875 . 109876) (symbol 109860 . 109874) (BOOL 109855 . 109859) (EXTERN 109848 . 109854) (punctuation 109846 . 109847) (close-paren 109845 . 109846) (VOID 109841 . 109845) (open-paren 109840 . 109841) (symbol 109825 . 109839) (VOID 109820 . 109824) (EXTERN 109813 . 109819) (punctuation 109811 . 109812) (close-paren 109810 . 109811) (VOID 109806 . 109810) (open-paren 109805 . 109806) (symbol 109788 . 109804) (VOID 109783 . 109787) (EXTERN 109776 . 109782) (punctuation 109774 . 109775) (close-paren 109773 . 109774) (VOID 109769 . 109773) (open-paren 109768 . 109769) (symbol 109756 . 109767) (VOID 109751 . 109755) (EXTERN 109744 . 109750) (punctuation 109742 . 109743) (close-paren 109741 . 109742) (symbol 109730 . 109741) (punctuation 109728 . 109729) (BOOL 109724 . 109728) (punctuation 109722 . 109723) (BOOL 109718 . 109722) (punctuation 109716 . 109717) (symbol 109707 . 109716) (punctuation 109664 . 109665) (symbol 109655 . 109664) (punctuation 109653 . 109654) (punctuation 109652 . 109653) (CHAR 109647 . 109651) (UNSIGNED 109638 . 109646) (CONST 109632 . 109637) (open-paren 109631 . 109632) (symbol 109610 . 109630) (symbol 109598 . 109609) (EXTERN 109591 . 109597) (punctuation 109560 . 109561) (close-paren 109559 . 109560) (VOID 109555 . 109559) (open-paren 109554 . 109555) (symbol 109541 . 109553) (VOID 109536 . 109540) (EXTERN 109529 . 109535) (punctuation 109502 . 109503) (close-paren 109501 . 109502) (punctuation 109500 . 109501) (symbol 109488 . 109499) (STRUCT 109481 . 109487) (open-paren 109480 . 109481) (symbol 109457 . 109479) (VOID 109452 . 109456) (EXTERN 109445 . 109451) (punctuation 109443 . 109444) (close-paren 109442 . 109443) (VOID 109438 . 109442) (open-paren 109437 . 109438) (symbol 109424 . 109436) (VOID 109419 . 109423) (EXTERN 109412 . 109418) (punctuation 109410 . 109411) (close-paren 109409 . 109410) (symbol 109398 . 109409) (punctuation 109396 . 109397) (symbol 109385 . 109396) (open-paren 109384 . 109385) (symbol 109371 . 109383) (symbol 109359 . 109370) (EXTERN 109352 . 109358) (punctuation 109350 . 109351) (close-paren 109349 . 109350) (symbol 109341 . 109349) (symbol 109323 . 109340) (ENUM 109318 . 109322) (punctuation 109282 . 109283) (symbol 109271 . 109282) (punctuation 109269 . 109270) (symbol 109258 . 109269) (open-paren 109257 . 109258) (symbol 109236 . 109256) (VOID 109231 . 109235) (EXTERN 109224 . 109230) (punctuation 109222 . 109223) (close-paren 109221 . 109222) (symbol 109204 . 109221) (ENUM 109199 . 109203) (punctuation 109171 . 109172) (symbol 109160 . 109171) (punctuation 109158 . 109159) (symbol 109147 . 109158) (punctuation 109145 . 109146) (symbol 109134 . 109145) (open-paren 109133 . 109134) (symbol 109120 . 109132) (VOID 109115 . 109119) (EXTERN 109108 . 109114) (punctuation 109106 . 109107) (close-paren 109105 . 109106) (symbol 109078 . 109104) (punctuation 109074 . 109075) (symbol 109055 . 109074) (punctuation 109051 . 109052) (symbol 109034 . 109051) (punctuation 109030 . 109031) (symbol 109014 . 109030) (open-paren 109010 . 109011) (symbol 108992 . 109009) (ENUM 108987 . 108991) (punctuation 108985 . 108986) (close-paren 108984 . 108985) (symbol 108977 . 108984) (open-paren 108976 . 108977) (symbol 108955 . 108975) (symbol 108943 . 108954) (EXTERN 108936 . 108942) (punctuation 108934 . 108935) (close-paren 108933 . 108934) (symbol 108922 . 108933) (open-paren 108921 . 108922) (symbol 108907 . 108920) (VOID "void" 108901 . 108906) (symbol "ATTRIBUTE_COLD" 108901 . 108906) (EXTERN 108894 . 108900) (punctuation 108892 . 108893) (close-paren 108891 . 108892) (symbol 108880 . 108891) (punctuation 108878 . 108879) (symbol 108867 . 108878) (open-paren 108866 . 108867) (symbol 108848 . 108865) (VOID "void" 108842 . 108847) (symbol "ATTRIBUTE_COLD" 108842 . 108847) (EXTERN 108835 . 108841) (punctuation 108833 . 108834) (close-paren 108832 . 108833) (punctuation 108831 . 108832) (symbol 108819 . 108830) (STRUCT 108812 . 108818) (open-paren 108811 . 108812) (symbol 108793 . 108810) (punctuation 108792 . 108793) (symbol 108780 . 108791) (STRUCT 108773 . 108779) (EXTERN 108766 . 108772) (punctuation 108763 . 108764) (close-paren 108762 . 108763) (symbol 108753 . 108762) (punctuation 108751 . 108752) (symbol 108740 . 108751) (open-paren 108739 . 108740) (symbol 108722 . 108738) (symbol 108712 . 108721) (EXTERN 108705 . 108711) (punctuation 108703 . 108704) (close-paren 108702 . 108703) (symbol 108694 . 108702) (punctuation 108692 . 108693) (symbol 108684 . 108692) (punctuation 108682 . 108683) (symbol 108671 . 108682) (open-paren 108670 . 108671) (symbol 108655 . 108669) (symbol 108646 . 108654) (EXTERN 108639 . 108645) (punctuation 108216 . 108217) (close-paren 108215 . 108216) (symbol 108205 . 108215) (symbol 108188 . 108204) (ENUM 108183 . 108187) (punctuation 108148 . 108149) (symbol 108144 . 108148) (symbol 108132 . 108143) (punctuation 108130 . 108131) (symbol 108126 . 108130) (symbol 108114 . 108125) (open-paren 108113 . 108114) (symbol 108100 . 108112) (symbol 108088 . 108099) (EXTERN 108081 . 108087) (punctuation 108079 . 108080) (close-paren 108078 . 108079) (symbol 108058 . 108077) (punctuation 108054 . 108055) (symbol 108035 . 108054) (punctuation 108031 . 108032) (symbol 108021 . 108031) (punctuation 108017 . 108018) (symbol 108007 . 108017) (punctuation 108003 . 108004) (symbol 107989 . 108003) (punctuation 107985 . 107986) (symbol 107974 . 107985) (open-paren 107970 . 107971) (symbol 107953 . 107969) (ENUM 107948 . 107952) (punctuation 107946 . 107947) (close-paren 107945 . 107946) (symbol 107934 . 107945) (open-paren 107933 . 107934) (symbol 107915 . 107932) (symbol 107903 . 107914) (EXTERN 107896 . 107902) (punctuation 107894 . 107895) (close-paren 107893 . 107894) (symbol 107882 . 107893) (open-paren 107881 . 107882) (symbol 107863 . 107880) (symbol 107851 . 107862) (EXTERN 107844 . 107850) (punctuation 107842 . 107843) (close-paren 107841 . 107842) (symbol 107830 . 107841) (punctuation 107828 . 107829) (symbol 107817 . 107828) (punctuation 107805 . 107806) (symbol 107794 . 107805) (punctuation 107792 . 107793) (symbol 107781 . 107792) (open-paren 107780 . 107781) (symbol 107755 . 107779) (VOID 107750 . 107754) (EXTERN 107743 . 107749) (punctuation 107741 . 107742) (close-paren 107740 . 107741) (symbol 107729 . 107740) (punctuation 107727 . 107728) (symbol 107716 . 107727) (open-paren 107715 . 107716) (symbol 107702 . 107714) (VOID "void" 107696 . 107701) (symbol "ATTRIBUTE_COLD" 107696 . 107701) (EXTERN 107689 . 107695) (close-paren 107660 . 107661) (RETURN 107639 . 107645) (open-paren 107593 . 107594) (close-paren 107591 . 107592) (symbol 107590 . 107591) (symbol 107577 . 107589) (open-paren 107576 . 107577) (symbol 107558 . 107575) (symbol 107546 . 107557) (symbol 107539 . 107545) (close-paren 107536 . 107537) (RETURN 107525 . 107531) (punctuation 107521 . 107522) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "modiff_overflow" 107482 . 107497)))) 107472 . 107521) (open-paren 107393 . 107394) (close-paren 107391 . 107392) (symbol 107390 . 107391) (punctuation 107389 . 107390) (symbol 107376 . 107388) (open-paren 107375 . 107376) (symbol 107363 . 107374) (symbol 107350 . 107362) (symbol 107343 . 107349) (close-paren 107054 . 107055) (semantic-list 106966 . 107053) (ELSE 106957 . 106961) (semantic-list 106888 . 106954) (semantic-list 106868 . 106883) (IF 106865 . 106867) (open-paren 106861 . 106862) (close-paren 106859 . 106860) (symbol 106858 . 106859) (punctuation 106857 . 106858) (symbol 106847 . 106856) (punctuation 106845 . 106846) (symbol 106842 . 106845) (symbol 106830 . 106841) (open-paren 106829 . 106830) (symbol 106810 . 106828) (BOOL 106805 . 106809) (symbol 106798 . 106804) (close-paren 106796 . 106797) (semantic-list 106710 . 106795) (ELSE 106701 . 106705) (semantic-list 106646 . 106698) (semantic-list 106626 . 106641) (IF 106623 . 106625) (open-paren 106619 . 106620) (close-paren 106617 . 106618) (symbol 106616 . 106617) (punctuation 106615 . 106616) (symbol 106606 . 106614) (punctuation 106604 . 106605) (symbol 106601 . 106604) (symbol 106589 . 106600) (open-paren 106588 . 106589) (symbol 106570 . 106587) (BOOL 106565 . 106569) (symbol 106558 . 106564) (punctuation 106447 . 106448) (close-paren 106446 . 106447) (DOUBLE 106440 . 106446) (open-paren 106439 . 106440) (symbol 106421 . 106438) (symbol 106409 . 106420) (EXTERN 106402 . 106408) (punctuation 106400 . 106401) (close-paren 106399 . 106400) (symbol 106390 . 106399) (open-paren 106389 . 106390) (symbol 106372 . 106388) (symbol 106360 . 106371) (EXTERN 106353 . 106359) (punctuation 106351 . 106352) (close-paren 106350 . 106351) (INT 106347 . 106350) (punctuation 106345 . 106346) (punctuation 106344 . 106345) (CONST 106338 . 106343) (CHAR 106333 . 106337) (open-paren 106332 . 106333) (symbol 106316 . 106331) (symbol 106304 . 106315) (EXTERN 106297 . 106303) (punctuation 106295 . 106296) (close-paren 106294 . 106295) (INT 106291 . 106294) (punctuation 106289 . 106290) (symbol 106278 . 106289) (open-paren 106277 . 106278) (symbol 106260 . 106276) (symbol 106248 . 106259) (EXTERN 106241 . 106247) (punctuation 106239 . 106240) (close-paren 106238 . 106239) (INT 106235 . 106238) (punctuation 106233 . 106234) (symbol 106222 . 106233) (punctuation 106220 . 106221) (symbol 106211 . 106220) (punctuation 106209 . 106210) (punctuation 106208 . 106209) (CHAR 106203 . 106207) (open-paren 106202 . 106203) (symbol 106183 . 106201) (symbol 106173 . 106182) (EXTERN 106166 . 106172) (close-paren 106147 . 106148) (INT 106144 . 106147) (punctuation 106142 . 106143) (symbol 106131 . 106142) (open-paren 106130 . 106131) (symbol 106115 . 106129) (symbol 106105 . 106114) (EXTERN 106098 . 106104) (close-paren 106079 . 106080) (symbol 106068 . 106079) (open-paren 106067 . 106068) (symbol 106049 . 106066) (symbol 106039 . 106048) (EXTERN 106032 . 106038) (close-paren 106013 . 106014) (symbol 106002 . 106013) (open-paren 106001 . 106002) (symbol 105984 . 106000) (symbol 105975 . 105983) (EXTERN 105968 . 105974) (close-paren 105826 . 105827) (punctuation 105804 . 105805) (punctuation 105803 . 105804) (semantic-list 105796 . 105803) (symbol 105780 . 105795) (open-paren 105776 . 105777) (close-paren 105774 . 105775) (symbol 105771 . 105774) (symbol 105759 . 105770) (punctuation 105757 . 105758) (symbol 105754 . 105757) (symbol 105744 . 105753) (punctuation 105742 . 105743) (symbol 105737 . 105742) (symbol 105725 . 105736) (open-paren 105724 . 105725) (symbol 105696 . 105723) (VOID 105691 . 105695) (symbol 105684 . 105690) (close-paren 105681 . 105682) (punctuation 105659 . 105660) (punctuation 105658 . 105659) (semantic-list 105651 . 105658) (symbol 105639 . 105650) (punctuation 105635 . 105636) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 105590 . 105591)))) 105581 . 105635) (open-paren 105577 . 105578) (close-paren 105575 . 105576) (symbol 105572 . 105575) (symbol 105560 . 105571) (punctuation 105558 . 105559) (symbol 105555 . 105558) (symbol 105545 . 105554) (punctuation 105543 . 105544) (symbol 105538 . 105543) (symbol 105526 . 105537) (open-paren 105525 . 105526) (symbol 105501 . 105524) (VOID 105496 . 105500) (symbol 105489 . 105495) (close-paren 105486 . 105487) (punctuation 105466 . 105467) (punctuation 105465 . 105466) (semantic-list 105458 . 105465) (symbol 105446 . 105457) (punctuation 105442 . 105443) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 105379 . 105380)))) 105370 . 105442) (open-paren 105366 . 105367) (close-paren 105364 . 105365) (symbol 105361 . 105364) (symbol 105349 . 105360) (punctuation 105347 . 105348) (symbol 105344 . 105347) (symbol 105334 . 105343) (punctuation 105332 . 105333) (symbol 105327 . 105332) (symbol 105315 . 105326) (open-paren 105314 . 105315) (symbol 105292 . 105313) (VOID 105287 . 105291) (symbol 105280 . 105286) (close-paren 105223 . 105224) (punctuation 105207 . 105208) (punctuation 105206 . 105207) (semantic-list 105199 . 105206) (symbol 105187 . 105198) (open-paren 105183 . 105184) (close-paren 105181 . 105182) (symbol 105178 . 105181) (symbol 105166 . 105177) (punctuation 105164 . 105165) (symbol 105159 . 105164) (symbol 105147 . 105158) (open-paren 105146 . 105147) (symbol 105123 . 105145) (VOID 105118 . 105122) (symbol 105111 . 105117) (close-paren 105109 . 105110) (punctuation 105094 . 105095) (punctuation 105093 . 105094) (semantic-list 105086 . 105093) (symbol 105074 . 105085) (open-paren 105070 . 105071) (close-paren 105068 . 105069) (symbol 105065 . 105068) (symbol 105053 . 105064) (punctuation 105051 . 105052) (symbol 105046 . 105051) (symbol 105034 . 105045) (open-paren 105033 . 105034) (symbol 105011 . 105032) (VOID 105006 . 105010) (symbol 104999 . 105005) (close-paren 104890 . 104891) (punctuation 104874 . 104875) (symbol 104873 . 104874) (punctuation 104872 . 104873) (symbol 104871 . 104872) (punctuation 104870 . 104871) (punctuation 104869 . 104870) (semantic-list 104866 . 104869) (symbol 104858 . 104865) (open-paren 104854 . 104855) (close-paren 104852 . 104853) (symbol 104851 . 104852) (symbol 104842 . 104850) (punctuation 104840 . 104841) (symbol 104839 . 104840) (symbol 104827 . 104838) (open-paren 104826 . 104827) (symbol 104805 . 104825) (VOID 104800 . 104804) (symbol 104793 . 104799) (close-paren 104751 . 104752) (punctuation 104739 . 104740) (symbol 104738 . 104739) (punctuation 104737 . 104738) (symbol 104736 . 104737) (punctuation 104735 . 104736) (punctuation 104734 . 104735) (semantic-list 104731 . 104734) (symbol 104723 . 104730) (RETURN 104716 . 104722) (open-paren 104712 . 104713) (close-paren 104710 . 104711) (symbol 104709 . 104710) (symbol 104697 . 104708) (open-paren 104696 . 104697) (symbol 104679 . 104695) (symbol 104670 . 104678) (symbol 104663 . 104669) (close-paren 104626 . 104627) (punctuation 104610 . 104611) (punctuation 104609 . 104610) (semantic-list 104600 . 104609) (symbol 104591 . 104599) (open-paren 104587 . 104588) (close-paren 104585 . 104586) (symbol 104580 . 104585) (symbol 104568 . 104579) (punctuation 104566 . 104567) (symbol 104559 . 104566) (symbol 104547 . 104558) (open-paren 104546 . 104547) (symbol 104528 . 104545) (VOID 104523 . 104527) (symbol 104516 . 104522) (close-paren 104476 . 104477) (punctuation 104468 . 104469) (punctuation 104467 . 104468) (symbol 104464 . 104467) (RETURN 104457 . 104463) (punctuation 104453 . 104454) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "blv" 104406 . 104409)))) 104397 . 104453) (open-paren 104393 . 104394) (close-paren 104391 . 104392) (symbol 104388 . 104391) (punctuation 104387 . 104388) (symbol 104363 . 104386) (STRUCT 104356 . 104362) (open-paren 104355 . 104356) (symbol 104345 . 104354) (INT 104341 . 104344) (symbol 104334 . 104340) (close-paren 104283 . 104284) (punctuation 104250 . 104251) (symbol 104249 . 104250) (punctuation 104248 . 104249) (symbol 104247 . 104248) (punctuation 104246 . 104247) (punctuation 104245 . 104246) (semantic-list 104240 . 104245) (symbol 104232 . 104239) (open-paren 104228 . 104229) (close-paren 104226 . 104227) (symbol 104223 . 104226) (symbol 104211 . 104222) (open-paren 104210 . 104211) (symbol 104189 . 104209) (VOID 104184 . 104188) (symbol 104177 . 104183) (close-paren 104174 . 104175) (punctuation 104160 . 104161) (symbol 104159 . 104160) (punctuation 104158 . 104159) (symbol 104157 . 104158) (punctuation 104156 . 104157) (punctuation 104155 . 104156) (semantic-list 104150 . 104155) (symbol 104142 . 104149) (open-paren 104138 . 104139) (close-paren 104136 . 104137) (symbol 104132 . 104136) (punctuation 104131 . 104132) (symbol 104119 . 104130) (STRUCT 104112 . 104118) (punctuation 104110 . 104111) (symbol 104107 . 104110) (symbol 104095 . 104106) (open-paren 104094 . 104095) (symbol 104078 . 104093) (VOID 104073 . 104077) (symbol 104066 . 104072) (close-paren 104063 . 104064) (punctuation 104047 . 104048) (symbol 104046 . 104047) (punctuation 104045 . 104046) (symbol 104044 . 104045) (punctuation 104043 . 104044) (punctuation 104042 . 104043) (semantic-list 104037 . 104042) (symbol 104029 . 104036) (open-paren 104025 . 104026) (close-paren 104023 . 104024) (symbol 104018 . 104023) (symbol 104006 . 104017) (punctuation 104004 . 104005) (symbol 104001 . 104004) (symbol 103989 . 104000) (open-paren 103988 . 103989) (symbol 103971 . 103987) (VOID 103966 . 103970) (symbol 103959 . 103965) (close-paren 103956 . 103957) (punctuation 103934 . 103935) (symbol 103933 . 103934) (punctuation 103932 . 103933) (symbol 103931 . 103932) (punctuation 103930 . 103931) (punctuation 103929 . 103930) (semantic-list 103924 . 103929) (symbol 103916 . 103923) (open-paren 103912 . 103913) (close-paren 103910 . 103911) (symbol 103902 . 103910) (symbol 103890 . 103901) (punctuation 103888 . 103889) (symbol 103885 . 103888) (symbol 103873 . 103884) (open-paren 103872 . 103873) (symbol 103852 . 103871) (VOID 103847 . 103851) (symbol 103840 . 103846) (close-paren 103747 . 103748) (number 103738 . 103739) (punctuation 103736 . 103737) (punctuation 103730 . 103731) (number 103728 . 103729) (punctuation 103712 . 103713) (punctuation 103711 . 103712) (open-paren 103697 . 103698) (close-paren 103695 . 103696) (symbol 103692 . 103695) (symbol 103680 . 103691) (punctuation 103678 . 103679) (symbol 103675 . 103678) (symbol 103665 . 103674) (punctuation 103663 . 103664) (symbol 103662 . 103663) (punctuation 103661 . 103662) (symbol 103645 . 103660) (STRUCT 103638 . 103644) (open-paren 103637 . 103638) (symbol 103617 . 103636) (VOID 103612 . 103616) (symbol 103605 . 103611) (close-paren 103602 . 103603) (punctuation 103589 . 103590) (number 103587 . 103588) (punctuation 103571 . 103572) (punctuation 103570 . 103571) (open-paren 103556 . 103557) (close-paren 103554 . 103555) (symbol 103551 . 103554) (symbol 103539 . 103550) (punctuation 103537 . 103538) (symbol 103534 . 103537) (symbol 103524 . 103533) (punctuation 103522 . 103523) (symbol 103521 . 103522) (punctuation 103520 . 103521) (symbol 103504 . 103519) (STRUCT 103497 . 103503) (open-paren 103496 . 103497) (symbol 103478 . 103495) (VOID 103473 . 103477) (symbol 103466 . 103472) (close-paren 103422 . 103423) (punctuation 103414 . 103415) (SIZEOF 103407 . 103413) (semantic-list 103380 . 103391) (punctuation 103346 . 103347) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 103289 . 103290)))) 103280 . 103346) (open-paren 103276 . 103277) (close-paren 103274 . 103275) (symbol 103269 . 103274) (symbol 103259 . 103268) (punctuation 103250 . 103251) (symbol 103246 . 103250) (punctuation 103245 . 103246) (CONST 103239 . 103244) (symbol 103227 . 103238) (punctuation 103225 . 103226) (symbol 103219 . 103225) (symbol 103209 . 103218) (punctuation 103207 . 103208) (symbol 103206 . 103207) (symbol 103194 . 103205) (open-paren 103193 . 103194) (symbol 103187 . 103192) (VOID 103182 . 103186) (symbol 103175 . 103181) (close-paren 103091 . 103092) (number 103087 . 103088) (RETURN 103054 . 103060) (open-paren 103050 . 103051) (close-paren 103048 . 103049) (symbol 103047 . 103048) (symbol 103035 . 103046) (open-paren 103034 . 103035) (symbol 103017 . 103033) (punctuation 103015 . 103016) (symbol 103003 . 103014) (symbol 102996 . 103002) (close-paren 102942 . 102943) (RETURN 102932 . 102938) (punctuation 102913 . 102914) (symbol 102901 . 102912) (punctuation 102899 . 102900) (symbol 102897 . 102898) (punctuation 102895 . 102896) (symbol 102893 . 102894) (punctuation 102892 . 102893) (VOID 102887 . 102891) (open-paren 102740 . 102741) (close-paren 102738 . 102739) (symbol 102737 . 102738) (symbol 102727 . 102736) (punctuation 102725 . 102726) (symbol 102724 . 102725) (symbol 102712 . 102723) (open-paren 102711 . 102712) (symbol 102689 . 102710) (punctuation 102687 . 102688) (symbol 102675 . 102686) (symbol 102668 . 102674) (punctuation 102169 . 102170) (close-paren 102168 . 102169) (symbol 102160 . 102168) (open-paren 102159 . 102160) (symbol 102150 . 102159) (punctuation 102149 . 102150) (CONST 102143 . 102148) (symbol 102131 . 102142) (EXTERN 102124 . 102130) (punctuation 102122 . 102123) (close-paren 102121 . 102122) (number 102116 . 102120) (punctuation 102114 . 102115) (symbol 102105 . 102113) (open-paren 102103 . 102104) (ENUM 102098 . 102102) (punctuation 102095 . 102096) (close-paren 102094 . 102095) (punctuation 102093 . 102094) (CONST 102087 . 102092) (symbol 102075 . 102086) (open-paren 102074 . 102075) (symbol 102064 . 102073) (VOID 102059 . 102063) (close-paren 101908 . 101909) (semantic-list 101879 . 101888) (IF 101876 . 101878) (open-paren 101872 . 101873) (close-paren 101870 . 101871) (symbol 101865 . 101870) (INT 101861 . 101864) (SHORT 101855 . 101860) (UNSIGNED 101846 . 101854) (open-paren 101845 . 101846) (symbol 101833 . 101844) (VOID 101828 . 101832) (symbol 101821 . 101827) (punctuation 101556 . 101557) (close-paren 101555 . 101556) (VOID 101551 . 101555) (open-paren 101550 . 101551) (symbol 101539 . 101549) (VOID 101534 . 101538) (EXTERN 101527 . 101533) (punctuation 101484 . 101485) (close-paren 101483 . 101484) (open-paren 100620 . 100621) (symbol 100612 . 100619) (STRUCT 100605 . 100611) (punctuation 100602 . 100603) (close-paren 100601 . 100602) (punctuation 100599 . 100600) (symbol 100580 . 100599) (punctuation 100576 . 100577) (symbol 100556 . 100576) (open-paren 100552 . 100553) (symbol 100538 . 100551) (ENUM 100533 . 100537) (punctuation 100530 . 100531) (close-paren 100529 . 100530) (symbol 100517 . 100528) (punctuation 100515 . 100516) (symbol 100501 . 100515) (punctuation 100499 . 100500) (symbol 100492 . 100499) (open-paren 100490 . 100491) (symbol 100478 . 100489) (ENUM 100473 . 100477) (close-paren 99169 . 99170) (punctuation 99158 . 99159) (symbol 99146 . 99157) (RETURN 99139 . 99145) (open-paren 99135 . 99136) (close-paren 99133 . 99134) (VOID 99129 . 99133) (open-paren 99128 . 99129) (symbol 99114 . 99127) (symbol 99104 . 99113) (symbol 99097 . 99103) (punctuation 99094 . 99095) (close-paren 99093 . 99094) (punctuation 98960 . 98961) (symbol 98955 . 98959) (symbol "specbind_tag" 98932 . 98954) (ENUM "enum" 98932 . 98954) (punctuation 98960 . 98961) (symbol 98955 . 98959) (symbol "specbind_tag" 98932 . 98954) (ENUM "enum" 98932 . 98954) (punctuation 98640 . 98641) (symbol 98635 . 98639) (symbol "specbind_tag" 98612 . 98634) (ENUM "enum" 98612 . 98634) (punctuation 98640 . 98641) (symbol 98635 . 98639) (symbol "specbind_tag" 98612 . 98634) (ENUM "enum" 98612 . 98634) (punctuation 98535 . 98536) (symbol 98530 . 98534) (symbol "specbind_tag" 98507 . 98529) (ENUM "enum" 98507 . 98529) (punctuation 98535 . 98536) (symbol 98530 . 98534) (symbol "specbind_tag" 98507 . 98529) (ENUM "enum" 98507 . 98529) (punctuation 98418 . 98419) (symbol 98413 . 98417) (symbol "specbind_tag" 98390 . 98412) (ENUM "enum" 98390 . 98412) (punctuation 98418 . 98419) (symbol 98413 . 98417) (symbol "specbind_tag" 98390 . 98412) (ENUM "enum" 98390 . 98412) (punctuation 98287 . 98288) (symbol 98282 . 98286) (symbol "specbind_tag" 98259 . 98281) (ENUM "enum" 98259 . 98281) (punctuation 98287 . 98288) (symbol 98282 . 98286) (symbol "specbind_tag" 98259 . 98281) (ENUM "enum" 98259 . 98281) (punctuation 98169 . 98170) (symbol 98164 . 98168) (symbol "specbind_tag" 98141 . 98163) (ENUM "enum" 98141 . 98163) (punctuation 98169 . 98170) (symbol 98164 . 98168) (symbol "specbind_tag" 98141 . 98163) (ENUM "enum" 98141 . 98163) (punctuation 98046 . 98047) (symbol 98041 . 98045) (symbol "specbind_tag" 98018 . 98040) (ENUM "enum" 98018 . 98040) (punctuation 98046 . 98047) (symbol 98041 . 98045) (symbol "specbind_tag" 98018 . 98040) (ENUM "enum" 98018 . 98040) (punctuation 97918 . 97919) (symbol 97913 . 97917) (symbol "specbind_tag" 97890 . 97912) (ENUM "enum" 97890 . 97912) (punctuation 97918 . 97919) (symbol 97913 . 97917) (symbol "specbind_tag" 97890 . 97912) (ENUM "enum" 97890 . 97912) (punctuation 97760 . 97761) (symbol 97755 . 97759) (symbol "specbind_tag" 97732 . 97754) (ENUM "enum" 97732 . 97754) (punctuation 97760 . 97761) (symbol 97755 . 97759) (symbol "specbind_tag" 97732 . 97754) (ENUM "enum" 97732 . 97754) (punctuation 97701 . 97702) (symbol 97696 . 97700) (symbol "specbind_tag" 97673 . 97695) (ENUM "enum" 97673 . 97695) (open-paren 97564 . 97565) (symbol 97550 . 97561) (UNION 97544 . 97549) (punctuation 97541 . 97542) (close-paren 97540 . 97541) (symbol 97474 . 97493) (punctuation 97434 . 97435) (symbol 97417 . 97434) (punctuation 97298 . 97299) (symbol 97287 . 97298) (punctuation 97091 . 97092) (symbol 97074 . 97091) (punctuation 97039 . 97040) (symbol 97020 . 97039) (punctuation 96982 . 96983) (symbol 96958 . 96982) (punctuation 96924 . 96925) (symbol 96903 . 96924) (punctuation 96873 . 96874) (symbol 96855 . 96873) (punctuation 96822 . 96823) (symbol 96804 . 96822) (punctuation 96702 . 96703) (symbol 96682 . 96702) (punctuation 96627 . 96628) (symbol 96613 . 96627) (open-paren 96609 . 96610) (symbol 96596 . 96608) (ENUM 96591 . 96595) (punctuation 93870 . 93871) (close-paren 93869 . 93870) (punctuation 93868 . 93869) (CONST 93862 . 93867) (CHAR 93857 . 93861) (punctuation 93855 . 93856) (punctuation 93854 . 93855) (CONST 93848 . 93853) (symbol 93829 . 93847) (STRUCT 93822 . 93828) (open-paren 93821 . 93822) (symbol 93807 . 93820) (VOID 93802 . 93806) (EXTERN 93795 . 93801) (punctuation 93793 . 93794) (close-paren 93792 . 93793) (punctuation 93791 . 93792) (CONST 93785 . 93790) (CHAR 93780 . 93784) (punctuation 93778 . 93779) (punctuation 93777 . 93778) (CONST 93771 . 93776) (symbol 93759 . 93770) (STRUCT 93752 . 93758) (open-paren 93751 . 93752) (symbol 93740 . 93750) (VOID 93735 . 93739) (EXTERN 93728 . 93734) (punctuation 93726 . 93727) (close-paren 93725 . 93726) (punctuation 93724 . 93725) (CONST 93718 . 93723) (CHAR 93713 . 93717) (punctuation 93711 . 93712) (punctuation 93710 . 93711) (CONST 93704 . 93709) (symbol 93691 . 93703) (STRUCT 93684 . 93690) (open-paren 93683 . 93684) (symbol 93671 . 93682) (VOID 93666 . 93670) (EXTERN 93659 . 93665) (punctuation 93657 . 93658) (close-paren 93656 . 93657) (punctuation 93655 . 93656) (CONST 93649 . 93654) (CHAR 93644 . 93648) (punctuation 93642 . 93643) (punctuation 93641 . 93642) (CONST 93635 . 93640) (symbol 93623 . 93634) (STRUCT 93616 . 93622) (open-paren 93615 . 93616) (symbol 93597 . 93614) (VOID 93592 . 93596) (EXTERN 93585 . 93591) (punctuation 93583 . 93584) (close-paren 93582 . 93583) (punctuation 93581 . 93582) (CONST 93575 . 93580) (CHAR 93570 . 93574) (punctuation 93568 . 93569) (punctuation 93567 . 93568) (CONST 93561 . 93566) (symbol 93549 . 93560) (STRUCT 93542 . 93548) (open-paren 93541 . 93542) (symbol 93529 . 93540) (VOID 93524 . 93528) (EXTERN 93517 . 93523) (punctuation 92924 . 92925) (close-paren 92923 . 92924) (number 92919 . 92920) (punctuation 92918 . 92919) (punctuation 92916 . 92917) (symbol 92906 . 92915) (punctuation 92900 . 92901) (number 92899 . 92900) (punctuation 92898 . 92899) (punctuation 92896 . 92897) (symbol 92891 . 92895) (open-paren 92885 . 92886) (symbol 92875 . 92882) (ENUM 92870 . 92874) (punctuation 92867 . 92868) (close-paren 92866 . 92867) (punctuation 92865 . 92866) (symbol 92847 . 92864) (UNION 92841 . 92846) (open-paren 92840 . 92841) (symbol 92832 . 92839) (VOID 92827 . 92831) (EXTERN 92820 . 92826) (close-paren 90457 . 90458) (semantic-list 90440 . 90443) (open-paren 90418 . 90419) (close-paren 90416 . 90417) (symbol 90415 . 90416) (symbol 90403 . 90414) (open-paren 90402 . 90403) (symbol 90391 . 90401) (VOID 90386 . 90390) (symbol 90379 . 90385) (close-paren 90376 . 90377) (semantic-list 90357 . 90360) (open-paren 90332 . 90333) (close-paren 90330 . 90331) (symbol 90329 . 90330) (symbol 90317 . 90328) (open-paren 90316 . 90317) (symbol 90302 . 90315) (VOID 90297 . 90301) (symbol 90290 . 90296) (close-paren 90287 . 90288) (semantic-list 90268 . 90271) (open-paren 90244 . 90245) (close-paren 90242 . 90243) (symbol 90241 . 90242) (symbol 90229 . 90240) (open-paren 90228 . 90229) (symbol 90215 . 90227) (VOID 90210 . 90214) (symbol 90203 . 90209) (close-paren 90200 . 90201) (punctuation 90198 . 90199) (semantic-list 90111 . 90198) (RETURN 90104 . 90110) (open-paren 90100 . 90101) (close-paren 90098 . 90099) (symbol 90097 . 90098) (symbol 90085 . 90096) (open-paren 90084 . 90085) (symbol 90074 . 90083) (DOUBLE 90067 . 90073) (symbol 90060 . 90066) (close-paren 90057 . 90058) (semantic-list 90036 . 90039) (open-paren 90012 . 90013) (close-paren 90010 . 90011) (symbol 90009 . 90010) (symbol 89997 . 90008) (open-paren 89996 . 89997) (symbol 89983 . 89995) (VOID 89978 . 89982) (symbol 89971 . 89977) (close-paren 89969 . 89970) (semantic-list 89949 . 89952) (open-paren 89926 . 89927) (close-paren 89924 . 89925) (symbol 89915 . 89924) (symbol 89903 . 89914) (punctuation 89901 . 89902) (symbol 89900 . 89901) (symbol 89888 . 89899) (open-paren 89887 . 89888) (symbol 89875 . 89886) (VOID 89870 . 89874) (symbol 89863 . 89869) (close-paren 89861 . 89862) (RETURN 89806 . 89812) (semantic-list 89788 . 89801) (IF 89785 . 89787) (RETURN 89765 . 89771) (semantic-list 89747 . 89760) (IF 89744 . 89746) (open-paren 89740 . 89741) (close-paren 89738 . 89739) (symbol 89737 . 89738) (symbol 89725 . 89736) (open-paren 89724 . 89725) (symbol 89701 . 89723) (symbol 89691 . 89700) (symbol 89684 . 89690) (close-paren 89613 . 89614) (semantic-list 89607 . 89610) (semantic-list 89580 . 89590) (open-paren 89556 . 89557) (close-paren 89554 . 89555) (symbol 89553 . 89554) (symbol 89541 . 89552) (open-paren 89540 . 89541) (symbol 89523 . 89539) (VOID 89518 . 89522) (symbol 89511 . 89517) (close-paren 89508 . 89509) (open-paren 89479 . 89480) (close-paren 89477 . 89478) (symbol 89476 . 89477) (symbol 89464 . 89475) (open-paren 89463 . 89464) (close-paren 89461 . 89462) (symbol 89449 . 89461) (open-paren 89448 . 89449) (VOID 89443 . 89447) (symbol 89436 . 89442) (close-paren 89433 . 89434) (semantic-list 89416 . 89419) (open-paren 89395 . 89396) (close-paren 89393 . 89394) (symbol 89392 . 89393) (symbol 89380 . 89391) (punctuation 89378 . 89379) (symbol 89377 . 89378) (symbol 89365 . 89376) (open-paren 89364 . 89365) (symbol 89349 . 89363) (VOID 89344 . 89348) (symbol 89337 . 89343) (close-paren 89334 . 89335) (semantic-list 89317 . 89320) (punctuation 89310 . 89311) (punctuation 89309 . 89310) (semantic-list 89305 . 89308) (open-paren 89283 . 89284) (close-paren 89281 . 89282) (symbol 89280 . 89281) (symbol 89268 . 89279) (open-paren 89267 . 89268) (symbol 89256 . 89266) (VOID 89251 . 89255) (symbol 89244 . 89250) (close-paren 89240 . 89241) (punctuation 89219 . 89220) (punctuation 89218 . 89219) (semantic-list 89214 . 89217) (symbol 89201 . 89213) (punctuation 89199 . 89200) (punctuation 89198 . 89199) (semantic-list 89194 . 89197) (symbol 89186 . 89193) (punctuation 89184 . 89185) (punctuation 89183 . 89184) (semantic-list 89179 . 89182) (symbol 89171 . 89178) (RETURN 89164 . 89170) (open-paren 89160 . 89161) (close-paren 89158 . 89159) (symbol 89157 . 89158) (symbol 89145 . 89156) (open-paren 89144 . 89145) (symbol 89137 . 89143) (BOOL 89132 . 89136) (symbol 89125 . 89131) (close-paren 89102 . 89103) (punctuation 89076 . 89077) (semantic-list 89072 . 89075) (symbol 89066 . 89071) (RETURN 89059 . 89065) (open-paren 89055 . 89056) (close-paren 89053 . 89054) (symbol 89052 . 89053) (symbol 89040 . 89051) (open-paren 89039 . 89040) (symbol 89032 . 89038) (BOOL 89027 . 89031) (symbol 89020 . 89026) (close-paren 88980 . 88981) (semantic-list 88961 . 88964) (open-paren 88937 . 88938) (close-paren 88935 . 88936) (symbol 88934 . 88935) (symbol 88922 . 88933) (open-paren 88921 . 88922) (symbol 88908 . 88920) (VOID 88903 . 88907) (symbol 88896 . 88902) (close-paren 88893 . 88894) (RETURN 88854 . 88860) (open-paren 88850 . 88851) (close-paren 88848 . 88849) (symbol 88847 . 88848) (symbol 88835 . 88846) (open-paren 88834 . 88835) (symbol 88826 . 88833) (BOOL 88821 . 88825) (symbol 88814 . 88820) (close-paren 88811 . 88812) (RETURN 88773 . 88779) (open-paren 88769 . 88770) (close-paren 88767 . 88768) (symbol 88766 . 88767) (symbol 88754 . 88765) (open-paren 88753 . 88754) (symbol 88746 . 88752) (BOOL 88741 . 88745) (symbol 88734 . 88740) (close-paren 88731 . 88732) (RETURN 88690 . 88696) (open-paren 88686 . 88687) (close-paren 88684 . 88685) (symbol 88683 . 88684) (symbol 88671 . 88682) (open-paren 88670 . 88671) (symbol 88660 . 88669) (BOOL 88655 . 88659) (symbol 88648 . 88654) (close-paren 88645 . 88646) (RETURN 88592 . 88598) (open-paren 88588 . 88589) (close-paren 88586 . 88587) (symbol 88585 . 88586) (symbol 88573 . 88584) (open-paren 88572 . 88573) (symbol 88550 . 88571) (BOOL 88545 . 88549) (symbol 88538 . 88544) (close-paren 88488 . 88489) (punctuation 88459 . 88460) (semantic-list 88455 . 88458) (symbol 88449 . 88454) (RETURN 88442 . 88448) (open-paren 88438 . 88439) (close-paren 88436 . 88437) (symbol 88435 . 88436) (symbol 88423 . 88434) (open-paren 88422 . 88423) (symbol 88412 . 88421) (BOOL 88407 . 88411) (symbol 88400 . 88406) (close-paren 88205 . 88206) (punctuation 88199 . 88200) (punctuation 88198 . 88199) (semantic-list 88194 . 88197) (symbol 88186 . 88193) (punctuation 88184 . 88185) (punctuation 88183 . 88184) (semantic-list 88179 . 88182) (symbol 88171 . 88178) (punctuation 88169 . 88170) (punctuation 88168 . 88169) (symbol 88165 . 88167) (punctuation 88163 . 88164) (punctuation 88162 . 88163) (semantic-list 88158 . 88161) (symbol 88150 . 88157) (RETURN 88143 . 88149) (open-paren 88139 . 88140) (close-paren 88137 . 88138) (symbol 88135 . 88137) (symbol 88126 . 88134) (punctuation 88124 . 88125) (symbol 88123 . 88124) (symbol 88111 . 88122) (punctuation 88109 . 88110) (symbol 88107 . 88109) (symbol 88098 . 88106) (open-paren 88097 . 88098) (symbol 88082 . 88096) (BOOL 88077 . 88081) (symbol 88070 . 88076) (close-paren 88067 . 88068) (punctuation 88053 . 88054) (punctuation 88052 . 88053) (semantic-list 88048 . 88051) (symbol 88039 . 88047) (RETURN 88032 . 88038) (open-paren 88028 . 88029) (close-paren 88026 . 88027) (symbol 88025 . 88026) (symbol 88013 . 88024) (open-paren 88012 . 88013) (symbol 88004 . 88011) (BOOL 87999 . 88003) (symbol 87992 . 87998) (close-paren 87989 . 87990) (RETURN 87974 . 87980) (punctuation 87945 . 87946) (semantic-list 87928 . 87945) (punctuation 87926 . 87927) (semantic-list 87922 . 87925) (symbol 87918 . 87921) (punctuation 87916 . 87917) (semantic-list 87912 . 87915) (symbol 87904 . 87911) (punctuation 87902 . 87903) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 87890 . 87901) (punctuation 87888 . 87889) (symbol 87881 . 87887) (symbol 87871 . 87880) (punctuation 87837 . 87838) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 87825 . 87832)))) 87816 . 87837) (open-paren 87812 . 87813) (close-paren 87810 . 87811) (symbol 87809 . 87810) (symbol 87797 . 87808) (open-paren 87796 . 87797) (symbol 87788 . 87795) (symbol 87778 . 87787) (symbol 87771 . 87777) (close-paren 87700 . 87701) (punctuation 87685 . 87686) (punctuation 87684 . 87685) (number 87682 . 87683) (punctuation 87680 . 87681) (punctuation 87679 . 87680) (semantic-list 87675 . 87678) (symbol 87667 . 87674) (RETURN 87660 . 87666) (open-paren 87656 . 87657) (close-paren 87654 . 87655) (symbol 87653 . 87654) (symbol 87641 . 87652) (open-paren 87640 . 87641) (symbol 87632 . 87639) (BOOL 87627 . 87631) (symbol 87620 . 87626) (punctuation 87588 . 87589) (close-paren 87587 . 87588) (number 87582 . 87584) (punctuation 87580 . 87581) (symbol 87566 . 87579) (punctuation 87468 . 87469) (symbol 87459 . 87468) (punctuation 87457 . 87458) (symbol 87448 . 87456) (punctuation 87446 . 87447) (symbol 87435 . 87445) (punctuation 87433 . 87434) (symbol 87422 . 87432) (punctuation 87420 . 87421) (symbol 87409 . 87419) (punctuation 87407 . 87408) (symbol 87398 . 87406) (punctuation 87390 . 87391) (symbol 87371 . 87389) (punctuation 87364 . 87365) (number 87355 . 87364) (punctuation 87353 . 87354) (symbol 87343 . 87352) (punctuation 87337 . 87338) (number 87328 . 87337) (punctuation 87326 . 87327) (symbol 87317 . 87325) (punctuation 87311 . 87312) (number 87302 . 87311) (punctuation 87300 . 87301) (symbol 87289 . 87299) (punctuation 87283 . 87284) (number 87274 . 87283) (punctuation 87272 . 87273) (symbol 87261 . 87271) (punctuation 87255 . 87256) (number 87246 . 87255) (punctuation 87244 . 87245) (symbol 87233 . 87243) (punctuation 87227 . 87228) (number 87218 . 87227) (punctuation 87216 . 87217) (symbol 87207 . 87215) (open-paren 87201 . 87202) (symbol 87189 . 87198) (ENUM 87184 . 87188) (punctuation 86988 . 86989) (close-paren 86987 . 86988) (number 86983 . 86984) (punctuation 86981 . 86982) (symbol 86960 . 86980) (punctuation 86954 . 86955) (number 86953 . 86954) (punctuation 86951 . 86952) (symbol 86931 . 86950) (punctuation 86925 . 86926) (number 86924 . 86925) (punctuation 86922 . 86923) (symbol 86901 . 86921) (punctuation 86895 . 86896) (number 86894 . 86895) (punctuation 86892 . 86893) (symbol 86873 . 86891) (punctuation 86867 . 86868) (number 86866 . 86867) (punctuation 86864 . 86865) (symbol 86846 . 86863) (punctuation 86840 . 86841) (number 86839 . 86840) (punctuation 86837 . 86838) (symbol 86820 . 86836) (open-paren 86814 . 86815) (symbol 86798 . 86811) (ENUM 86793 . 86797) (close-paren 86177 . 86178) (punctuation 86170 . 86171) (symbol 86169 . 86170) (punctuation 86168 . 86169) (punctuation 86167 . 86168) (semantic-list 86164 . 86167) (symbol 86157 . 86163) (RETURN 86150 . 86156) (open-paren 86146 . 86147) (close-paren 86144 . 86145) (symbol 86143 . 86144) (symbol 86131 . 86142) (open-paren 86130 . 86131) (symbol 86118 . 86129) (DOUBLE 86111 . 86117) (symbol 86104 . 86110) (close-paren 86101 . 86102) (punctuation 86099 . 86100) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 86081 . 86087) ("type" symbol "Lisp_Float" 86069 . 86079) ("a" symbol "a" 86066 . 86067)))) 86058 . 86099) (RETURN 86051 . 86057) (punctuation 86047 . 86048) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FLOATP" 86036 . 86042)))) 86027 . 86047) (open-paren 86023 . 86024) (close-paren 86021 . 86022) (symbol 86020 . 86021) (symbol 86008 . 86019) (open-paren 86007 . 86008) (symbol 86000 . 86006) (punctuation 85998 . 85999) (symbol 85987 . 85997) (STRUCT 85980 . 85986) (symbol 85973 . 85979) (close-paren 85970 . 85971) (RETURN 85944 . 85950) (open-paren 85940 . 85941) (close-paren 85938 . 85939) (symbol 85937 . 85938) (symbol 85925 . 85936) (open-paren 85924 . 85925) (close-paren 85922 . 85923) (symbol 85916 . 85922) (open-paren 85915 . 85916) (BOOL 85910 . 85914) (symbol 85903 . 85909) (punctuation 85900 . 85901) (close-paren 85899 . 85900) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 85881 . 85887)))) 85870 . 85899) (open-paren 85869 . 85870) (symbol 85862 . 85868) (punctuation 85860 . 85861) (close-paren 85859 . 85860) (semantic-list "(GCALIGNMENT)" 85825 . 85847) (symbol "alignas" 85825 . 85847) (CHAR "char" 85825 . 85847) (semantic-list "(GCALIGNMENT)" 85825 . 85847) (symbol "alignas" 85825 . 85847) (CHAR "char" 85825 . 85847) (open-paren 85750 . 85751) (symbol 85737 . 85747) (STRUCT 85730 . 85736) (close-paren 85693 . 85694) (punctuation 85684 . 85685) (symbol 85683 . 85684) (RETURN 85676 . 85682) (punctuation 85672 . 85673) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFER_OBJFWDP" 85653 . 85667)))) 85644 . 85672) (open-paren 85640 . 85641) (close-paren 85638 . 85639) (symbol 85637 . 85638) (symbol 85629 . 85636) (open-paren 85628 . 85629) (symbol 85613 . 85627) (punctuation 85611 . 85612) (CONST 85605 . 85610) (symbol 85586 . 85604) (STRUCT 85579 . 85585) (symbol 85572 . 85578) (close-paren 85569 . 85570) (punctuation 85546 . 85547) (punctuation 85545 . 85546) (semantic-list 85541 . 85544) (symbol 85532 . 85540) (RETURN 85525 . 85531) (open-paren 85521 . 85522) (close-paren 85519 . 85520) (symbol 85518 . 85519) (symbol 85510 . 85517) (open-paren 85509 . 85510) (symbol 85494 . 85508) (BOOL 85489 . 85493) (symbol 85482 . 85488) (close-paren 85479 . 85480) (RETURN 85468 . 85474) (open-paren 85422 . 85423) (close-paren 85420 . 85421) (symbol 85419 . 85420) (symbol 85411 . 85418) (open-paren 85410 . 85411) (symbol 85401 . 85409) (symbol 85387 . 85400) (ENUM 85382 . 85386) (symbol 85375 . 85381) (punctuation 85372 . 85373) (close-paren 85371 . 85372) (open-paren 85294 . 85295) (symbol 85273 . 85291) (STRUCT 85266 . 85272) (punctuation 85179 . 85180) (close-paren 85178 . 85179) (open-paren 84241 . 84242) (symbol 84215 . 84238) (STRUCT 84208 . 84214) (punctuation 83131 . 83132) (close-paren 83130 . 83131) (open-paren 82950 . 82951) (symbol 82929 . 82947) (STRUCT 82922 . 82928) (punctuation 82791 . 82792) (close-paren 82790 . 82791) (open-paren 82711 . 82712) (symbol 82697 . 82708) (STRUCT 82690 . 82696) (punctuation 82496 . 82497) (close-paren 82495 . 82496) (open-paren 82421 . 82422) (symbol 82406 . 82418) (STRUCT 82399 . 82405) (punctuation 82204 . 82205) (close-paren 82203 . 82204) (open-paren 82127 . 82128) (symbol 82113 . 82124) (STRUCT 82106 . 82112) (close-paren 81750 . 81751) (punctuation 81731 . 81732) (semantic-list 81727 . 81730) (symbol 81714 . 81726) (punctuation 81712 . 81713) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 81709 . 81710)))) 81690 . 81711) (RETURN 81683 . 81689) (open-paren 81679 . 81680) (close-paren 81677 . 81678) (symbol 81676 . 81677) (symbol 81666 . 81675) (open-paren 81665 . 81666) (symbol 81655 . 81664) (symbol 81643 . 81654) (symbol 81636 . 81642) (close-paren 81634 . 81635) (punctuation 81615 . 81616) (semantic-list 81611 . 81614) (symbol 81599 . 81610) (punctuation 81597 . 81598) (semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 81594 . 81595)))) 81575 . 81596) (RETURN 81568 . 81574) (open-paren 81564 . 81565) (close-paren 81562 . 81563) (symbol 81561 . 81562) (symbol 81552 . 81560) (open-paren 81551 . 81552) (symbol 81542 . 81550) (symbol 81530 . 81541) (symbol 81523 . 81529) (close-paren 81466 . 81467) (punctuation 81451 . 81452) (punctuation 81450 . 81451) (semantic-list 81446 . 81449) (symbol 81438 . 81445) (RETURN 81431 . 81437) (open-paren 81427 . 81428) (close-paren 81425 . 81426) (symbol 81424 . 81425) (symbol 81412 . 81423) (open-paren 81411 . 81412) (symbol 81402 . 81410) (BOOL 81397 . 81401) (symbol 81390 . 81396) (close-paren 81387 . 81388) (RETURN 81348 . 81354) (open-paren 81344 . 81345) (close-paren 81342 . 81343) (symbol 81341 . 81342) (symbol 81329 . 81340) (open-paren 81328 . 81329) (symbol 81320 . 81327) (BOOL 81315 . 81319) (symbol 81308 . 81314) (close-paren 81305 . 81306) (punctuation 81303 . 81304) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 81282 . 81288) ("type" symbol "Lisp_Vectorlike" 81265 . 81280) ("a" symbol "a" 81262 . 81263)))) 81254 . 81303) (RETURN 81247 . 81253) (punctuation 81243 . 81244) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "USER_PTRP" 81229 . 81238)))) 81220 . 81243) (open-paren 81216 . 81217) (close-paren 81214 . 81215) (symbol 81213 . 81214) (symbol 81201 . 81212) (open-paren 81200 . 81201) (symbol 81190 . 81199) (punctuation 81188 . 81189) (symbol 81174 . 81187) (STRUCT 81167 . 81173) (symbol 81160 . 81166) (close-paren 81157 . 81158) (RETURN 81116 . 81122) (open-paren 81112 . 81113) (close-paren 81110 . 81111) (symbol 81109 . 81110) (symbol 81097 . 81108) (open-paren 81096 . 81097) (symbol 81086 . 81095) (BOOL 81081 . 81085) (symbol 81074 . 81080) (close-paren 81071 . 81072) (punctuation 81069 . 81070) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 81049 . 81055) ("type" symbol "Lisp_Vectorlike" 81032 . 81047) ("a" symbol "a" 81029 . 81030)))) 81021 . 81069) (RETURN 81014 . 81020) (punctuation 81010 . 81011) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "OVERLAYP" 80997 . 81005)))) 80988 . 81010) (open-paren 80984 . 80985) (close-paren 80982 . 80983) (symbol 80981 . 80982) (symbol 80969 . 80980) (open-paren 80968 . 80969) (symbol 80959 . 80967) (punctuation 80957 . 80958) (symbol 80944 . 80956) (STRUCT 80937 . 80943) (symbol 80930 . 80936) (close-paren 80927 . 80928) (RETURN 80887 . 80893) (open-paren 80883 . 80884) (close-paren 80881 . 80882) (symbol 80880 . 80881) (symbol 80868 . 80879) (open-paren 80867 . 80868) (symbol 80858 . 80866) (BOOL 80853 . 80857) (symbol 80846 . 80852) (close-paren 80843 . 80844) (punctuation 80841 . 80842) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 80822 . 80828) ("type" symbol "Lisp_Vectorlike" 80805 . 80820) ("a" symbol "a" 80802 . 80803)))) 80794 . 80841) (RETURN 80787 . 80793) (punctuation 80783 . 80784) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MARKERP" 80771 . 80778)))) 80762 . 80783) (open-paren 80758 . 80759) (close-paren 80756 . 80757) (symbol 80755 . 80756) (symbol 80743 . 80754) (open-paren 80742 . 80743) (symbol 80734 . 80741) (punctuation 80732 . 80733) (symbol 80720 . 80731) (STRUCT 80713 . 80719) (symbol 80706 . 80712) (close-paren 80703 . 80704) (RETURN 80664 . 80670) (open-paren 80660 . 80661) (close-paren 80658 . 80659) (symbol 80657 . 80658) (symbol 80645 . 80656) (open-paren 80644 . 80645) (symbol 80636 . 80643) (BOOL 80631 . 80635) (symbol 80624 . 80630) (close-paren 80621 . 80622) (punctuation 80619 . 80620) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 80597 . 80603) ("type" symbol "Lisp_Vectorlike" 80580 . 80595) ("a" symbol "a" 80577 . 80578)))) 80569 . 80619) (RETURN 80562 . 80568) (punctuation 80558 . 80559) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FINALIZERP" 80543 . 80553)))) 80534 . 80558) (open-paren 80530 . 80531) (close-paren 80528 . 80529) (symbol 80527 . 80528) (symbol 80515 . 80526) (open-paren 80514 . 80515) (symbol 80503 . 80513) (punctuation 80501 . 80502) (symbol 80486 . 80500) (STRUCT 80479 . 80485) (symbol 80472 . 80478) (close-paren 80469 . 80470) (RETURN 80427 . 80433) (open-paren 80423 . 80424) (close-paren 80421 . 80422) (symbol 80420 . 80421) (symbol 80408 . 80419) (open-paren 80407 . 80408) (symbol 80396 . 80406) (BOOL 80391 . 80395) (symbol 80384 . 80390) (punctuation 80291 . 80292) (close-paren 80273 . 80274) (open-paren 79880 . 79881) (symbol 79863 . 79877) (STRUCT 79856 . 79862) (punctuation 79824 . 79825) (close-paren 79806 . 79807) (open-paren 79729 . 79730) (symbol 79715 . 79728) (STRUCT 79708 . 79714) (close-paren 79705 . 79706) (punctuation 79695 . 79696) (punctuation 79694 . 79695) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 79673 . 79679) ("type" symbol "Lisp_Vectorlike" 79656 . 79671) ("a" symbol "a" 79653 . 79654)))) 79645 . 79694) (RETURN 79638 . 79644) (RETURN 79613 . 79619) (semantic-list 79595 . 79608) (IF 79592 . 79594) (punctuation 79588 . 79589) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "mint_ptrp" 79574 . 79583)))) 79565 . 79588) (open-paren 79561 . 79562) (close-paren 79559 . 79560) (symbol 79558 . 79559) (symbol 79546 . 79557) (open-paren 79545 . 79546) (symbol 79531 . 79544) (punctuation 79529 . 79530) (VOID 79524 . 79528) (symbol 79517 . 79523) (close-paren 79514 . 79515) (punctuation 79478 . 79479) (punctuation 79477 . 79478) (semantic-list 79473 . 79476) (symbol 79465 . 79472) (RETURN 79458 . 79464) (open-paren 79454 . 79455) (close-paren 79452 . 79453) (symbol 79451 . 79452) (symbol 79439 . 79450) (open-paren 79438 . 79439) (symbol 79428 . 79437) (BOOL 79423 . 79427) (symbol 79416 . 79422) (close-paren 79413 . 79414) (punctuation 79392 . 79393) (symbol 79388 . 79391) (punctuation 79386 . 79387) (symbol 79384 . 79385) (punctuation 79382 . 79383) (punctuation 79381 . 79382) (semantic-list 79375 . 79380) (symbol 79364 . 79374) (punctuation 79362 . 79363) (punctuation 79361 . 79362) (semantic-list 79355 . 79360) (symbol 79347 . 79354) (RETURN 79340 . 79346) (open-paren 79292 . 79293) (close-paren 79290 . 79291) (symbol 79289 . 79290) (punctuation 79288 . 79289) (VOID 79283 . 79287) (open-paren 79282 . 79283) (symbol 79268 . 79281) (symbol 79256 . 79267) (symbol 79249 . 79255) (punctuation 78397 . 78398) (close-paren 78396 . 78397) (punctuation 78395 . 78396) (VOID 78390 . 78394) (open-paren 78389 . 78390) (symbol 78375 . 78388) (symbol 78363 . 78374) (EXTERN 78356 . 78362) (punctuation 78353 . 78354) (close-paren 78335 . 78336) (open-paren 78276 . 78277) (symbol 78260 . 78273) (STRUCT 78253 . 78259) (punctuation 78250 . 78251) (close-paren 78232 . 78233) (open-paren 78094 . 78095) (symbol 77595 . 77607) (STRUCT 77588 . 77594) (punctuation 77482 . 77483) (close-paren 77464 . 77465) (open-paren 75673 . 75674) (symbol 75661 . 75672) (STRUCT 75654 . 75660) (close-paren 75651 . 75652) (punctuation 75649 . 75650) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 75642 . 75649) (punctuation 75640 . 75641) (semantic-list 75597 . 75639) (RETURN 75590 . 75596) (open-paren 75586 . 75587) (close-paren 75584 . 75585) (symbol 75583 . 75584) (symbol 75572 . 75582) (open-paren 75571 . 75572) (symbol 75557 . 75570) (symbol 75546 . 75556) (symbol 75539 . 75545) (close-paren 75477 . 75478) (punctuation 75472 . 75473) (semantic-list 75443 . 75471) (punctuation 75441 . 75442) (semantic-list 75432 . 75440) (RETURN 75425 . 75431) (open-paren 75421 . 75422) (close-paren 75419 . 75420) (symbol 75418 . 75419) (symbol 75407 . 75417) (punctuation 75405 . 75406) (symbol 75404 . 75405) (symbol 75393 . 75403) (open-paren 75392 . 75393) (symbol 75377 . 75391) (symbol 75366 . 75376) (symbol 75359 . 75365) (punctuation 74916 . 74917) (close-paren 74915 . 74916) (number 74912 . 74914) (punctuation 74910 . 74911) (symbol 74892 . 74909) (open-paren 74890 . 74891) (symbol 74872 . 74889) (ENUM 74867 . 74871) (punctuation 74809 . 74810) (close-paren 74808 . 74809) (symbol 74797 . 74808) (open-paren 74796 . 74797) (symbol 74778 . 74795) (VOID 74773 . 74777) (close-paren 74770 . 74771) (RETURN 74757 . 74763) (open-paren 74695 . 74696) (close-paren 74693 . 74694) (symbol 74692 . 74693) (punctuation 74691 . 74692) (symbol 74675 . 74690) (STRUCT 74668 . 74674) (CONST 74662 . 74667) (open-paren 74661 . 74662) (symbol 74645 . 74660) (symbol 74635 . 74644) (symbol 74628 . 74634) (close-paren 74583 . 74584) (punctuation 74570 . 74571) (punctuation 74569 . 74570) (RETURN 74555 . 74561) (open-paren 74551 . 74552) (close-paren 74549 . 74550) (symbol 74546 . 74549) (symbol 74536 . 74545) (punctuation 74534 . 74535) (symbol 74533 . 74534) (punctuation 74532 . 74533) (symbol 74516 . 74531) (STRUCT 74509 . 74515) (CONST 74503 . 74508) (open-paren 74502 . 74503) (symbol 74492 . 74501) (symbol 74480 . 74491) (symbol 74473 . 74479) (close-paren 74400 . 74401) (number 74396 . 74397) (punctuation 74394 . 74395) (punctuation 74388 . 74389) (number 74386 . 74387) (punctuation 74370 . 74371) (punctuation 74369 . 74370) (RETURN 74355 . 74361) (open-paren 74351 . 74352) (close-paren 74349 . 74350) (symbol 74346 . 74349) (symbol 74336 . 74345) (punctuation 74334 . 74335) (symbol 74333 . 74334) (punctuation 74332 . 74333) (symbol 74316 . 74331) (STRUCT 74309 . 74315) (CONST 74303 . 74308) (open-paren 74302 . 74303) (symbol 74291 . 74301) (symbol 74279 . 74290) (symbol 74272 . 74278) (close-paren 74208 . 74209) (punctuation 74200 . 74201) (number 74198 . 74199) (punctuation 74182 . 74183) (punctuation 74181 . 74182) (RETURN 74167 . 74173) (open-paren 74163 . 74164) (close-paren 74161 . 74162) (symbol 74158 . 74161) (symbol 74148 . 74157) (punctuation 74146 . 74147) (symbol 74145 . 74146) (punctuation 74144 . 74145) (symbol 74128 . 74143) (STRUCT 74121 . 74127) (CONST 74115 . 74120) (open-paren 74114 . 74115) (symbol 74105 . 74113) (symbol 74093 . 74104) (symbol 74086 . 74092) (close-paren 73935 . 73936) (punctuation 73933 . 73934) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 73910 . 73916) ("type" symbol "Lisp_Vectorlike" 73893 . 73908) ("a" symbol "a" 73890 . 73891)))) 73882 . 73933) (RETURN 73875 . 73881) (punctuation 73871 . 73872) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 73854 . 73866)))) 73845 . 73871) (open-paren 73841 . 73842) (close-paren 73839 . 73840) (symbol 73838 . 73839) (symbol 73826 . 73837) (open-paren 73825 . 73826) (symbol 73813 . 73824) (punctuation 73811 . 73812) (symbol 73795 . 73810) (STRUCT 73788 . 73794) (symbol 73781 . 73787) (close-paren 73778 . 73779) (RETURN 73735 . 73741) (open-paren 73731 . 73732) (close-paren 73729 . 73730) (symbol 73728 . 73729) (symbol 73716 . 73727) (open-paren 73715 . 73716) (symbol 73702 . 73714) (BOOL 73697 . 73701) (symbol 73690 . 73696) (punctuation 73687 . 73688) (close-paren 73686 . 73687) (symbol 73675 . 73686) (punctuation 73673 . 73674) (punctuation 73672 . 73673) (semantic-list 73641 . 73671) (symbol 73632 . 73640) (open-paren 73631 . 73632) (symbol 73624 . 73630) (punctuation 73580 . 73581) (close-paren 73562 . 73563) (punctuation 72521 . 72522) (MUTABLE 72514 . 72521) (BOOL 72509 . 72513) (open-paren 70883 . 70884) (symbol 70867 . 70882) (STRUCT 70860 . 70866) (punctuation 70857 . 70858) (close-paren 70856 . 70857) (open-paren 70384 . 70385) (symbol 70368 . 70383) (STRUCT 70361 . 70367) (close-paren 69963 . 69964) (punctuation 69961 . 69962) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 0 1 (macros (("sym" symbol "sym" 69957 . 69960)))) 69931 . 69961) (RETURN 69924 . 69930) (open-paren 69920 . 69921) (close-paren 69918 . 69919) (symbol 69915 . 69918) (symbol 69903 . 69914) (open-paren 69902 . 69903) (close-paren 69900 . 69901) (symbol 69883 . 69900) (open-paren 69882 . 69883) (INT 69878 . 69881) (symbol 69871 . 69877) (close-paren 69647 . 69648) (punctuation 69645 . 69646) (semantic-list #("(XSYMBOL (sym)->u.s.trapped_write)" 0 1 (macros (("sym" symbol "sym" 69641 . 69644)))) 69610 . 69645) (RETURN 69603 . 69609) (open-paren 69599 . 69600) (close-paren 69597 . 69598) (symbol 69594 . 69597) (symbol 69582 . 69593) (open-paren 69581 . 69582) (close-paren 69579 . 69580) (symbol 69557 . 69579) (open-paren 69556 . 69557) (INT 69552 . 69555) (symbol 69545 . 69551) (close-paren 69378 . 69379) (punctuation 69340 . 69341) (punctuation 69339 . 69340) (symbol 69330 . 69338) (punctuation 69329 . 69330) (symbol 69328 . 69329) (punctuation 69327 . 69328) (symbol 69326 . 69327) (punctuation 69325 . 69326) (punctuation 69324 . 69325) (semantic-list 69319 . 69324) (symbol 69311 . 69318) (RETURN 69304 . 69310) (open-paren 69300 . 69301) (close-paren 69298 . 69299) (symbol 69295 . 69298) (symbol 69283 . 69294) (open-paren 69282 . 69283) (symbol 69245 . 69281) (BOOL 69240 . 69244) (symbol 69233 . 69239) (close-paren 69169 . 69170) (punctuation 69148 . 69149) (punctuation 69147 . 69148) (symbol 69138 . 69146) (punctuation 69137 . 69138) (symbol 69136 . 69137) (punctuation 69135 . 69136) (symbol 69134 . 69135) (punctuation 69133 . 69134) (punctuation 69132 . 69133) (semantic-list 69127 . 69132) (symbol 69119 . 69126) (RETURN 69112 . 69118) (open-paren 69108 . 69109) (close-paren 69106 . 69107) (symbol 69103 . 69106) (symbol 69091 . 69102) (open-paren 69090 . 69091) (symbol 69072 . 69089) (BOOL 69067 . 69071) (symbol 69060 . 69066) (close-paren 69005 . 69006) (punctuation 68998 . 68999) (symbol 68997 . 68998) (punctuation 68996 . 68997) (symbol 68995 . 68996) (punctuation 68994 . 68995) (punctuation 68993 . 68994) (semantic-list 68988 . 68993) (symbol 68980 . 68987) (RETURN 68973 . 68979) (open-paren 68969 . 68970) (close-paren 68967 . 68968) (symbol 68964 . 68967) (symbol 68952 . 68963) (open-paren 68951 . 68952) (symbol 68939 . 68950) (symbol 68927 . 68938) (symbol 68920 . 68926) (close-paren 68917 . 68918) (punctuation 68904 . 68905) (symbol 68901 . 68904) (punctuation 68900 . 68901) (symbol 68897 . 68900) (punctuation 68896 . 68897) (symbol 68895 . 68896) (punctuation 68894 . 68895) (symbol 68893 . 68894) (punctuation 68892 . 68893) (punctuation 68891 . 68892) (symbol 68888 . 68891) (open-paren 68828 . 68829) (close-paren 68826 . 68827) (symbol 68825 . 68826) (punctuation 68824 . 68825) (CONST 68818 . 68823) (VOID 68813 . 68817) (punctuation 68811 . 68812) (symbol 68808 . 68811) (punctuation 68807 . 68808) (symbol 68795 . 68806) (STRUCT 68788 . 68794) (open-paren 68787 . 68788) (symbol 68772 . 68786) (VOID 68767 . 68771) (symbol 68760 . 68766) (close-paren 68758 . 68759) (punctuation 68748 . 68749) (symbol 68745 . 68748) (punctuation 68744 . 68745) (symbol 68743 . 68744) (punctuation 68742 . 68743) (symbol 68741 . 68742) (punctuation 68740 . 68741) (punctuation 68739 . 68740) (symbol 68736 . 68739) (open-paren 68676 . 68677) (close-paren 68674 . 68675) (symbol 68673 . 68674) (punctuation 68672 . 68673) (symbol 68648 . 68671) (STRUCT 68641 . 68647) (punctuation 68639 . 68640) (symbol 68636 . 68639) (punctuation 68635 . 68636) (symbol 68623 . 68634) (STRUCT 68616 . 68622) (open-paren 68615 . 68616) (symbol 68600 . 68614) (VOID 68595 . 68599) (symbol 68588 . 68594) (close-paren 68586 . 68587) (punctuation 68574 . 68575) (symbol 68571 . 68574) (punctuation 68570 . 68571) (symbol 68569 . 68570) (punctuation 68568 . 68569) (symbol 68567 . 68568) (punctuation 68566 . 68567) (punctuation 68565 . 68566) (symbol 68562 . 68565) (open-paren 68503 . 68504) (close-paren 68501 . 68502) (symbol 68500 . 68501) (punctuation 68499 . 68500) (symbol 68487 . 68498) (STRUCT 68480 . 68486) (punctuation 68478 . 68479) (symbol 68475 . 68478) (punctuation 68474 . 68475) (symbol 68462 . 68473) (STRUCT 68455 . 68461) (open-paren 68454 . 68455) (symbol 68437 . 68453) (VOID 68432 . 68436) (symbol 68425 . 68431) (close-paren 68422 . 68423) (punctuation 68420 . 68421) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 0 1 (macros (("v" symbol "v" 68418 . 68419) ("sym" symbol "sym" 68413 . 68416)))) 68390 . 68420) (open-paren 68386 . 68387) (close-paren 68384 . 68385) (symbol 68383 . 68384) (symbol 68371 . 68382) (punctuation 68369 . 68370) (symbol 68366 . 68369) (punctuation 68365 . 68366) (symbol 68353 . 68364) (STRUCT 68346 . 68352) (open-paren 68345 . 68346) (close-paren 68343 . 68344) (symbol 68329 . 68343) (open-paren 68328 . 68329) (VOID 68323 . 68327) (symbol 68316 . 68322) (close-paren 68313 . 68314) (punctuation 68307 . 68308) (symbol 68304 . 68307) (punctuation 68303 . 68304) (symbol 68302 . 68303) (punctuation 68301 . 68302) (symbol 68300 . 68301) (punctuation 68299 . 68300) (punctuation 68298 . 68299) (symbol 68295 . 68298) (RETURN 68288 . 68294) (open-paren 68206 . 68207) (close-paren 68204 . 68205) (symbol 68201 . 68204) (punctuation 68200 . 68201) (symbol 68188 . 68199) (STRUCT 68181 . 68187) (open-paren 68180 . 68181) (symbol 68169 . 68179) (symbol 68161 . 68168) (symbol 68154 . 68160) (close-paren 68152 . 68153) (punctuation 68146 . 68147) (symbol 68143 . 68146) (punctuation 68142 . 68143) (symbol 68141 . 68142) (punctuation 68140 . 68141) (symbol 68139 . 68140) (punctuation 68138 . 68139) (punctuation 68137 . 68138) (symbol 68134 . 68137) (RETURN 68127 . 68133) (open-paren 68052 . 68053) (close-paren 68050 . 68051) (symbol 68047 . 68050) (punctuation 68046 . 68047) (symbol 68034 . 68045) (STRUCT 68027 . 68033) (open-paren 68026 . 68027) (symbol 68015 . 68025) (punctuation 68013 . 68014) (symbol 67989 . 68012) (STRUCT 67982 . 67988) (symbol 67975 . 67981) (close-paren 67973 . 67974) (punctuation 67965 . 67966) (symbol 67962 . 67965) (punctuation 67961 . 67962) (symbol 67960 . 67961) (punctuation 67959 . 67960) (symbol 67958 . 67959) (punctuation 67957 . 67958) (punctuation 67956 . 67957) (symbol 67953 . 67956) (RETURN 67946 . 67952) (open-paren 67870 . 67871) (close-paren 67868 . 67869) (symbol 67865 . 67868) (punctuation 67864 . 67865) (symbol 67852 . 67863) (STRUCT 67845 . 67851) (open-paren 67844 . 67845) (symbol 67831 . 67843) (punctuation 67829 . 67830) (symbol 67817 . 67828) (STRUCT 67810 . 67816) (symbol 67803 . 67809) (close-paren 67800 . 67801) (punctuation 67798 . 67799) (semantic-list #("(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 0 1 (macros (("sym" symbol "sym" 67794 . 67797)))) 67775 . 67798) (RETURN 67768 . 67774) (open-paren 67764 . 67765) (close-paren 67762 . 67763) (symbol 67759 . 67762) (punctuation 67758 . 67759) (symbol 67746 . 67757) (STRUCT 67739 . 67745) (open-paren 67738 . 67739) (close-paren 67736 . 67737) (symbol 67726 . 67736) (open-paren 67725 . 67726) (symbol 67713 . 67724) (symbol 67706 . 67712) (close-paren 66877 . 66878) (punctuation 66875 . 66876) (semantic-list 66800 . 66875) (RETURN 66793 . 66799) (open-paren 66789 . 66790) (close-paren 66787 . 66788) (symbol 66785 . 66787) (punctuation 66784 . 66785) (symbol 66768 . 66783) (STRUCT 66761 . 66767) (open-paren 66760 . 66761) (symbol 66737 . 66759) (INT 66733 . 66736) (symbol 66726 . 66732) (punctuation 66658 . 66659) (close-paren 66657 . 66658) (semantic-list 66644 . 66657) (SIZEOF 66637 . 66643) (punctuation 66635 . 66636) (symbol 66613 . 66634) (punctuation 66611 . 66612) (symbol 66599 . 66610) (punctuation 66597 . 66598) (punctuation 66596 . 66597) (semantic-list 66556 . 66594) (symbol 66547 . 66555) (open-paren 66546 . 66547) (symbol 66539 . 66545) (punctuation 66537 . 66538) (close-paren 66536 . 66537) (semantic-list 66523 . 66536) (SIZEOF 66516 . 66522) (punctuation 66514 . 66515) (symbol 66488 . 66513) (punctuation 66486 . 66487) (symbol 66474 . 66485) (punctuation 66472 . 66473) (punctuation 66471 . 66472) (semantic-list 66437 . 66469) (symbol 66428 . 66436) (open-paren 66427 . 66428) (symbol 66420 . 66426) (punctuation 66418 . 66419) (close-paren 66417 . 66418) (symbol 66406 . 66417) (punctuation 66404 . 66405) (punctuation 66403 . 66404) (semantic-list 66370 . 66402) (symbol 66361 . 66369) (open-paren 66360 . 66361) (symbol 66353 . 66359) (punctuation 66309 . 66310) (close-paren 66308 . 66309) (number 66304 . 66305) (punctuation 66302 . 66303) (semantic-list #("(offsetof (type, lastlispfield) + word_size < header_size		\\
   ? 0 : (offsetof (type, lastlispfield) + word_size - header_size) / word_size)" 0 1 (macros (("lastlispfield" symbol "Lisp_Sub_Char_Table" 66271 . 66290) ("type" STRUCT "struct" 66264 . 66270)))) 66249 . 66301) (punctuation 66247 . 66248) (symbol 66219 . 66240) (punctuation 66067 . 66068) (semantic-list 65982 . 66067) (punctuation 65980 . 65981) (symbol 65948 . 65973) (open-paren 65776 . 65777) (symbol 65754 . 65773) (ENUM 65749 . 65753) (close-paren 65746 . 65747) (punctuation 65742 . 65743) (punctuation 65741 . 65742) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" UNION "union" 65717 . 65722) ("type" symbol "Lisp_Vectorlike" 65700 . 65715) ("a" symbol "a" 65697 . 65698)))) 65689 . 65741) (punctuation 65688 . 65689) (RETURN 65681 . 65687) (punctuation 65677 . 65678) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 65667 . 65672)))) 65658 . 65677) (open-paren 65654 . 65655) (close-paren 65652 . 65653) (symbol 65651 . 65652) (symbol 65639 . 65650) (open-paren 65638 . 65639) (symbol 65632 . 65637) (punctuation 65630 . 65631) (symbol 65620 . 65629) (STRUCT 65613 . 65619) (symbol 65606 . 65612) (close-paren 65603 . 65604) (RETURN 65566 . 65572) (open-paren 65562 . 65563) (close-paren 65560 . 65561) (symbol 65559 . 65560) (symbol 65547 . 65558) (open-paren 65546 . 65547) (symbol 65540 . 65545) (BOOL 65535 . 65539) (symbol 65528 . 65534) (punctuation 65525 . 65526) (close-paren 65524 . 65525) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" UNION "union" 65500 . 65505)))) 65489 . 65524) (open-paren 65488 . 65489) (symbol 65481 . 65487) (punctuation 65479 . 65480) (close-paren 65478 . 65479) (semantic-list "(GCALIGNMENT)" 65453 . 65475) (symbol "alignas" 65453 . 65475) (CHAR "char" 65453 . 65475) (open-paren 65423 . 65424) (symbol 65403 . 65420) (UNION 65397 . 65402) (punctuation 65395 . 65396) (close-paren 65377 . 65378) (open-paren 64157 . 64158) (symbol 64145 . 64154) (STRUCT 64138 . 64144) (close-paren 63978 . 63979) (ELSE 63938 . 63942) (punctuation 63917 . 63918) (punctuation 63916 . 63917) (semantic-list 63912 . 63916) (semantic-list 63800 . 63866) (IF 63797 . 63799) (open-paren 63793 . 63794) (close-paren 63791 . 63792) (symbol 63788 . 63791) (symbol 63776 . 63787) (punctuation 63774 . 63775) (symbol 63771 . 63774) (INT 63767 . 63770) (punctuation 63765 . 63766) (symbol 63763 . 63765) (symbol 63751 . 63762) (open-paren 63750 . 63751) (symbol 63735 . 63749) (VOID 63730 . 63734) (symbol 63723 . 63729) (close-paren 63584 . 63585) (punctuation 63582 . 63583) (semantic-list 63496 . 63582) (RETURN 63489 . 63495) (open-paren 63485 . 63486) (close-paren 63483 . 63484) (symbol 63480 . 63483) (INT 63476 . 63479) (punctuation 63474 . 63475) (symbol 63472 . 63474) (symbol 63460 . 63471) (open-paren 63459 . 63460) (symbol 63444 . 63458) (symbol 63432 . 63443) (symbol 63425 . 63431) (close-paren 63303 . 63304) (RETURN 63291 . 63297) (punctuation 63286 . 63287) (semantic-list 63250 . 63286) (WHILE 63244 . 63249) (semantic-list 63016 . 63241) (DO 63009 . 63011) (open-paren 62948 . 62949) (close-paren 62946 . 62947) (symbol 62943 . 62946) (symbol 62933 . 62942) (punctuation 62931 . 62932) (symbol 62929 . 62931) (symbol 62917 . 62928) (open-paren 62916 . 62917) (symbol 62895 . 62915) (symbol 62883 . 62894) (symbol 62876 . 62882) (close-paren 62873 . 62874) (punctuation 62871 . 62872) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 62844 . 62850) ("type" symbol "Lisp_Vectorlike" 62827 . 62842) ("a" symbol "a" 62824 . 62825)))) 62816 . 62871) (RETURN 62809 . 62815) (punctuation 62805 . 62806) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 62784 . 62800)))) 62775 . 62805) (open-paren 62771 . 62772) (close-paren 62769 . 62770) (symbol 62768 . 62769) (symbol 62756 . 62767) (open-paren 62755 . 62756) (symbol 62739 . 62754) (punctuation 62737 . 62738) (symbol 62717 . 62736) (STRUCT 62710 . 62716) (symbol 62703 . 62709) (close-paren 62700 . 62701) (RETURN 62653 . 62659) (open-paren 62649 . 62650) (close-paren 62647 . 62648) (symbol 62646 . 62647) (symbol 62634 . 62645) (open-paren 62633 . 62634) (symbol 62616 . 62632) (BOOL 62611 . 62615) (symbol 62604 . 62610) (punctuation 62601 . 62602) (close-paren 62583 . 62584) (open-paren 61822 . 61823) (symbol 61800 . 61819) (STRUCT 61793 . 61799) (close-paren 61790 . 61791) (punctuation 61788 . 61789) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 61765 . 61771) ("type" symbol "Lisp_Vectorlike" 61748 . 61763) ("a" symbol "a" 61745 . 61746)))) 61737 . 61788) (RETURN 61730 . 61736) (punctuation 61726 . 61727) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 61709 . 61721)))) 61700 . 61726) (open-paren 61696 . 61697) (close-paren 61694 . 61695) (symbol 61693 . 61694) (symbol 61681 . 61692) (open-paren 61680 . 61681) (symbol 61668 . 61679) (punctuation 61666 . 61667) (symbol 61650 . 61665) (STRUCT 61643 . 61649) (symbol 61636 . 61642) (close-paren 61633 . 61634) (RETURN 61590 . 61596) (open-paren 61586 . 61587) (close-paren 61584 . 61585) (symbol 61583 . 61584) (symbol 61571 . 61582) (open-paren 61570 . 61571) (symbol 61557 . 61569) (BOOL 61552 . 61556) (symbol 61545 . 61551) (punctuation 61542 . 61543) (close-paren 61524 . 61525) (open-paren 60477 . 60478) (symbol 60459 . 60474) (STRUCT 60452 . 60458) (punctuation 60449 . 60450) (close-paren 60448 . 60449) (number 60447 . 60448) (open-paren 60446 . 60447) (symbol 60434 . 60446) (INT 60430 . 60433) (CONST 60424 . 60429) (EXTERN 60417 . 60423) (punctuation 60414 . 60415) (close-paren 60413 . 60414) (number 60409 . 60410) (punctuation 60407 . 60408) (symbol 60387 . 60406) (punctuation 60381 . 60382) (number 60380 . 60381) (punctuation 60378 . 60379) (symbol 60358 . 60377) (punctuation 60352 . 60353) (number 60351 . 60352) (punctuation 60349 . 60350) (symbol 60329 . 60348) (punctuation 60323 . 60324) (number 60322 . 60323) (punctuation 60320 . 60321) (symbol 60300 . 60319) (open-paren 60294 . 60295) (symbol 60274 . 60291) (ENUM 60269 . 60273) (close-paren 59558 . 59559) (punctuation 59556 . 59557) (number 59552 . 59556) (punctuation 59550 . 59551) (symbol 59548 . 59549) (punctuation 59546 . 59547) (punctuation 59545 . 59546) (symbol 59543 . 59544) (punctuation 59541 . 59542) (punctuation 59540 . 59541) (number 59538 . 59539) (RETURN 59531 . 59537) (open-paren 59527 . 59528) (close-paren 59525 . 59526) (symbol 59524 . 59525) (symbol 59515 . 59523) (open-paren 59514 . 59515) (symbol 59501 . 59513) (BOOL 59496 . 59500) (symbol 59489 . 59495) (close-paren 58831 . 58832) (number 58819 . 58820) (punctuation 58734 . 58735) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 58722 . 58723)))) 58713 . 58734) (open-paren 58709 . 58710) (close-paren 58707 . 58708) (symbol 58701 . 58707) (symbol 58691 . 58700) (punctuation 58689 . 58690) (symbol 58688 . 58689) (punctuation 58687 . 58688) (VOID 58682 . 58686) (open-paren 58681 . 58682) (symbol 58672 . 58680) (VOID 58667 . 58671) (symbol 58660 . 58666) (punctuation 58532 . 58533) (close-paren 58531 . 58532) (number 58529 . 58530) (punctuation 58527 . 58528) (punctuation 58526 . 58527) (symbol 58514 . 58525) (punctuation 58512 . 58513) (punctuation 58511 . 58512) (number 58509 . 58510) (punctuation 58507 . 58508) (punctuation 58506 . 58507) (symbol 58500 . 58505) (punctuation 58498 . 58499) (symbol 58486 . 58497) (open-paren 58484 . 58485) (ENUM 58479 . 58483) (close-paren 58125 . 58126) (punctuation 58103 . 58104) (punctuation 58102 . 58103) (semantic-list 58095 . 58102) (symbol 58087 . 58094) (punctuation 58083 . 58084) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 58048 . 58049)))) 58039 . 58083) (open-paren 57895 . 57896) (close-paren 57893 . 57894) (symbol 57890 . 57893) (symbol 57878 . 57889) (punctuation 57876 . 57877) (symbol 57873 . 57876) (symbol 57863 . 57872) (punctuation 57861 . 57862) (symbol 57856 . 57861) (symbol 57844 . 57855) (open-paren 57843 . 57844) (symbol 57835 . 57842) (VOID 57830 . 57834) (symbol 57823 . 57829) (close-paren 57820 . 57821) (punctuation 57798 . 57799) (punctuation 57797 . 57798) (semantic-list 57790 . 57797) (symbol 57782 . 57789) (punctuation 57778 . 57779) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 57746 . 57747)))) 57737 . 57778) (open-paren 57733 . 57734) (close-paren 57731 . 57732) (symbol 57728 . 57731) (symbol 57716 . 57727) (punctuation 57714 . 57715) (symbol 57711 . 57714) (symbol 57701 . 57710) (punctuation 57699 . 57700) (symbol 57694 . 57699) (symbol 57682 . 57693) (open-paren 57681 . 57682) (symbol 57676 . 57680) (VOID 57671 . 57675) (symbol 57664 . 57670) (close-paren 57661 . 57662) (punctuation 57645 . 57646) (punctuation 57644 . 57645) (semantic-list 57637 . 57644) (symbol 57629 . 57636) (punctuation 57627 . 57628) (RETURN 57620 . 57626) (punctuation 57616 . 57617) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 57580 . 57581)))) 57571 . 57616) (open-paren 57567 . 57568) (close-paren 57565 . 57566) (symbol 57562 . 57565) (symbol 57552 . 57561) (punctuation 57550 . 57551) (symbol 57545 . 57550) (symbol 57533 . 57544) (open-paren 57532 . 57533) (symbol 57522 . 57531) (punctuation 57520 . 57521) (symbol 57508 . 57519) (symbol 57501 . 57507) (close-paren 57498 . 57499) (punctuation 57482 . 57483) (punctuation 57481 . 57482) (semantic-list 57474 . 57481) (symbol 57466 . 57473) (RETURN 57459 . 57465) (punctuation 57455 . 57456) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 57420 . 57421)))) 57411 . 57455) (open-paren 57407 . 57408) (close-paren 57405 . 57406) (symbol 57402 . 57405) (symbol 57392 . 57401) (punctuation 57390 . 57391) (symbol 57385 . 57390) (symbol 57373 . 57384) (open-paren 57372 . 57373) (symbol 57367 . 57371) (symbol 57355 . 57366) (symbol 57348 . 57354) (close-paren 57294 . 57295) (punctuation 57292 . 57293) (semantic-list 57254 . 57292) (punctuation 57252 . 57253) (punctuation 57250 . 57251) (punctuation 57249 . 57250) (symbol 57244 . 57248) (punctuation 57243 . 57244) (ELSE 57234 . 57238) (punctuation 57230 . 57231) (semantic-list 57199 . 57230) (punctuation 57197 . 57198) (punctuation 57196 . 57197) (number 57194 . 57195) (punctuation 57192 . 57193) (punctuation 57191 . 57192) (symbol 57186 . 57190) (punctuation 57185 . 57186) (semantic-list 57177 . 57180) (IF 57174 . 57176) (punctuation 57170 . 57171) (punctuation 57112 . 57113) (punctuation 57110 . 57111) (symbol 57101 . 57105) (punctuation 57100 . 57101) (CHAR 57095 . 57099) (UNSIGNED 57086 . 57094) (punctuation 57081 . 57082) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "i" 57056 . 57057)))) 57047 . 57081) (open-paren 57023 . 57024) (close-paren 57021 . 57022) (symbol 57020 . 57021) (BOOL 57015 . 57019) (punctuation 57013 . 57014) (symbol 57012 . 57013) (symbol 57002 . 57011) (punctuation 57000 . 57001) (symbol 56999 . 57000) (symbol 56987 . 56998) (open-paren 56986 . 56987) (symbol 56970 . 56985) (VOID 56965 . 56969) (symbol 56958 . 56964) (close-paren 56925 . 56926) (punctuation 56917 . 56918) (symbol 56914 . 56916) (punctuation 56912 . 56913) (semantic-list 56905 . 56911) (symbol 56886 . 56904) (RETURN 56879 . 56885) (open-paren 56875 . 56876) (close-paren 56873 . 56874) (symbol 56872 . 56873) (symbol 56862 . 56871) (punctuation 56860 . 56861) (symbol 56859 . 56860) (symbol 56847 . 56858) (open-paren 56846 . 56847) (symbol 56830 . 56845) (symbol 56818 . 56829) (symbol 56811 . 56817) (close-paren 56808 . 56809) (punctuation 56806 . 56807) (semantic-list 56700 . 56806) (punctuation 56698 . 56699) (punctuation 56697 . 56698) (RETURN 56690 . 56696) (punctuation 56686 . 56687) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "i" 56661 . 56662)))) 56652 . 56686) (open-paren 56628 . 56629) (close-paren 56626 . 56627) (symbol 56625 . 56626) (symbol 56615 . 56624) (punctuation 56613 . 56614) (symbol 56612 . 56613) (symbol 56600 . 56611) (open-paren 56599 . 56600) (symbol 56580 . 56598) (BOOL 56575 . 56579) (symbol 56568 . 56574) (close-paren 56529 . 56530) (semantic-list 56489 . 56506) (RETURN 56482 . 56488) (open-paren 56478 . 56479) (close-paren 56476 . 56477) (symbol 56475 . 56476) (symbol 56463 . 56474) (open-paren 56462 . 56463) (symbol 56439 . 56461) (punctuation 56437 . 56438) (CHAR 56432 . 56436) (UNSIGNED 56423 . 56431) (symbol 56416 . 56422) (close-paren 56413 . 56414) (punctuation 56406 . 56407) (punctuation 56405 . 56406) (semantic-list 56402 . 56405) (symbol 56389 . 56401) (RETURN 56382 . 56388) (open-paren 56378 . 56379) (close-paren 56376 . 56377) (symbol 56375 . 56376) (symbol 56363 . 56374) (open-paren 56362 . 56363) (symbol 56345 . 56361) (punctuation 56343 . 56344) (symbol 56333 . 56342) (symbol 56326 . 56332) (close-paren 56323 . 56324) (RETURN 56310 . 56316) (open-paren 56240 . 56241) (close-paren 56238 . 56239) (symbol 56237 . 56238) (symbol 56225 . 56236) (open-paren 56224 . 56225) (symbol 56207 . 56223) (symbol 56197 . 56206) (symbol 56190 . 56196) (close-paren 56187 . 56188) (punctuation 56185 . 56186) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 56161 . 56167) ("type" symbol "Lisp_Vectorlike" 56144 . 56159) ("a" symbol "a" 56141 . 56142)))) 56133 . 56185) (RETURN 56126 . 56132) (punctuation 56122 . 56123) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 56104 . 56117)))) 56095 . 56122) (open-paren 56091 . 56092) (close-paren 56089 . 56090) (symbol 56088 . 56089) (symbol 56076 . 56087) (open-paren 56075 . 56076) (symbol 56062 . 56074) (punctuation 56060 . 56061) (symbol 56043 . 56059) (STRUCT 56036 . 56042) (symbol 56029 . 56035) (close-paren 56026 . 56027) (semantic-list 56001 . 56004) (open-paren 55971 . 55972) (close-paren 55969 . 55970) (symbol 55968 . 55969) (symbol 55956 . 55967) (open-paren 55955 . 55956) (symbol 55937 . 55954) (VOID 55932 . 55936) (symbol 55925 . 55931) (close-paren 55922 . 55923) (RETURN 55878 . 55884) (open-paren 55874 . 55875) (close-paren 55872 . 55873) (symbol 55871 . 55872) (symbol 55859 . 55870) (open-paren 55858 . 55859) (symbol 55844 . 55857) (BOOL 55839 . 55843) (symbol 55832 . 55838) (close-paren 55829 . 55830) (punctuation 55800 . 55801) (semantic-list 55761 . 55799) (RETURN 55754 . 55760) (open-paren 55675 . 55676) (close-paren 55673 . 55674) (symbol 55669 . 55673) (symbol 55659 . 55668) (open-paren 55658 . 55659) (symbol 55640 . 55657) (symbol 55630 . 55639) (symbol 55623 . 55629) (close-paren 55620 . 55621) (punctuation 55598 . 55599) (semantic-list 55566 . 55597) (RETURN 55559 . 55565) (open-paren 55480 . 55481) (close-paren 55478 . 55479) (symbol 55474 . 55478) (symbol 55464 . 55473) (open-paren 55463 . 55464) (symbol 55445 . 55462) (symbol 55435 . 55444) (symbol 55428 . 55434) (punctuation 55349 . 55350) (close-paren 55348 . 55349) (semantic-list 55332 . 55345) (SIZEOF 55325 . 55331) (punctuation 55323 . 55324) (symbol 55313 . 55322) (punctuation 55307 . 55308) (semantic-list 55276 . 55307) (symbol 55267 . 55275) (punctuation 55265 . 55266) (symbol 55248 . 55264) (punctuation 55242 . 55243) (semantic-list 55212 . 55242) (symbol 55203 . 55211) (punctuation 55201 . 55202) (symbol 55189 . 55200) (open-paren 55183 . 55184) (ENUM 55176 . 55180) (punctuation 54550 . 54551) (close-paren 54532 . 54533) (open-paren 54059 . 54060) (symbol 54040 . 54056) (STRUCT 54033 . 54039) (close-paren 53955 . 53956) (semantic-list 53765 . 53954) (ELSE 53756 . 53760) (RETURN 53740 . 53746) (semantic-list 53716 . 53735) (IF 53713 . 53715) (open-paren 53709 . 53710) (close-paren 53707 . 53708) (symbol 53703 . 53707) (INT 53699 . 53702) (punctuation 53697 . 53698) (symbol 53696 . 53697) (symbol 53684 . 53695) (open-paren 53683 . 53684) (symbol 53669 . 53682) (BOOL 53664 . 53668) (symbol 53657 . 53663) (close-paren 53599 . 53600) (punctuation 53597 . 53598) (semantic-list 53486 . 53597) (RETURN 53479 . 53485) (open-paren 53370 . 53371) (close-paren 53368 . 53369) (symbol 53364 . 53368) (symbol 53354 . 53363) (ENUM 53349 . 53353) (punctuation 53347 . 53348) (symbol 53346 . 53347) (punctuation 53345 . 53346) (symbol 53327 . 53344) (UNION 53321 . 53326) (CONST 53315 . 53320) (open-paren 53314 . 53315) (symbol 53295 . 53313) (BOOL 53290 . 53294) (symbol 53283 . 53289) (close-paren 53234 . 53235) (punctuation 53232 . 53233) (semantic-list 53113 . 53232) (RETURN 53106 . 53112) (open-paren 53067 . 53068) (close-paren 53065 . 53066) (symbol 53064 . 53065) (punctuation 53063 . 53064) (symbol 53051 . 53062) (STRUCT 53044 . 53050) (CONST 53038 . 53043) (open-paren 53037 . 53038) (symbol 53019 . 53036) (symbol 53009 . 53018) (ENUM 53004 . 53008) (symbol 52997 . 53003) (close-paren 52917 . 52918) (semantic-list 52898 . 52901) (open-paren 52874 . 52875) (close-paren 52872 . 52873) (symbol 52871 . 52872) (symbol 52859 . 52870) (open-paren 52858 . 52859) (symbol 52845 . 52857) (VOID 52840 . 52844) (symbol 52833 . 52839) (close-paren 52830 . 52831) (punctuation 52828 . 52829) (semantic-list 52797 . 52828) (punctuation 52795 . 52796) (punctuation 52793 . 52794) (punctuation 52792 . 52793) (semantic-list 52788 . 52791) (symbol 52776 . 52787) (RETURN 52769 . 52775) (open-paren 52765 . 52766) (close-paren 52763 . 52764) (symbol 52762 . 52763) (symbol 52750 . 52761) (open-paren 52749 . 52750) (symbol 52741 . 52748) (BOOL 52736 . 52740) (symbol 52729 . 52735) (close-paren 52726 . 52727) (semantic-list 52695 . 52699) (symbol 52689 . 52694) (RETURN 52682 . 52688) (open-paren 52678 . 52679) (close-paren 52676 . 52677) (symbol 52674 . 52676) (symbol 52662 . 52673) (open-paren 52661 . 52662) (symbol 52654 . 52660) (symbol 52644 . 52653) (symbol 52637 . 52643) (close-paren 52634 . 52635) (punctuation 52616 . 52617) (punctuation 52614 . 52615) (symbol 52609 . 52613) (punctuation 52608 . 52609) (symbol 52602 . 52608) (punctuation 52601 . 52602) (punctuation 52600 . 52601) (semantic-list 52593 . 52600) (symbol 52585 . 52592) (RETURN 52578 . 52584) (open-paren 52506 . 52507) (close-paren 52504 . 52505) (symbol 52499 . 52504) (symbol 52487 . 52498) (open-paren 52486 . 52487) (symbol 52477 . 52485) (symbol 52467 . 52476) (symbol 52460 . 52466) (close-paren 52457 . 52458) (RETURN 52444 . 52450) (open-paren 52368 . 52369) (close-paren 52366 . 52367) (symbol 52361 . 52366) (symbol 52349 . 52360) (open-paren 52348 . 52349) (symbol 52342 . 52347) (symbol 52332 . 52341) (symbol 52325 . 52331) (close-paren 52322 . 52323) (punctuation 52320 . 52321) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 52301 . 52307) ("type" symbol "Lisp_Vectorlike" 52284 . 52299) ("a" symbol "a" 52281 . 52282)))) 52273 . 52320) (RETURN 52266 . 52272) (punctuation 52262 . 52263) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 52246 . 52257)))) 52237 . 52262) (open-paren 52233 . 52234) (close-paren 52231 . 52232) (symbol 52230 . 52231) (symbol 52218 . 52229) (open-paren 52217 . 52218) (symbol 52209 . 52216) (punctuation 52207 . 52208) (symbol 52195 . 52206) (STRUCT 52188 . 52194) (symbol 52181 . 52187) (close-paren 52178 . 52179) (RETURN 52147 . 52153) (open-paren 52143 . 52144) (close-paren 52141 . 52142) (symbol 52140 . 52141) (symbol 52128 . 52139) (open-paren 52127 . 52128) (close-paren 52125 . 52126) (symbol 52114 . 52125) (open-paren 52113 . 52114) (BOOL 52108 . 52112) (symbol 52101 . 52107) (punctuation 52098 . 52099) (close-paren 52080 . 52081) (open-paren 51991 . 51992) (symbol 51977 . 51988) (STRUCT 51970 . 51976) (close-paren 51894 . 51895) (punctuation 51858 . 51859) (punctuation 51857 . 51858) (semantic-list 51816 . 51856) (open-paren 51793 . 51794) (close-paren 51791 . 51792) (symbol 51785 . 51791) (symbol 51773 . 51784) (open-paren 51772 . 51773) (symbol 51748 . 51771) (VOID 51743 . 51747) (symbol 51736 . 51742) (close-paren 51733 . 51734) (punctuation 51716 . 51717) (symbol 51715 . 51716) (punctuation 51714 . 51715) (symbol 51713 . 51714) (punctuation 51712 . 51713) (punctuation 51711 . 51712) (semantic-list 51703 . 51711) (symbol 51695 . 51702) (punctuation 51691 . 51692) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 51583 . 51599)))) 51574 . 51691) (open-paren 51465 . 51466) (close-paren 51463 . 51464) (symbol 51456 . 51463) (symbol 51446 . 51455) (punctuation 51444 . 51445) (symbol 51438 . 51444) (symbol 51426 . 51437) (open-paren 51425 . 51426) (symbol 51408 . 51424) (VOID 51403 . 51407) (symbol 51396 . 51402) (close-paren 51394 . 51395) (semantic-list 51383 . 51391) (RETURN 51354 . 51360) (open-paren 51350 . 51351) (close-paren 51348 . 51349) (symbol 51342 . 51348) (symbol 51330 . 51341) (open-paren 51329 . 51330) (symbol 51322 . 51328) (symbol 51312 . 51321) (symbol 51305 . 51311) (close-paren 51302 . 51303) (RETURN 51287 . 51293) (punctuation 51241 . 51242) (symbol 51240 . 51241) (punctuation 51239 . 51240) (symbol 51238 . 51239) (punctuation 51237 . 51238) (punctuation 51236 . 51237) (symbol 51235 . 51236) (punctuation 51233 . 51234) (symbol 51228 . 51232) (punctuation 51227 . 51228) (symbol 51226 . 51227) (punctuation 51225 . 51226) (symbol 51224 . 51225) (punctuation 51223 . 51224) (punctuation 51222 . 51223) (symbol 51221 . 51222) (punctuation 51219 . 51220) (number 51217 . 51218) (punctuation 51215 . 51216) (symbol 51205 . 51214) (punctuation 51204 . 51205) (symbol 51203 . 51204) (punctuation 51202 . 51203) (symbol 51201 . 51202) (punctuation 51200 . 51201) (punctuation 51199 . 51200) (symbol 51198 . 51199) (punctuation 51196 . 51197) (symbol 51189 . 51195) (symbol 51179 . 51188) (open-paren 51101 . 51102) (close-paren 51099 . 51100) (symbol 51098 . 51099) (punctuation 51097 . 51098) (symbol 51085 . 51096) (STRUCT 51078 . 51084) (open-paren 51077 . 51078) (symbol 51064 . 51076) (symbol 51054 . 51063) (symbol 51047 . 51053) (close-paren 50954 . 50955) (RETURN 50939 . 50945) (open-paren 50861 . 50862) (close-paren 50859 . 50860) (symbol 50853 . 50859) (symbol 50841 . 50852) (open-paren 50840 . 50841) (symbol 50833 . 50839) (symbol 50823 . 50832) (symbol 50816 . 50822) (close-paren 50814 . 50815) (punctuation 50812 . 50813) (NEW 50809 . 50812) (punctuation 50807 . 50808) (open-paren 50781 . 50782) (close-paren 50779 . 50780) (NEW 50776 . 50779) (CHAR 50771 . 50775) (UNSIGNED 50762 . 50770) (punctuation 50760 . 50761) (symbol 50755 . 50760) (symbol 50745 . 50754) (punctuation 50743 . 50744) (symbol 50737 . 50743) (symbol 50725 . 50736) (open-paren 50724 . 50725) (symbol 50719 . 50723) (VOID 50714 . 50718) (symbol 50707 . 50713) (close-paren 50705 . 50706) (punctuation 50703 . 50704) (RETURN 50675 . 50681) (open-paren 50671 . 50672) (close-paren 50669 . 50670) (symbol 50664 . 50669) (symbol 50654 . 50663) (punctuation 50652 . 50653) (symbol 50646 . 50652) (symbol 50634 . 50645) (open-paren 50633 . 50634) (symbol 50628 . 50632) (CHAR 50623 . 50627) (UNSIGNED 50614 . 50622) (symbol 50607 . 50613) (close-paren 50605 . 50606) (semantic-list 50580 . 50588) (RETURN 50573 . 50579) (open-paren 50527 . 50528) (close-paren 50525 . 50526) (symbol 50519 . 50525) (symbol 50507 . 50518) (open-paren 50506 . 50507) (symbol 50499 . 50505) (punctuation 50497 . 50498) (CHAR 50492 . 50496) (symbol 50485 . 50491) (close-paren 50483 . 50484) (punctuation 50476 . 50477) (symbol 50475 . 50476) (punctuation 50474 . 50475) (symbol 50473 . 50474) (punctuation 50472 . 50473) (punctuation 50471 . 50472) (semantic-list 50463 . 50471) (symbol 50455 . 50462) (RETURN 50448 . 50454) (open-paren 50444 . 50445) (close-paren 50442 . 50443) (symbol 50436 . 50442) (symbol 50424 . 50435) (open-paren 50423 . 50424) (symbol 50417 . 50422) (punctuation 50415 . 50416) (CHAR 50410 . 50414) (UNSIGNED 50401 . 50409) (symbol 50394 . 50400) (close-paren 48479 . 48480) (punctuation 48467 . 48468) (symbol 48466 . 48467) (punctuation 48465 . 48466) (symbol 48464 . 48465) (punctuation 48463 . 48464) (punctuation 48462 . 48463) (semantic-list 48457 . 48462) (symbol 48449 . 48456) (punctuation 48447 . 48448) (punctuation 48446 . 48447) (number 48444 . 48445) (RETURN 48437 . 48443) (open-paren 48433 . 48434) (close-paren 48431 . 48432) (symbol 48428 . 48431) (symbol 48416 . 48427) (open-paren 48415 . 48416) (symbol 48398 . 48414) (BOOL 48393 . 48397) (symbol 48386 . 48392) (close-paren 48341 . 48342) (punctuation 48339 . 48340) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" STRUCT "struct" 48320 . 48326) ("type" symbol "Lisp_String" 48307 . 48318) ("a" symbol "a" 48304 . 48305)))) 48296 . 48339) (RETURN 48289 . 48295) (punctuation 48285 . 48286) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 48273 . 48280)))) 48264 . 48285) (open-paren 48260 . 48261) (close-paren 48258 . 48259) (symbol 48257 . 48258) (symbol 48245 . 48256) (open-paren 48244 . 48245) (symbol 48236 . 48243) (punctuation 48234 . 48235) (symbol 48222 . 48233) (STRUCT 48215 . 48221) (symbol 48208 . 48214) (close-paren 48205 . 48206) (semantic-list 48186 . 48189) (open-paren 48162 . 48163) (close-paren 48160 . 48161) (symbol 48159 . 48160) (symbol 48147 . 48158) (open-paren 48146 . 48147) (symbol 48133 . 48145) (VOID 48128 . 48132) (symbol 48121 . 48127) (close-paren 48118 . 48119) (RETURN 48085 . 48091) (open-paren 48081 . 48082) (close-paren 48079 . 48080) (symbol 48078 . 48079) (symbol 48066 . 48077) (open-paren 48065 . 48066) (symbol 48057 . 48064) (BOOL 48052 . 48056) (symbol 48045 . 48051) (punctuation 48042 . 48043) (close-paren 48041 . 48042) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 48022 . 48028)))) 48011 . 48041) (open-paren 48010 . 48011) (symbol 48003 . 48009) (punctuation 48001 . 48002) (close-paren 48000 . 48001) (semantic-list "(GCALIGNMENT)" 47970 . 47992) (symbol "alignas" 47970 . 47992) (CHAR "char" 47970 . 47992) (semantic-list "(GCALIGNMENT)" 47970 . 47992) (symbol "alignas" 47970 . 47992) (CHAR "char" 47970 . 47992) (open-paren 47667 . 47668) (symbol 47655 . 47666) (STRUCT 47648 . 47654) (close-paren 47569 . 47570) (punctuation 47561 . 47562) (semantic-list 47557 . 47560) (symbol 47552 . 47556) (punctuation 47550 . 47551) (semantic-list 47546 . 47549) (symbol 47540 . 47545) (RETURN 47533 . 47539) (open-paren 47529 . 47530) (close-paren 47527 . 47528) (symbol 47526 . 47527) (symbol 47514 . 47525) (open-paren 47513 . 47514) (symbol 47504 . 47512) (symbol 47492 . 47503) (symbol 47485 . 47491) (close-paren 47483 . 47484) (punctuation 47475 . 47476) (semantic-list 47471 . 47474) (symbol 47466 . 47470) (punctuation 47464 . 47465) (semantic-list 47460 . 47463) (symbol 47454 . 47459) (RETURN 47447 . 47453) (open-paren 47443 . 47444) (close-paren 47441 . 47442) (symbol 47440 . 47441) (symbol 47428 . 47439) (open-paren 47427 . 47428) (symbol 47418 . 47426) (symbol 47406 . 47417) (symbol 47399 . 47405) (close-paren 47331 . 47332) (RETURN 47318 . 47324) (semantic-list 47267 . 47278) (IF 47264 . 47266) (RETURN 47245 . 47251) (semantic-list 47229 . 47240) (IF 47226 . 47228) (open-paren 47222 . 47223) (close-paren 47220 . 47221) (symbol 47219 . 47220) (symbol 47207 . 47218) (open-paren 47206 . 47207) (symbol 47202 . 47205) (symbol 47190 . 47201) (symbol 47183 . 47189) (close-paren 47181 . 47182) (RETURN 47168 . 47174) (semantic-list 47117 . 47128) (IF 47114 . 47116) (RETURN 47095 . 47101) (semantic-list 47079 . 47090) (IF 47076 . 47078) (open-paren 47072 . 47073) (close-paren 47070 . 47071) (symbol 47069 . 47070) (symbol 47057 . 47068) (open-paren 47056 . 47057) (symbol 47052 . 47055) (symbol 47040 . 47051) (symbol 47033 . 47039) (close-paren 46965 . 46966) (punctuation 46960 . 46961) (semantic-list 46956 . 46959) (symbol 46946 . 46955) (punctuation 46945 . 46946) (open-paren 46941 . 46942) (close-paren 46939 . 46940) (symbol 46938 . 46939) (symbol 46926 . 46937) (punctuation 46924 . 46925) (symbol 46923 . 46924) (symbol 46911 . 46922) (open-paren 46910 . 46911) (symbol 46902 . 46909) (VOID 46897 . 46901) (symbol 46890 . 46896) (close-paren 46888 . 46889) (punctuation 46883 . 46884) (semantic-list 46879 . 46882) (symbol 46869 . 46878) (punctuation 46868 . 46869) (open-paren 46864 . 46865) (close-paren 46862 . 46863) (symbol 46861 . 46862) (symbol 46849 . 46860) (punctuation 46847 . 46848) (symbol 46846 . 46847) (symbol 46834 . 46845) (open-paren 46833 . 46834) (symbol 46825 . 46832) (VOID 46820 . 46824) (symbol 46813 . 46819) (close-paren 46642 . 46643) (punctuation "." 46625 . 46640) (symbol "u" 46625 . 46640) (punctuation "." 46625 . 46640) (symbol "s" 46625 . 46640) (punctuation "." 46625 . 46640) (symbol "u" 46625 . 46640) (punctuation ">" 46625 . 46640) (punctuation "-" 46625 . 46640) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 46638 . 46639)))) 46625 . 46640) (symbol "XCONS" 46625 . 46640) (RETURN 46618 . 46624) (open-paren 46614 . 46615) (close-paren 46612 . 46613) (symbol 46611 . 46612) (symbol 46599 . 46610) (open-paren 46598 . 46599) (close-paren 46596 . 46597) (symbol 46592 . 46596) (open-paren 46591 . 46592) (symbol 46579 . 46590) (symbol 46572 . 46578) (close-paren 46569 . 46570) (punctuation "." 46552 . 46567) (symbol "s" 46552 . 46567) (punctuation "." 46552 . 46567) (symbol "u" 46552 . 46567) (punctuation ">" 46552 . 46567) (punctuation "-" 46552 . 46567) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 46565 . 46566)))) 46552 . 46567) (symbol "XCONS" 46552 . 46567) (RETURN 46545 . 46551) (open-paren 46541 . 46542) (close-paren 46539 . 46540) (symbol 46538 . 46539) (symbol 46526 . 46537) (open-paren 46525 . 46526) (close-paren 46523 . 46524) (symbol 46519 . 46523) (open-paren 46518 . 46519) (symbol 46506 . 46517) (symbol 46499 . 46505) (close-paren 46460 . 46461) (punctuation 46454 . 46455) (symbol 46453 . 46454) (punctuation 46452 . 46453) (symbol 46451 . 46452) (punctuation 46450 . 46451) (symbol 46449 . 46450) (punctuation 46448 . 46449) (punctuation 46447 . 46448) (semantic-list 46444 . 46447) (symbol 46438 . 46443) (punctuation 46437 . 46438) (RETURN 46430 . 46436) (open-paren 46426 . 46427) (close-paren 46424 . 46425) (symbol 46423 . 46424) (symbol 46411 . 46422) (open-paren 46410 . 46411) (symbol 46400 . 46409) (punctuation 46398 . 46399) (symbol 46386 . 46397) (symbol 46379 . 46385) (close-paren 46377 . 46378) (punctuation 46371 . 46372) (symbol 46370 . 46371) (punctuation 46369 . 46370) (symbol 46368 . 46369) (punctuation 46367 . 46368) (punctuation 46366 . 46367) (semantic-list 46363 . 46366) (symbol 46357 . 46362) (punctuation 46356 . 46357) (RETURN 46349 . 46355) (open-paren 46345 . 46346) (close-paren 46343 . 46344) (symbol 46342 . 46343) (symbol 46330 . 46341) (open-paren 46329 . 46330) (symbol 46319 . 46328) (punctuation 46317 . 46318) (symbol 46305 . 46316) (symbol 46298 . 46304) (close-paren 45838 . 45839) (punctuation 45836 . 45837) (semantic-list #("(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 0 1 (macros (("a" symbol "a" 45834 . 45835)))) 45820 . 45836) (RETURN 45813 . 45819) (open-paren 45809 . 45810) (close-paren 45807 . 45808) (symbol 45806 . 45807) (symbol 45794 . 45805) (open-paren 45793 . 45794) (close-paren 45791 . 45792) (symbol 45786 . 45791) (open-paren 45785 . 45786) (punctuation 45783 . 45784) (symbol 45773 . 45782) (STRUCT 45766 . 45772) (symbol 45759 . 45765) (close-paren 45756 . 45757) (semantic-list 45739 . 45742) (open-paren 45717 . 45718) (close-paren 45715 . 45716) (symbol 45714 . 45715) (symbol 45702 . 45713) (open-paren 45701 . 45702) (symbol 45690 . 45700) (VOID 45685 . 45689) (symbol 45678 . 45684) (close-paren 45675 . 45676) (RETURN 45650 . 45656) (open-paren 45646 . 45647) (close-paren 45644 . 45645) (symbol 45643 . 45644) (symbol 45631 . 45642) (open-paren 45630 . 45631) (close-paren 45628 . 45629) (symbol 45623 . 45628) (open-paren 45622 . 45623) (BOOL 45617 . 45621) (symbol 45610 . 45616) (close-paren 45607 . 45608) (RETURN 45583 . 45589) (open-paren 45579 . 45580) (close-paren 45577 . 45578) (symbol 45576 . 45577) (symbol 45564 . 45575) (open-paren 45563 . 45564) (close-paren 45561 . 45562) (symbol 45557 . 45561) (open-paren 45556 . 45557) (BOOL 45551 . 45555) (symbol 45544 . 45550) (punctuation 45541 . 45542) (close-paren 45540 . 45541) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 45523 . 45529)))) 45512 . 45540) (open-paren 45511 . 45512) (symbol 45504 . 45510) (punctuation 45502 . 45503) (close-paren 45501 . 45502) (semantic-list "(GCALIGNMENT)" 45471 . 45493) (symbol "alignas" 45471 . 45493) (CHAR "char" 45471 . 45493) (semantic-list "(GCALIGNMENT)" 45471 . 45493) (symbol "alignas" 45471 . 45493) (CHAR "char" 45471 . 45493) (open-paren 45215 . 45216) (symbol 45205 . 45214) (STRUCT 45198 . 45204) (close-paren 45120 . 45121) (RETURN 45110 . 45116) (punctuation 45106 . 45107) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 45071 . 45078)))) 45062 . 45106) (open-paren 45007 . 45008) (close-paren 45005 . 45006) (symbol 45004 . 45005) (punctuation 45003 . 45004) (VOID 44998 . 45002) (open-paren 44997 . 44998) (symbol 44976 . 44996) (symbol 44964 . 44975) (symbol 44957 . 44963) (close-paren 44954 . 44955) (RETURN 44944 . 44950) (open-paren 44898 . 44899) (close-paren 44896 . 44897) (symbol 44895 . 44896) (punctuation 44894 . 44895) (VOID 44889 . 44893) (open-paren 44888 . 44889) (symbol 44860 . 44887) (symbol 44848 . 44859) (symbol 44841 . 44847) (close-paren 44838 . 44839) (punctuation 44836 . 44837) (semantic-list #("((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 0 1 (macros (("ctype" CHAR "char" 44831 . 44835) ("type" symbol "Lisp_Int0" 44820 . 44829) ("a" symbol "a" 44817 . 44818)))) 44809 . 44836) (RETURN 44802 . 44808) (open-paren 44798 . 44799) (close-paren 44796 . 44797) (symbol 44795 . 44796) (symbol 44783 . 44794) (open-paren 44782 . 44783) (symbol 44771 . 44781) (punctuation 44769 . 44770) (VOID 44764 . 44768) (symbol 44757 . 44763) (close-paren 42670 . 42671) (RETURN 42628 . 42634) (open-paren 42624 . 42625) (close-paren 42622 . 42623) (VOID 42618 . 42622) (open-paren 42617 . 42618) (symbol 42605 . 42616) (symbol 42593 . 42604) (symbol 42586 . 42592) (close-paren 42026 . 42027) (RETURN 42016 . 42022) (punctuation 42012 . 42013) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "TAGGEDP" 41961 . 41968)))) 41952 . 42012) (open-paren 41909 . 41910) (close-paren 41907 . 41908) (symbol 41903 . 41907) (symbol 41893 . 41902) (ENUM 41888 . 41892) (punctuation 41886 . 41887) (symbol 41883 . 41886) (punctuation 41882 . 41883) (VOID 41877 . 41881) (open-paren 41876 . 41877) (symbol 41862 . 41875) (symbol 41850 . 41861) (symbol 41843 . 41849) (close-paren 41782 . 41783) (punctuation 41773 . 41774) (symbol 41769 . 41772) (punctuation 41767 . 41768) (symbol 41761 . 41766) (punctuation 41759 . 41760) (punctuation 41758 . 41759) (symbol 41754 . 41757) (punctuation 41752 . 41753) (symbol 41746 . 41751) (punctuation 41744 . 41745) (symbol 41738 . 41743) (punctuation 41736 . 41737) (symbol 41732 . 41735) (RETURN 41725 . 41731) (open-paren 41721 . 41722) (close-paren 41719 . 41720) (symbol 41714 . 41719) (symbol 41705 . 41713) (punctuation 41703 . 41704) (symbol 41700 . 41703) (symbol 41691 . 41699) (punctuation 41689 . 41690) (symbol 41684 . 41689) (symbol 41675 . 41683) (open-paren 41674 . 41675) (symbol 41659 . 41673) (symbol 41650 . 41658) (symbol 41643 . 41649) (close-paren 41640 . 41641) (punctuation 41638 . 41639) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 41636 . 41637) ("x" symbol "x" 41633 . 41634)))) 41622 . 41638) (RETURN 41615 . 41621) (open-paren 41611 . 41612) (close-paren 41609 . 41610) (symbol 41608 . 41609) (symbol 41596 . 41607) (punctuation 41594 . 41595) (symbol 41593 . 41594) (symbol 41581 . 41592) (open-paren 41580 . 41581) (close-paren 41578 . 41579) (symbol 41576 . 41578) (open-paren 41575 . 41576) (BOOL 41570 . 41574) (symbol 41563 . 41569) (close-paren 41508 . 41509) (semantic-list 41488 . 41505) (punctuation 41486 . 41487) (punctuation 41477 . 41478) (semantic-list 41473 . 41476) (symbol 41461 . 41472) (punctuation 41459 . 41460) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 41447 . 41458) (RETURN 41440 . 41446) (punctuation 41406 . 41407) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 41370 . 41371)))) 41361 . 41406) (open-paren 41357 . 41358) (close-paren 41355 . 41356) (symbol 41354 . 41355) (symbol 41344 . 41353) (open-paren 41343 . 41344) (symbol 41325 . 41342) (symbol 41313 . 41324) (symbol 41306 . 41312) (close-paren 41222 . 41223) (RETURN 41197 . 41203) (open-paren 41193 . 41194) (close-paren 41191 . 41192) (symbol 41190 . 41191) (symbol 41178 . 41189) (open-paren 41177 . 41178) (close-paren 41175 . 41176) (symbol 41170 . 41175) (open-paren 41169 . 41170) (symbol 41159 . 41168) (symbol 41152 . 41158) (close-paren 41091 . 41092) (RETURN 41066 . 41072) (punctuation 41062 . 41063) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 41050 . 41057)))) 41041 . 41062) (open-paren 41037 . 41038) (close-paren 41035 . 41036) (symbol 41034 . 41035) (symbol 41022 . 41033) (open-paren 41021 . 41022) (symbol 41012 . 41020) (symbol 41001 . 41011) (symbol 40994 . 41000) (close-paren 40992 . 40993) (punctuation 40990 . 40991) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 40983 . 40990) (punctuation 40981 . 40982) (symbol 40979 . 40980) (punctuation 40977 . 40978) (semantic-list "(GCTYPEBITS - 1)" 40965 . 40976) (punctuation 40963 . 40964) (punctuation 40962 . 40963) (symbol 40960 . 40961) (punctuation 40958 . 40959) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 40946 . 40957) (RETURN 40939 . 40945) (open-paren 40909 . 40910) (close-paren 40907 . 40908) (symbol 40906 . 40907) (symbol 40894 . 40905) (open-paren 40893 . 40894) (symbol 40880 . 40892) (symbol 40869 . 40879) (symbol 40862 . 40868) (close-paren 40786 . 40787) (RETURN 40762 . 40768) (punctuation 40758 . 40759) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FIXNUMP" 40746 . 40753)))) 40737 . 40758) (open-paren 40733 . 40734) (close-paren 40731 . 40732) (symbol 40730 . 40731) (symbol 40718 . 40729) (open-paren 40717 . 40718) (symbol 40709 . 40716) (symbol 40699 . 40708) (symbol 40692 . 40698) (close-paren 40689 . 40690) (punctuation 40687 . 40688) (semantic-list #("(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 0 1 (macros (("x" symbol "x" 40685 . 40686)))) 40669 . 40687) (RETURN 40662 . 40668) (open-paren 40658 . 40659) (close-paren 40656 . 40657) (symbol 40655 . 40656) (symbol 40643 . 40654) (open-paren 40642 . 40643) (close-paren 40640 . 40641) (symbol 40633 . 40640) (open-paren 40632 . 40633) (BOOL 40627 . 40631) (symbol 40620 . 40626) (close-paren 40589 . 40590) (RETURN 40573 . 40579) (punctuation 40560 . 40561) (punctuation 40559 . 40560) (symbol 40554 . 40558) (punctuation 40552 . 40553) (punctuation 40551 . 40552) (symbol 40549 . 40550) (ELSE 40540 . 40544) (semantic-list 40461 . 40537) (semantic-list 40443 . 40456) (IF 40440 . 40442) (punctuation 40406 . 40407) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 40383 . 40384)))) 40374 . 40406) (open-paren 40370 . 40371) (close-paren 40368 . 40369) (symbol 40367 . 40368) (symbol 40357 . 40366) (open-paren 40356 . 40357) (symbol 40343 . 40355) (symbol 40331 . 40342) (symbol 40324 . 40330) (close-paren 40321 . 40322) (punctuation 40319 . 40320) (semantic-list "(GCTYPEBITS - 1)" 40308 . 40319) (punctuation 40306 . 40307) (punctuation 40305 . 40306) (symbol 40303 . 40304) (RETURN 40296 . 40302) (semantic-list 40234 . 40293) (semantic-list 40214 . 40229) (IF 40211 . 40213) (open-paren 40182 . 40183) (close-paren 40180 . 40181) (symbol 40179 . 40180) (symbol 40167 . 40178) (open-paren 40166 . 40167) (symbol 40154 . 40165) (symbol 40144 . 40153) (symbol 40137 . 40143) (close-paren 39940 . 39941) (RETURN 39924 . 39930) (semantic-list 39864 . 39921) (ELSE 39855 . 39859) (semantic-list 39776 . 39852) (semantic-list 39758 . 39771) (IF 39755 . 39757) (punctuation 39721 . 39722) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" semantic-list #("(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 0 1 (macros (("i" symbol "n" 39718 . 39719)))) 39699 . 39720)))) 39688 . 39721) (open-paren 39684 . 39685) (close-paren 39682 . 39683) (symbol 39681 . 39682) (symbol 39671 . 39680) (open-paren 39670 . 39671) (symbol 39658 . 39669) (symbol 39646 . 39657) (symbol 39639 . 39645) (punctuation 38324 . 38325) (close-paren 38323 . 38324) (symbol 38298 . 38320) (punctuation 38296 . 38297) (punctuation 38295 . 38296) (number 38290 . 38294) (punctuation 38288 . 38289) (symbol 38273 . 38287) (punctuation 38267 . 38268) (symbol 38245 . 38267) (punctuation 38243 . 38244) (symbol 38220 . 38242) (punctuation 38218 . 38219) (symbol 38195 . 38217) (punctuation 38127 . 38128) (semantic-list 38055 . 38127) (punctuation 38053 . 38054) (symbol 38030 . 38052) (punctuation 38024 . 38025) (number 38022 . 38024) (punctuation 38020 . 38021) (symbol 37997 . 38019) (punctuation 37845 . 37846) (number 37844 . 37845) (punctuation 37842 . 37843) (semantic-list 37812 . 37841) (punctuation 37810 . 37811) (symbol 37787 . 37809) (punctuation 37781 . 37782) (number 37779 . 37781) (punctuation 37777 . 37778) (symbol 37754 . 37776) (open-paren 37381 . 37382) (symbol 37364 . 37378) (ENUM 37359 . 37363) (punctuation 37356 . 37357) (close-paren 37355 . 37356) (symbol 37285 . 37294) (punctuation 37281 . 37282) (symbol 37270 . 37281) (punctuation 37266 . 37267) (symbol 37247 . 37266) (punctuation 37243 . 37244) (symbol 37228 . 37243) (punctuation 37224 . 37225) (symbol 37211 . 37224) (punctuation 37140 . 37141) (symbol 37119 . 37140) (punctuation 37115 . 37116) (symbol 37095 . 37115) (punctuation 37091 . 37092) (symbol 37079 . 37091) (punctuation 37075 . 37076) (symbol 37065 . 37075) (punctuation 37061 . 37062) (symbol 37050 . 37061) (punctuation 37046 . 37047) (symbol 37029 . 37046) (punctuation 37025 . 37026) (symbol 37013 . 37025) (punctuation 36952 . 36953) (symbol 36942 . 36952) (punctuation 36938 . 36939) (symbol 36929 . 36938) (punctuation 36925 . 36926) (symbol 36900 . 36925) (punctuation 36896 . 36897) (symbol 36883 . 36896) (punctuation 36879 . 36880) (symbol 36864 . 36879) (punctuation 36860 . 36861) (symbol 36849 . 36860) (punctuation 36845 . 36846) (symbol 36829 . 36845) (punctuation 36825 . 36826) (symbol 36814 . 36825) (punctuation 36810 . 36811) (symbol 36800 . 36810) (punctuation 36796 . 36797) (symbol 36784 . 36796) (punctuation 36780 . 36781) (symbol 36767 . 36780) (punctuation 36763 . 36764) (symbol 36750 . 36763) (punctuation 36746 . 36747) (symbol 36732 . 36746) (punctuation 36728 . 36729) (symbol 36716 . 36728) (punctuation 36712 . 36713) (symbol 36701 . 36712) (punctuation 36697 . 36698) (symbol 36686 . 36697) (punctuation 36682 . 36683) (symbol 36673 . 36682) (punctuation 36629 . 36630) (symbol 36611 . 36629) (open-paren 36607 . 36608) (symbol 36597 . 36606) (ENUM 36592 . 36596) (punctuation ";" 36350 . 36391) (symbol "EXTERNALLY_VISIBLE" 36236 . 36290) (symbol "PSEUDOVECTOR_FLAG" 36236 . 36290) (CONST "const" 36236 . 36290) (symbol "ptrdiff_t" 36236 . 36290) (EXTERN "extern" 36236 . 36290) (punctuation ";" 36085 . 36124) (symbol "EXTERNALLY_VISIBLE" 35995 . 36047) (symbol "ARRAY_MARK_FLAG" 35995 . 36047) (CONST "const" 35995 . 36047) (symbol "ptrdiff_t" 35995 . 36047) (EXTERN "extern" 35995 . 36047) (close-paren 35911 . 35912) (open-paren 35882 . 35883) (close-paren 35880 . 35881) (symbol 35879 . 35880) (symbol 35867 . 35878) (open-paren 35866 . 35867) (close-paren 35864 . 35865) (symbol 35852 . 35864) (open-paren 35851 . 35852) (VOID 35846 . 35850) (symbol 35839 . 35845) (close-paren 35836 . 35837) (semantic-list 35741 . 35835) (ELSE 35732 . 35736) (SIZEOF 35714 . 35720) (punctuation 35712 . 35713) (symbol 35709 . 35711) (punctuation 35707 . 35708) (symbol 35704 . 35706) (punctuation 35702 . 35703) (punctuation 35701 . 35702) (symbol 35698 . 35700) (punctuation 35696 . 35697) (punctuation 35695 . 35696) (symbol 35692 . 35694) (RETURN 35685 . 35691) (semantic-list 35654 . 35680) (IF 35651 . 35653) (open-paren 35589 . 35590) (close-paren 35587 . 35588) (symbol 35584 . 35587) (punctuation 35583 . 35584) (symbol 35571 . 35582) (STRUCT 35564 . 35570) (open-paren 35563 . 35564) (symbol 35552 . 35562) (BOOL 35547 . 35551) (symbol 35540 . 35546) (close-paren 35537 . 35538) (semantic-list 35527 . 35534) (punctuation 35519 . 35520) (RETURN 35494 . 35500) (open-paren 35490 . 35491) (close-paren 35488 . 35489) (symbol 35483 . 35488) (INT 35479 . 35482) (open-paren 35478 . 35479) (symbol 35458 . 35477) (symbol 35446 . 35457) (symbol 35439 . 35445) (close-paren 35436 . 35437) (RETURN 35426 . 35432) (punctuation 35422 . 35423) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 35403 . 35410)))) 35394 . 35422) (open-paren 35171 . 35172) (close-paren 35169 . 35170) (symbol 35166 . 35169) (punctuation 35165 . 35166) (symbol 35153 . 35164) (STRUCT 35146 . 35152) (open-paren 35145 . 35146) (symbol 35128 . 35144) (symbol 35116 . 35127) (symbol 35109 . 35115) (close-paren 35106 . 35107) (RETURN 35096 . 35102) (punctuation 34987 . 34988) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 34975 . 34982)))) 34966 . 34987) (open-paren 34962 . 34963) (close-paren 34960 . 34961) (symbol 34959 . 34960) (symbol 34947 . 34958) (open-paren 34946 . 34947) (symbol 34938 . 34945) (symbol 34906 . 34937) (punctuation 34904 . 34905) (symbol 34892 . 34903) (STRUCT 34885 . 34891) (symbol 34878 . 34884) (close-paren 34875 . 34876) (RETURN 34848 . 34854) (open-paren 34844 . 34845) (close-paren 34842 . 34843) (symbol 34841 . 34842) (symbol 34829 . 34840) (open-paren 34828 . 34829) (close-paren 34826 . 34827) (symbol 34819 . 34826) (open-paren 34818 . 34819) (BOOL 34813 . 34817) (symbol 34806 . 34812) (punctuation 34803 . 34804) (close-paren 34802 . 34803) (open-paren 33655 . 33656) (symbol 33635 . 33652) (UNION 33629 . 33634) (punctuation 29085 . 29086) (close-paren 29084 . 29085) (semantic-list #("(alignof (type) % GCALIGNMENT == 0)" 0 1 (macros (("type" STRUCT "struct" 29065 . 29071)))) 29054 . 29084) (open-paren 29053 . 29054) (symbol 29046 . 29052) (punctuation 29044 . 29045) (close-paren 29043 . 29044) (semantic-list "(GCALIGNMENT)" 29013 . 29035) (symbol "alignas" 29013 . 29035) (CHAR "char" 29013 . 29035) (semantic-list "(GCALIGNMENT)" 29013 . 29035) (symbol "alignas" 29013 . 29035) (CHAR "char" 29013 . 29035) (open-paren 27383 . 27384) (symbol 27371 . 27382) (STRUCT 27364 . 27370) (punctuation 27361 . 27362) (close-paren 27360 . 27361) (number 27358 . 27359) (punctuation 27356 . 27357) (symbol 27335 . 27355) (punctuation 27331 . 27332) (number 27330 . 27331) (punctuation 27328 . 27329) (symbol 27313 . 27327) (punctuation 27309 . 27310) (number 27308 . 27309) (punctuation 27306 . 27307) (symbol 27283 . 27305) (open-paren 27279 . 27280) (symbol 27258 . 27278) (ENUM 27253 . 27257) (punctuation 27250 . 27251) (close-paren 27249 . 27250) (number 27247 . 27248) (punctuation 27245 . 27246) (symbol 27228 . 27244) (punctuation 27224 . 27225) (number 27223 . 27224) (punctuation 27221 . 27222) (symbol 27204 . 27220) (punctuation 27200 . 27201) (number 27199 . 27200) (punctuation 27197 . 27198) (symbol 27180 . 27195) (punctuation 27176 . 27177) (number 27175 . 27176) (punctuation 27173 . 27174) (symbol 27156 . 27171) (open-paren 27152 . 27153) (symbol 27136 . 27151) (ENUM 27131 . 27135) (punctuation 27128 . 27129) (close-paren 27127 . 27128) (number 27125 . 27126) (punctuation 27123 . 27124) (symbol 27088 . 27122) (punctuation 27084 . 27085) (number 27083 . 27084) (punctuation 27081 . 27082) (symbol 27065 . 27080) (punctuation 27061 . 27062) (number 27060 . 27061) (punctuation 27058 . 27059) (symbol 27040 . 27057) (open-paren 27036 . 27037) (symbol 27020 . 27035) (ENUM 27015 . 27019) (close-paren 26966 . 26967) (open-paren 26944 . 26945) (STRUCT 26937 . 26943) (TYPEDEF 26929 . 26936) (close-paren 26431 . 26432) (punctuation 26429 . 26430) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 26427 . 26428) ("predicate" symbol "predicate" 26416 . 26425) ("ok" symbol "ok" 26412 . 26414)))) 26393 . 26429) (open-paren 26389 . 26390) (close-paren 26387 . 26388) (symbol 26386 . 26387) (symbol 26374 . 26385) (punctuation 26372 . 26373) (symbol 26363 . 26372) (symbol 26351 . 26362) (punctuation 26349 . 26350) (symbol 26347 . 26349) (INT 26343 . 26346) (open-paren 26342 . 26343) (close-paren 26340 . 26341) (symbol 26330 . 26340) (open-paren 26329 . 26330) (VOID 26324 . 26328) (symbol 26317 . 26323) (close-paren 26314 . 26315) (punctuation 26312 . 26313) (semantic-list #("(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 0 1 (macros (("tag" symbol "tag" 26308 . 26311) ("a" symbol "a" 26305 . 26306)))) 26289 . 26312) (RETURN 26282 . 26288) (open-paren 26278 . 26279) (close-paren 26276 . 26277) (symbol 26273 . 26276) (symbol 26263 . 26272) (ENUM 26258 . 26262) (punctuation 26256 . 26257) (symbol 26255 . 26256) (symbol 26243 . 26254) (open-paren 26242 . 26243) (close-paren 26240 . 26241) (symbol 26233 . 26240) (open-paren 26232 . 26233) (BOOL 26227 . 26231) (symbol 26220 . 26226) (close-paren 26128 . 26129) (punctuation 26110 . 26111) (punctuation 26109 . 26110) (symbol 26107 . 26108) (punctuation 26105 . 26106) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 26097 . 26104) (punctuation 26096 . 26097) (punctuation 26094 . 26095) (symbol 26092 . 26093) (punctuation 26090 . 26091) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 26078 . 26089) (RETURN 26071 . 26077) (open-paren 25992 . 25993) (close-paren 25990 . 25991) (symbol 25989 . 25990) (symbol 25977 . 25988) (open-paren 25976 . 25977) (close-paren 25974 . 25975) (symbol 25969 . 25974) (open-paren 25968 . 25969) (symbol 25958 . 25967) (ENUM 25953 . 25957) (symbol 25946 . 25952) (close-paren 25917 . 25918) (punctuation 25915 . 25916) (semantic-list #("((void *) (uintptr_t) (o))" 0 1 (macros (("o" symbol "o" 25913 . 25914)))) 25901 . 25915) (RETURN 25894 . 25900) (open-paren 25890 . 25891) (close-paren 25888 . 25889) (symbol 25887 . 25888) (symbol 25875 . 25886) (open-paren 25874 . 25875) (close-paren 25872 . 25873) (symbol 25869 . 25872) (open-paren 25868 . 25869) (punctuation 25866 . 25867) (VOID 25861 . 25865) (symbol 25854 . 25860) (close-paren 25851 . 25852) (punctuation 25849 . 25850) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 25847 . 25848)))) 25835 . 25849) (RETURN 25828 . 25834) (open-paren 25824 . 25825) (close-paren 25822 . 25823) (symbol 25821 . 25822) (symbol 25811 . 25820) (open-paren 25810 . 25811) (close-paren 25808 . 25809) (symbol 25805 . 25808) (open-paren 25804 . 25805) (symbol 25792 . 25803) (symbol 25785 . 25791) (close-paren 25782 . 25783) (punctuation 25780 . 25781) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 25778 . 25779)))) 25766 . 25780) (RETURN 25759 . 25765) (open-paren 25755 . 25756) (close-paren 25753 . 25754) (symbol 25752 . 25753) (symbol 25740 . 25751) (open-paren 25739 . 25740) (close-paren 25737 . 25738) (symbol 25734 . 25737) (open-paren 25733 . 25734) (symbol 25723 . 25732) (symbol 25716 . 25722) (punctuation 25441 . 25442) (close-paren 25440 . 25441) (symbol 25429 . 25440) (open-paren 25428 . 25429) (symbol 25414 . 25427) (DOUBLE 25407 . 25413) (EXTERN 25400 . 25406) (close-paren 25367 . 25368) (RETURN 25347 . 25353) (open-paren 25284 . 25285) (close-paren 25282 . 25283) (VOID 25278 . 25282) (open-paren 25277 . 25278) (symbol 25248 . 25276) (BOOL 25243 . 25247) (symbol 25236 . 25242) (close-paren 25027 . 25028) (RETURN 25006 . 25012) (open-paren 24940 . 24941) (close-paren 24938 . 24939) (VOID 24934 . 24938) (open-paren 24933 . 24934) (symbol 24912 . 24932) (BOOL 24907 . 24911) (symbol 24900 . 24906) (close-paren 24897 . 24898) (RETURN 24876 . 24882) (open-paren 24807 . 24808) (close-paren 24805 . 24806) (VOID 24801 . 24805) (open-paren 24800 . 24801) (symbol 24776 . 24799) (BOOL 24771 . 24775) (symbol 24764 . 24770) (close-paren 24761 . 24762) (RETURN 24740 . 24746) (open-paren 24675 . 24676) (close-paren 24673 . 24674) (VOID 24669 . 24673) (open-paren 24668 . 24669) (symbol 24646 . 24667) (BOOL 24641 . 24645) (symbol 24634 . 24640) (close-paren 24631 . 24632) (RETURN 24610 . 24616) (open-paren 24542 . 24543) (close-paren 24540 . 24541) (VOID 24536 . 24540) (open-paren 24535 . 24536) (symbol 24510 . 24534) (BOOL 24505 . 24509) (symbol 24498 . 24504) (close-paren 24495 . 24496) (RETURN 24474 . 24480) (open-paren 24391 . 24392) (close-paren 24389 . 24390) (VOID 24385 . 24389) (open-paren 24384 . 24385) (symbol 24367 . 24383) (BOOL 24362 . 24366) (symbol 24355 . 24361) (close-paren 24352 . 24353) (RETURN 24331 . 24337) (open-paren 24253 . 24254) (close-paren 24251 . 24252) (VOID 24247 . 24251) (open-paren 24246 . 24247) (symbol 24234 . 24245) (BOOL 24229 . 24233) (symbol 24222 . 24228) (close-paren 24211 . 24212) (open-paren 23475 . 23476) (symbol 23468 . 23474) (STRUCT 23461 . 23467) (EXTERN 23454 . 23460) (punctuation 23258 . 23259) (close-paren 23257 . 23258) (symbol 23251 . 23257) (symbol 23239 . 23250) (open-paren 23238 . 23239) (symbol 23224 . 23237) (symbol 23212 . 23223) (EXTERN 23205 . 23211) (punctuation 23203 . 23204) (close-paren 23202 . 23203) (symbol 23191 . 23202) (punctuation 23189 . 23190) (symbol 23178 . 23189) (open-paren 23177 . 23178) (symbol 23157 . 23176) (VOID "void" 23151 . 23156) (symbol "ATTRIBUTE_COLD" 23151 . 23156) (EXTERN 23144 . 23150) (punctuation 23142 . 23143) (close-paren 23141 . 23142) (symbol 23130 . 23141) (punctuation 23128 . 23129) (symbol 23117 . 23128) (punctuation 23115 . 23116) (symbol 23104 . 23115) (open-paren 23103 . 23104) (symbol 23083 . 23102) (VOID "void" 23077 . 23082) (symbol "ATTRIBUTE_COLD" 23077 . 23082) (EXTERN 23070 . 23076) (punctuation 23041 . 23042) (close-paren 23040 . 23041) (symbol 23029 . 23040) (punctuation 23027 . 23028) (INT 23024 . 23027) (punctuation 23022 . 23023) (symbol 23011 . 23022) (open-paren 23010 . 23011) (symbol 22995 . 23009) (VOID 22990 . 22994) (EXTERN 22983 . 22989) (close-paren 22965 . 22966) (INT 22962 . 22965) (punctuation 22960 . 22961) (symbol 22949 . 22960) (open-paren 22948 . 22949) (symbol 22933 . 22947) (symbol 22921 . 22932) (EXTERN 22914 . 22920) (punctuation 22882 . 22883) (close-paren 22881 . 22882) (symbol 22872 . 22881) (punctuation 22870 . 22871) (symbol 22859 . 22870) (open-paren 22858 . 22859) (symbol 22839 . 22857) (symbol 22829 . 22838) (EXTERN 22822 . 22828) (punctuation 22820 . 22821) (close-paren 22819 . 22820) (symbol 22810 . 22819) (open-paren 22809 . 22810) (symbol 22796 . 22808) (symbol 22784 . 22795) (EXTERN 22777 . 22783) (punctuation 22775 . 22776) (close-paren 22774 . 22775) (symbol 22766 . 22774) (open-paren 22765 . 22766) (symbol 22753 . 22764) (symbol 22741 . 22752) (EXTERN 22734 . 22740) (close-paren 22715 . 22716) (symbol 22704 . 22715) (open-paren 22703 . 22704) (symbol 22686 . 22702) (DOUBLE 22679 . 22685) (EXTERN 22672 . 22678) (punctuation 22670 . 22671) (close-paren 22669 . 22670) (symbol 22661 . 22669) (punctuation 22659 . 22660) (symbol 22651 . 22659) (punctuation 22649 . 22650) (symbol 22638 . 22649) (open-paren 22637 . 22638) (symbol 22617 . 22636) (symbol 22608 . 22616) (EXTERN 22601 . 22607) (punctuation 22599 . 22600) (close-paren 22598 . 22599) (symbol 22587 . 22598) (open-paren 22586 . 22587) (symbol 22564 . 22585) (INT 22560 . 22563) (EXTERN 22553 . 22559) (punctuation 22522 . 22523) (close-paren 22521 . 22522) (symbol 22510 . 22521) (punctuation 22497 . 22498) (symbol 22488 . 22497) (punctuation 22486 . 22487) (symbol 22475 . 22486) (open-paren 22474 . 22475) (symbol 22446 . 22473) (VOID 22441 . 22445) (symbol 22434 . 22440) (punctuation 22364 . 22365) (close-paren 22363 . 22364) (symbol 22357 . 22362) (punctuation 22355 . 22356) (symbol 22332 . 22354) (open-paren 22330 . 22331) (symbol 22307 . 22329) (ENUM 22302 . 22306) (punctuation 19549 . 19550) (close-paren 19548 . 19549) (symbol 19479 . 19498) (punctuation 19427 . 19428) (symbol 19408 . 19427) (punctuation 19361 . 19362) (symbol 19349 . 19361) (punctuation 19311 . 19312) (symbol 19298 . 19311) (punctuation 19257 . 19258) (symbol 19245 . 19257) (open-paren 19239 . 19240) (symbol 19223 . 19236) (ENUM 19218 . 19222) (punctuation 19057 . 19058) (close-paren 19056 . 19057) (number 19052 . 19053) (punctuation 19050 . 19051) (symbol 19039 . 19049) (punctuation 18976 . 18977) (number 18975 . 18976) (punctuation 18973 . 18974) (number 18971 . 18972) (punctuation 18969 . 18970) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 18957 . 18968) (punctuation 18955 . 18956) (symbol 18945 . 18954) (punctuation 18875 . 18876) (number 18874 . 18875) (punctuation 18872 . 18873) (symbol 18856 . 18871) (punctuation 18592 . 18593) (number 18591 . 18592) (punctuation 18589 . 18590) (symbol 18577 . 18588) (punctuation 18430 . 18431) (number 18429 . 18430) (punctuation 18427 . 18428) (number 18425 . 18426) (punctuation 18423 . 18424) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 18411 . 18422) (punctuation 18409 . 18410) (symbol 18399 . 18408) (punctuation 18393 . 18394) (number 18392 . 18393) (punctuation 18390 . 18391) (symbol 18380 . 18389) (punctuation 18317 . 18318) (number 18316 . 18317) (punctuation 18314 . 18315) (symbol 18296 . 18313) (punctuation 18250 . 18251) (number 18249 . 18250) (punctuation 18247 . 18248) (symbol 18235 . 18246) (open-paren 18160 . 18161) (symbol 18148 . 18157) (ENUM 18143 . 18147) (close-paren 16126 . 16127) (symbol 16109 . 16126) (symbol 16101 . 16108) (punctuation 16099 . 16100) (punctuation 16097 . 16098) (punctuation 16096 . 16097) (symbol 16083 . 16095) (symbol 16075 . 16082) (punctuation 16073 . 16074) (punctuation 16071 . 16072) (punctuation 16070 . 16071) (punctuation ";" 9373 . 9404) (symbol "EXTERNALLY_VISIBLE" 9265 . 9309) (symbol "VALMASK" 9265 . 9309) (CONST "const" 9265 . 9309) (symbol "EMACS_INT" 9265 . 9309) (EXTERN "extern" 9265 . 9309) (punctuation ";" 9154 . 9189) (symbol "EXTERNALLY_VISIBLE" 9063 . 9106) (CONST "const" 9063 . 9106) (symbol "USE_LSB_TAG" 9063 . 9106) (EXTERN "extern" 9063 . 9106) (punctuation ";" 8367 . 8402) (symbol "EXTERNALLY_VISIBLE" 8287 . 8329) (CONST "const" 8287 . 8329) (symbol "INTTYPEBITS" 8287 . 8329) (EXTERN "extern" 8287 . 8329) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "GCTYPEBITS" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092))
      :lexical-table 
        '(("lisp_h_CONSP" (spp-arg-list ("x") 13793 . 13796) . ((symbol "TAGGEDP" 13797 . 13804) (semantic-list "(x, Lisp_Cons)" 13805 . 13819)))
          ("lisp_h_SYMBOLP" (spp-arg-list ("x") 14558 . 14561) . ((symbol "TAGGEDP" 14562 . 14569) (semantic-list "(x, Lisp_Symbol)" 14570 . 14586)))
          ("lisp_h_XCAR" (spp-arg-list ("c") 14818 . 14821) . 
              ((symbol "XCONS" 14822 . 14827) (semantic-list "(c)" 14828 . 14831) (punctuation "-" 14831 . 14832) (punctuation ">" 14832 . 14833) (symbol "u" 14833 . 14834) (punctuation "." 14834 . 14835) (symbol "s" 14835 . 14836) (punctuation "." 14836 . 14837) (symbol "car" 14837 . 14840)))
          ("case_Lisp_Int" . 
              ((CASE "case" 17794 . 17798) (symbol "Lisp_Int0" 17799 . 17808) (punctuation ":" 17808 . 17809) (CASE "case" 17810 . 17814) (symbol "Lisp_Int1" 17815 . 17824)))
          ("DEFUN_ARGS_3" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object)" 29755 . 29794)))
          ("SYMBOL_INDEX" (spp-arg-list ("sym") 32097 . 32102) . ((spp-symbol-merge ((symbol "i" 32103 . 32104) (symbol "sym" 32106 . 32109)) 32103 . 32109)))
          ("DEFVAR_LISP" (spp-arg-list ("lname" "vname" "doc") 94645 . 94664) . 
              ((DO "do" 94670 . 94672) (semantic-list "{						\\
    static struct Lisp_Objfwd const o_fwd	\\
      = {Lisp_Fwd_Obj, &globals.f_##vname};	\\
    defvar_lisp (&o_fwd, lname);		\\
  }" 94673 . 94811) (WHILE "while" 94812 . 94817) (semantic-list "(false)" 94818 . 94825)))
          ("DEFVAR_BOOL" (spp-arg-list ("lname" "vname" "doc") 95056 . 95075) . 
              ((DO "do" 95081 . 95083) (semantic-list "{						\\
    static struct Lisp_Boolfwd const b_fwd	\\
      = {Lisp_Fwd_Bool, &globals.f_##vname};	\\
    defvar_bool (&b_fwd, lname);		\\
  }" 95084 . 95224) (WHILE "while" 95225 . 95230) (semantic-list "(false)" 95231 . 95238)))
          ("ALLOCATE_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 125052 . 125070) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   PSEUDOVECSIZE (type, field), tag))" 125084 . 125229)))
          ("SAFE_ALLOCA_STRING" (spp-arg-list ("ptr" "string") 159012 . 159025) . 
              ((DO "do" 159032 . 159034) (semantic-list "{							\\
    (ptr) = SAFE_ALLOCA (SBYTES (string) + 1);		\\
    memcpy (ptr, SDATA (string), SBYTES (string) + 1);	\\
  }" 159035 . 159155) (WHILE "while" 159156 . 159161) (semantic-list "(false)" 159162 . 159169)))
          ("AUTO_LIST1" (spp-arg-list ("name" "a") 163382 . 163391) . 
              ((symbol "Lisp_Object" 163401 . 163412) (symbol "name" 163413 . 163417) (punctuation "=" 163418 . 163419) (semantic-list "(USE_STACK_CONS ? STACK_CONS (a, Qnil) : list1 (a))" 163420 . 163471)))
          ("eassert" (spp-arg-list ("cond") 6608 . 6614) . ((semantic-list "((void) (false && (cond)))" 6615 . 6641)))
          ("lisp_h_EQ" (spp-arg-list ("x" "y") 13837 . 13843) . ((semantic-list "(XLI (x) == XLI (y))" 13844 . 13864)))
          ("DEFUN_ARGS_4" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 29816 . 29868)))
          ("ROUNDUP" (spp-arg-list ("x" "y") 32829 . 32835) . ((semantic-list "(POWER_OF_2 (y)					\\
                       ? ((y) - 1 + (x)) & ~ ((y) - 1)			\\
                       : ((y) - 1 + (x)) - ((y) - 1 + (x)) % (y))" 32836 . 32982)))
          ("MOST_NEGATIVE_FIXNUM" . ((semantic-list "(-1 - MOST_POSITIVE_FIXNUM)" 38782 . 38809)))
          ("XSETSUB_CHAR_TABLE" (spp-arg-list ("a" "b") 44157 . 44163) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUB_CHAR_TABLE))" 44164 . 44210)))
          ("IEEE_FLOATING_POINT" . ((semantic-list "(FLT_RADIX == 2 && FLT_MANT_DIG == 24 \\
			     && FLT_MIN_EXP == -125 && FLT_MAX_EXP == 128)" 86652 . 86745)))
          ("CALLN" (spp-arg-list ("f" "...") 93460 . 93468) . ((symbol "CALLMANY" 93469 . 93477) (semantic-list "(f, ((Lisp_Object []) {__VA_ARGS__}))" 93478 . 93515)))
          ("CHILD_SETUP_ERROR_DESC" . ((string "\"Doing vfork\"" 148142 . 148155)))
          ("USE_SAFE_ALLOCA" . 
              ((symbol "ptrdiff_t" 158034 . 158043) (symbol "sa_avail" 158044 . 158052) (punctuation "=" 158053 . 158054) (symbol "MAX_ALLOCA" 158055 . 158065) (punctuation ";" 158065 . 158066) (symbol "ptrdiff_t" 158071 . 158080) (symbol "sa_count" 158081 . 158089) (punctuation "=" 158090 . 158091) (symbol "SPECPDL_INDEX" 158092 . 158105) (semantic-list "()" 158106 . 158108)))
          ("SAFE_ALLOCA_LISP" (spp-arg-list ("buf" "nelt") 161193 . 161204) . ((symbol "SAFE_ALLOCA_LISP_EXTRA" 161205 . 161227) (semantic-list "(buf, nelt, 0)" 161228 . 161242)))
          ("AUTO_LIST2" (spp-arg-list ("name" "a" "b") 163490 . 163502) . 
              ((symbol "Lisp_Object" 163512 . 163523) (symbol "name" 163524 . 163528) (punctuation "=" 163529 . 163530) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, Qnil))		\\
		      : list2 (a, b))" 163531 . 163626)))
          ("AUTO_STRING_WITH_LEN" (spp-arg-list ("name" "str" "len") 164849 . 164865) . 
              ((symbol "Lisp_Object" 164873 . 164884) (symbol "name" 164885 . 164889) (punctuation "=" 164890 . 164891) (semantic-list "(USE_STACK_STRING							\\
     ? (make_lisp_ptr							\\
	((&(struct Lisp_String) {{{len, -1, 0, (unsigned char *) (str)}}}), \\
	 Lisp_String))							\\
     : make_unibyte_string (str, len))" 164904 . 165093)))
          ("FOR_EACH_TAIL_SAFE" (spp-arg-list ("tail") 165914 . 165920) . ((symbol "FOR_EACH_TAIL_INTERNAL" 165925 . 165947) (semantic-list "(tail, (void) ((tail) = Qnil), false)" 165948 . 165985)))
          ("VAL_MAX" . ((semantic-list "(EMACS_INT_MAX >> (GCTYPEBITS - 1))" 8673 . 8708)))
          ("GCALIGNED_UNION_MEMBER" . 
              ((CHAR "char" 10938 . 10942) (symbol "alignas" 10943 . 10950) (semantic-list "(GCALIGNMENT)" 10951 . 10964) (symbol "gcaligned" 10965 . 10974) (punctuation ";" 10974 . 10975)))
          ("lisp_h_FLOATP" (spp-arg-list ("x") 14061 . 14064) . ((symbol "TAGGEDP" 14065 . 14072) (semantic-list "(x, Lisp_Float)" 14073 . 14088)))
          ("lisp_h_SYMBOL_CONSTANT_P" (spp-arg-list ("sym") 14285 . 14290) . ((semantic-list "(XSYMBOL (sym)->u.s.trapped_write == SYMBOL_NOWRITE)" 14296 . 14348)))
          ("lisp_h_SYMBOL_TRAPPED_WRITE_P" (spp-arg-list ("sym") 14386 . 14391) . ((semantic-list "(XSYMBOL (sym)->u.s.trapped_write)" 14392 . 14426)))
          ("DEFUN_ARGS_5" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object)" 29890 . 29961)))
          ("XSETPVECTYPE" (spp-arg-list ("v" "code") 42721 . 42730) . ((semantic-list "((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 42740 . 42816)))
          ("__builtin_unwind_init" (spp-arg-list nil 119542 . 119544) . ((semantic-list "((void) 0)" 119545 . 119555)))
          ("pure_list" (spp-arg-list ("...") 120582 . 120587) . ((symbol "pure_listn" 120592 . 120602) (semantic-list "(ARRAYELTS (((Lisp_Object []) {__VA_ARGS__})), __VA_ARGS__)" 120603 . 120662)))
          ("AUTO_LIST3" (spp-arg-list ("name" "a" "b" "c") 163645 . 163660) . 
              ((symbol "Lisp_Object" 163669 . 163680) (symbol "name" 163681 . 163685) (punctuation "=" 163686 . 163687) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c, Qnil))) \\
		      : list3 (a, b, c))" 163688 . 163801)))
          ("GCALIGNED_STRUCT")
          ("lisp_h_XLI" (spp-arg-list ("o") 13106 . 13109) . ((semantic-list "(o)" 13110 . 13113)))
          ("lisp_h_XHASH" (spp-arg-list ("a") 14997 . 15000) . ((symbol "XUFIXNUM_RAW" 15001 . 15013) (semantic-list "(a)" 15014 . 15017)))
          ("DEFINE_KEY_OPS_AS_MACROS" . ((symbol "true" 16163 . 16167)))
          ("EXFUN" (spp-arg-list ("fnname" "maxargs") 29347 . 29364) . 
              ((EXTERN "extern" 29369 . 29375) (symbol "Lisp_Object" 29376 . 29387) (symbol "fnname" 29388 . 29394) (spp-symbol-merge ((symbol "DEFUN_ARGS_" 29395 . 29406) (symbol "maxargs" 29410 . 29417)) 29395 . 29417)))
          ("DEFUN_ARGS_6" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object)" 29983 . 30067)))
          ("XSETINT" (spp-arg-list ("a" "b") 42044 . 42050) . ((semantic-list "((a) = make_fixnum (b))" 42051 . 42074)))
          ("XSETCHAR_TABLE" (spp-arg-list ("a" "b") 44007 . 44013) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CHAR_TABLE))" 44014 . 44056)))
          ("XSET_HASH_TABLE" (spp-arg-list ("VAR" "PTR") 73961 . 73971) . ((semantic-list "(XSETPSEUDOVECTOR (VAR, PTR, PVEC_HASH_TABLE))" 73979 . 74025)))
          ("SAFE_ALLOCA_LISP_EXTRA" (spp-arg-list ("buf" "nelt" "extra") 160347 . 160365) . 
              ((DO "do" 160377 . 160379) (semantic-list "{							       \\
    ptrdiff_t alloca_nbytes;				       \\
    if (INT_MULTIPLY_WRAPV (nelt, word_size, &alloca_nbytes)   \\
	|| INT_ADD_WRAPV (alloca_nbytes, extra, &alloca_nbytes) \\
	|| SIZE_MAX < alloca_nbytes)			       \\
      memory_full (SIZE_MAX);				       \\
    else if (alloca_nbytes <= sa_avail)			       \\
      (buf) = AVAIL_ALLOCA (alloca_nbytes);		       \\
    else						       \\
      {							       \\
	/* Although only the first nelt words need clearing,   \\
	   typically EXTRA is 0 or small so just use xzalloc;  \\
	   this is simpler and often faster.  */	       \\
	(buf) = xzalloc (alloca_nbytes);		       \\
	record_unwind_protect_array (buf, nelt);	       \\
      }							       \\
  }" 160380 . 161084) (WHILE "while" 161085 . 161090) (semantic-list "(false)" 161091 . 161098)))
          ("AUTO_LIST4" (spp-arg-list ("name" "a" "b" "c" "d") 163820 . 163838) . 
              ((symbol "Lisp_Object" 163849 . 163860) (symbol "name" 163861 . 163865) (punctuation "=" 163880 . 163881) (semantic-list "(USE_STACK_CONS							\\
	 ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c,			\\
						     STACK_CONS (d, Qnil)))) \\
	 : list4 (a, b, c, d))" 163882 . 164019)))
          ("DECLARE_GDB_SYM" (spp-arg-list ("type" "id") 1508 . 1518) . 
              ((symbol "type" 1519 . 1523) (CONST "const" 1524 . 1529) (symbol "id" 1530 . 1532) (symbol "EXTERNALLY_VISIBLE" 1533 . 1551)))
          ("max" (spp-arg-list ("a" "b") 1887 . 1893) . ((semantic-list "((a) > (b) ? (a) : (b))" 1894 . 1917)))
          ("ARRAYELTS" (spp-arg-list ("arr") 2017 . 2022) . ((semantic-list "(sizeof (arr) / sizeof (arr)[0])" 2023 . 2055)))
          ("INTTYPEBITS" . ((semantic-list "(GCTYPEBITS - 1)" 8350 . 8366)))
          ("USE_LSB_TAG" . ((semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 9127 . 9153)))
          ("lisp_h_CHECK_TYPE" (spp-arg-list ("ok" "predicate" "x") 13694 . 13712) . ((semantic-list "((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 13718 . 13772)))
          ("lisp_h_SET_SYMBOL_VAL" (spp-arg-list ("sym" "v") 14154 . 14162) . ((semantic-list "(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), \\
    (sym)->u.s.val.value = (v))" 14168 . 14252)))
          ("lisp_h_TAGGEDP" (spp-arg-list ("a" "tag") 14609 . 14617) . ((semantic-list "(! (((unsigned) (XLI (a) >> (USE_LSB_TAG ? 0 : VALBITS)) \\
	- (unsigned) (tag)) \\
       & ((1 << GCTYPEBITS) - 1)))" 14623 . 14739)))
          ("DEFUN_ARGS_7" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object)" 30089 . 30186)))
          ("LISPSYM_INITIALLY" (spp-arg-list ("name") 31483 . 31489) . ((symbol "TAG_PTR" 31494 . 31501) (semantic-list "(Lisp_Symbol, (char *) (intptr_t) ((i##name) * sizeof *lispsym))" 31502 . 31566)))
          ("XSETWINDOW" (spp-arg-list ("a" "b") 43747 . 43753) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW))" 43754 . 43792)))
          ("sys_longjmp" (spp-arg-list ("j" "v") 67456 . 67462) . ((symbol "longjmp" 67463 . 67470) (semantic-list "(j, v)" 67471 . 67477)))
          ("INT_TO_INTEGER" (spp-arg-list ("expr") 81846 . 81852) . ((semantic-list "(EXPR_SIGNED (expr) ? make_int (expr) : make_uint (expr))" 81857 . 81914)))
          ("CALLMANY" (spp-arg-list ("f" "array") 93021 . 93031) . ((semantic-list "(f)" 93032 . 93035) (semantic-list "(ARRAYELTS (array), array)" 93036 . 93062)))
          ("WAIT_READING_MAX" . ((symbol "INTMAX_MAX" 147571 . 147581)))
          ("eabs" (spp-arg-list ("x") 157683 . 157686) . ((semantic-list "((x) < 0 ? -(x) : (x))" 157695 . 157717)))
          ("SAFE_ALLOCA" (spp-arg-list ("size") 158240 . 158246) . ((semantic-list "((size) <= sa_avail				\\
			   ? AVAIL_ALLOCA (size)			\\
			   : record_xmalloc (size))" 158247 . 158334)))
          ("min" (spp-arg-list ("a" "b") 1929 . 1935) . ((semantic-list "((a) < (b) ? (a) : (b))" 1936 . 1959)))
          ("LISP_WORDS_ARE_POINTERS" . ((semantic-list "(EMACS_INT_MAX == INTPTR_MAX)" 11452 . 11481)))
          ("DEFUN_ARGS_8" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 30208 . 30318)))
          ("LISP_WORD_TAG" (spp-arg-list ("tag") 31074 . 31079) . ((semantic-list "((Lisp_Word_tag) (tag) << (USE_LSB_TAG ? 0 : VALBITS))" 31084 . 31138)))
          ("XSETSUBR" (spp-arg-list ("a" "b") 43877 . 43883) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUBR))" 43884 . 43920)))
          ("XSETBOOL_VECTOR" (spp-arg-list ("a" "b") 44080 . 44086) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BOOL_VECTOR))" 44087 . 44130)))
          ("STRING_BYTES_BOUND" . ((semantic-list "((ptrdiff_t) min (MOST_POSITIVE_FIXNUM, min (SIZE_MAX, PTRDIFF_MAX) - 1))" 49241 . 49314)))
          ("DEFVAR_INT" (spp-arg-list ("lname" "vname" "doc") 95257 . 95276) . 
              ((DO "do" 95282 . 95284) (semantic-list "{						\\
    static struct Lisp_Intfwd const i_fwd	\\
      = {Lisp_Fwd_Int, &globals.f_##vname};	\\
    defvar_int (&i_fwd, lname);			\\
  }" 95285 . 95423) (WHILE "while" 95424 . 95429) (semantic-list "(false)" 95430 . 95437)))
          ("list" (spp-arg-list ("...") 120489 . 120494) . ((symbol "listn" 120499 . 120504) (semantic-list "(ARRAYELTS (((Lisp_Object []) {__VA_ARGS__})), __VA_ARGS__)" 120505 . 120564)))
          ("USE_STACK_LISP_OBJECTS" . ((symbol "false" 162015 . 162020)))
          ("FOR_EACH_TAIL" (spp-arg-list ("tail") 165689 . 165695) . ((symbol "FOR_EACH_TAIL_INTERNAL" 165700 . 165722) (semantic-list "(tail, circular_list (tail), true)" 165723 . 165757)))
          ("EMACS_INT_MAX" . ((symbol "LLONG_MAX" 3225 . 3234)))
          ("pD" . ((string "\"ll\"" 5182 . 5186)))
          ("GCALIGNED" (spp-arg-list ("type") 11132 . 11138) . ((semantic-list "(alignof (type) % GCALIGNMENT == 0)" 11139 . 11174)))
          ("lisp_h_XIL" (spp-arg-list ("i") 13134 . 13137) . ((semantic-list "(i)" 13138 . 13141)))
          ("lisp_h_CHECK_FIXNUM" (spp-arg-list ("x") 13558 . 13561) . ((symbol "CHECK_TYPE" 13562 . 13572) (semantic-list "(FIXNUMP (x), Qfixnump, x)" 13573 . 13599)))
          ("lisp_h_VECTORLIKEP" (spp-arg-list ("x") 14766 . 14769) . ((symbol "TAGGEDP" 14770 . 14777) (semantic-list "(x, Lisp_Vectorlike)" 14778 . 14798)))
          ("INTMASK" . ((semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 17735 . 17771)))
          ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" . ((symbol "true" 32465 . 32469)))
          ("PSEUDOVECTOR_FLAG" . ((semantic-list "(PTRDIFF_MAX - PTRDIFF_MAX / 2)" 36318 . 36349)))
          ("PVECHEADERSIZE" (spp-arg-list ("code" "lispsize" "restsize") 42839 . 42865) . ((semantic-list "(PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS) \\
   | ((restsize) << PSEUDOVECTOR_SIZE_BITS) | (lispsize))" 42870 . 42985)))
          ("XSETCONDVAR" (spp-arg-list ("a" "b") 44356 . 44362) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CONDVAR))" 44363 . 44402)))
          ("VECSIZE" (spp-arg-list ("type") 58985 . 58991) . ((semantic-list "((sizeof (type) - header_size + word_size - 1) / word_size)" 59001 . 59060)))
          ("TYPE_RANGED_FIXNUMP" (spp-arg-list ("type" "x") 88235 . 88244) . ((semantic-list "(FIXNUMP (x)			      \\
   && (TYPE_SIGNED (type) ? TYPE_MINIMUM (type) <= XFIXNUM (x) : 0 <= XFIXNUM (x)) \\
   && XFIXNUM (x) <= TYPE_MAXIMUM (type))" 88249 . 88398)))
          ("SAFE_NALLOCA" (spp-arg-list ("buf" "multiplier" "nitems") 158559 . 158584) . 
              ((DO "do" 158592 . 158594) (semantic-list "{								 \\
    if ((nitems) <= sa_avail / sizeof *(buf) / (multiplier))	 \\
      (buf) = AVAIL_ALLOCA (sizeof *(buf) * (multiplier) * (nitems)); \\
    else							 \\
      {								 \\
	(buf) = xnmalloc (nitems, sizeof *(buf) * (multiplier)); \\
	record_unwind_protect_ptr (xfree, buf);			 \\
      }								 \\
  }" 158595 . 158906) (WHILE "while" 158907 . 158912) (semantic-list "(false)" 158913 . 158920)))
          ("AUTO_CONS_EXPR" (spp-arg-list ("a" "b") 162952 . 162958) . ((semantic-list "(USE_STACK_CONS ? STACK_CONS (a, b) : Fcons (a, b))" 162963 . 163014)))
          ("lisp_h_SYMBOL_VAL" (spp-arg-list ("sym") 14452 . 14457) . ((semantic-list "(eassert ((sym)->u.s.redirect == SYMBOL_PLAINVAL), (sym)->u.s.val.value)" 14463 . 14535)))
          ("DEFUN_ARGS_MANY" . ((semantic-list "(ptrdiff_t, Lisp_Object *)" 29553 . 29579)))
          ("POWER_OF_2" (spp-arg-list ("n") 32554 . 32557) . ((semantic-list "(((n) & ((n) - 1)) == 0)" 32558 . 32582)))
          ("MOST_POSITIVE_FIXNUM" . ((semantic-list "(EMACS_INT_MAX >> INTTYPEBITS)" 38722 . 38752)))
          ("XSETCONS" (spp-arg-list ("a" "b") 42147 . 42153) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Cons))" 42154 . 42190)))
          ("XSETTYPED_PSEUDOVECTOR" (spp-arg-list ("a" "b" "size" "code") 43387 . 43405) . ((semantic-list "(XSETVECTOR (a, b),							\\
   eassert ((size & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))		\\
	    == (PSEUDOVECTOR_FLAG | (code << PSEUDOVECTOR_AREA_BITS))))" 43412 . 43565)))
          ("XSETPROCESS" (spp-arg-list ("a" "b") 43682 . 43688) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_PROCESS))" 43689 . 43728)))
          ("STRING_SET_MULTIBYTE" (spp-arg-list ("STR") 49696 . 49701) . 
              ((DO "do" 49708 . 49710) (semantic-list "{							\\
    if (XSTRING (STR)->u.s.size == 0)			\\
      (STR) = empty_multibyte_string;			\\
    else						\\
      XSTRING (STR)->u.s.size_byte = XSTRING (STR)->u.s.size; \\
  }" 49711 . 49888) (WHILE "while" 49889 . 49894) (semantic-list "(false)" 49895 . 49902)))
          ("PSEUDOVECSIZE" (spp-arg-list ("type" "lastlispfield") 59276 . 59297) . ((semantic-list "(offsetof (type, lastlispfield) + word_size < header_size		\\
   ? 0 : (offsetof (type, lastlispfield) + word_size - header_size) / word_size)" 59305 . 59446)))
          ("DEFUN" (spp-arg-list ("lname" "fnname" "sname" "minargs" "maxargs" "intspec" "doc") 92352 . 92406) . 
              ((symbol "SUBR_SECTION_ATTRIBUTE" 92411 . 92433) (STATIC "static" 92485 . 92491) (UNION "union" 92492 . 92497) (symbol "Aligned_Lisp_Subr" 92498 . 92515) (symbol "sname" 92516 . 92521) (punctuation "=" 92522 . 92523) (semantic-list "{{{ PVEC_SUBR << PSEUDOVECTOR_AREA_BITS },				\\
       { .a ## maxargs = fnname },					\\
       minargs, maxargs, lname, {intspec}, 0}}" 92562 . 92697) (punctuation ";" 92697 . 92698) (symbol "Lisp_Object" 92707 . 92718) (symbol "fnname" 92719 . 92725)))
          ("DEFVAR_KBOARD" (spp-arg-list ("lname" "vname" "doc") 95460 . 95479) . 
              ((DO "do" 95486 . 95488) (semantic-list "{								\\
    static struct Lisp_Kboard_Objfwd const ko_fwd		\\
      = {Lisp_Fwd_Kboard_Obj, offsetof (KBOARD, vname##_)};	\\
    defvar_kboard (&ko_fwd, lname);				\\
  }" 95489 . 95659) (WHILE "while" 95660 . 95665) (semantic-list "(false)" 95666 . 95673)))
          ("AVAIL_ALLOCA" (spp-arg-list ("size") 158130 . 158136) . ((semantic-list "(sa_avail -= (size), alloca (size))" 158137 . 158172)))
          ("BOOL_VECTOR_BITS_PER_CHAR" . ((number "8" 4071 . 4072)))
          ("DEFINE_GDB_SYMBOL_BEGIN" (spp-arg-list ("type" "id") 1721 . 1731) . 
              ((EXTERN "extern" 1732 . 1738) (symbol "DECLARE_GDB_SYM" 1739 . 1754) (semantic-list "(type, id)" 1755 . 1765)))
          ("VALMASK" . ((semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 9327 . 9372)))
          ("lisp_h_NILP" (spp-arg-list ("x") 14108 . 14111) . ((symbol "EQ" 14112 . 14114) (semantic-list "(x, Qnil)" 14115 . 14124)))
          ("lisp_h_XCONS" (spp-arg-list ("a") 14905 . 14908) . ((semantic-list "(eassert (CONSP (a)), XUNTAG (a, Lisp_Cons, struct Lisp_Cons))" 14914 . 14976)))
          ("XUNTAG" (spp-arg-list ("a" "type" "ctype") 26562 . 26578) . ((semantic-list "((ctype *) \\
				((char *) XLP (a) - LISP_WORD_TAG (type)))" 26579 . 26638)))
          ("DEFINE_LISP_SYMBOL" (spp-arg-list ("name") 31872 . 31878) . 
              ((symbol "DEFINE_GDB_SYMBOL_BEGIN" 31883 . 31906) (semantic-list "(Lisp_Object, name)" 31907 . 31926) (symbol "DEFINE_GDB_SYMBOL_END" 31931 . 31952) (semantic-list "(LISPSYM_INITIALLY (name))" 31953 . 31979)))
          ("XSETVECTOR" (spp-arg-list ("a" "b") 42209 . 42215) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 42216 . 42258)))
          ("XSETTERMINAL" (spp-arg-list ("a" "b") 43813 . 43819) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_TERMINAL))" 43820 . 43860)))
          ("STRING_SET_UNIBYTE" (spp-arg-list ("STR") 49379 . 49384) . 
              ((DO "do" 49392 . 49394) (semantic-list "{							\\
    if (XSTRING (STR)->u.s.size == 0)			\\
      (STR) = empty_unibyte_string;			\\
    else						\\
      XSTRING (STR)->u.s.size_byte = -1;		\\
  }" 49395 . 49550) (WHILE "while" 49551 . 49556) (semantic-list "(false)" 49557 . 49564)))
          ("CONS_TO_INTEGER" (spp-arg-list ("cons" "type" "var") 108447 . 108464) . ((semantic-list "(TYPE_SIGNED (type)							\\
  ? ((var) = cons_to_signed (cons, TYPE_MINIMUM (type), TYPE_MAXIMUM (type))) \\
  : ((var) = cons_to_unsigned (cons, TYPE_MAXIMUM (type))))" 108471 . 108638)))
          ("ALLOCATE_ZEROED_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 125395 . 125413) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   VECSIZE (type), tag))" 125426 . 125558)))
          ("DAEMON_RUNNING" . ((semantic-list "(daemon_type >= 0)" 146522 . 146540)))
          ("SAFE_FREE_UNBIND_TO" (spp-arg-list ("count" "val") 159978 . 159990) . ((symbol "safe_free_unbind_to" 159995 . 160014) (semantic-list "(count, sa_count, val)" 160015 . 160037)))
          ("DEFINE_GDB_SYMBOL_END" (spp-arg-list ("val") 1796 . 1801) . ((punctuation ";" 1802 . 1803)))
          ("GCTYPEBITS" . ((number "3" 2162 . 2163)))
          ("lisp_h_XCDR" (spp-arg-list ("c") 14860 . 14863) . 
              ((symbol "XCONS" 14864 . 14869) (semantic-list "(c)" 14870 . 14873) (punctuation "-" 14873 . 14874) (punctuation ">" 14874 . 14875) (symbol "u" 14875 . 14876) (punctuation "." 14876 . 14877) (symbol "s" 14877 . 14878) (punctuation "." 14878 . 14879) (symbol "u" 14879 . 14880) (punctuation "." 14880 . 14881) (symbol "cdr" 14881 . 14884)))
          ("LISP_INITIALLY" (spp-arg-list ("w") 22294 . 22297) . ((semantic-list "(w)" 22298 . 22301)))
          ("DEFUN_ARGS_UNEVALLED" . ((semantic-list "(Lisp_Object)" 29609 . 29622)))
          ("ARRAY_MARK_FLAG" . ((symbol "PTRDIFF_MIN" 36073 . 36084)))
          ("FIXNUM_OVERFLOW_P" (spp-arg-list ("i") 38909 . 38912) . ((semantic-list "(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 38917 . 38995)))
          ("XSETSTRING" (spp-arg-list ("a" "b") 42277 . 42283) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_String))" 42284 . 42322)))
          ("sys_setjmp" (spp-arg-list ("j") 67421 . 67424) . ((symbol "setjmp" 67425 . 67431) (semantic-list "(j)" 67432 . 67435)))
          ("DEFVAR_LISP_NOPRO" (spp-arg-list ("lname" "vname" "doc") 94851 . 94870) . 
              ((DO "do" 94875 . 94877) (semantic-list "{						\\
    static struct Lisp_Objfwd const o_fwd	\\
      = {Lisp_Fwd_Obj, &globals.f_##vname};	\\
    defvar_lisp_nopro (&o_fwd, lname);		\\
  }" 94878 . 95022) (WHILE "while" 95023 . 95028) (semantic-list "(false)" 95029 . 95036)))
          ("AUTO_CONS" (spp-arg-list ("name" "a" "b") 163310 . 163322) . 
              ((symbol "Lisp_Object" 163323 . 163334) (symbol "name" 163335 . 163339) (punctuation "=" 163340 . 163341) (symbol "AUTO_CONS_EXPR" 163342 . 163356) (semantic-list "(a, b)" 163357 . 163363)))
          ("FOR_EACH_ALIST_VALUE" (spp-arg-list ("head_var" "list_var" "value_var") 167355 . 167386) . ((FOR "for" 167392 . 167395) (semantic-list "((list_var) = (head_var);						\\
       (CONSP (list_var) && ((value_var) = XCDR (XCAR (list_var)), true)); \\
       (list_var) = XCDR (list_var))" 167396 . 167542)))
          ("GCALIGNMENT" . ((number "1" 9834 . 9835)))
          ("lisp_h_XLP" (spp-arg-list ("o") 13162 . 13165) . ((semantic-list "((void *) (uintptr_t) (o))" 13166 . 13192)))
          ("DEFUN_ARGS_0" . ((semantic-list "(void)" 29644 . 29650)))
          ("XSETFLOAT" (spp-arg-list ("a" "b") 42394 . 42400) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Float))" 42401 . 42438)))
          ("XSETPSEUDOVECTOR" (spp-arg-list ("a" "b" "code") 43202 . 43214) . ((symbol "XSETTYPED_PSEUDOVECTOR" 43219 . 43241) (semantic-list "(a, b,					\\
			  (XUNTAG (a, Lisp_Vectorlike,		\\
				   union vectorlike_header)	\\
			   ->size),				\\
			  code)" 43242 . 43356)))
          ("XSETNATIVE_COMP_UNIT" (spp-arg-list ("a" "b") 44431 . 44437) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_NATIVE_COMP_UNIT))" 44438 . 44486)))
          ("DEFSYM" (spp-arg-list ("sym" "name") 70097 . 70108))
          ("QUITP" . ((semantic-list "(!NILP (Vquit_flag) && NILP (Vinhibit_quit))" 101608 . 101652)))
          ("FLOAT_TO_STRING_BUFSIZE" . ((number "350" 127925 . 127928)))
          ("EMACS_LISP_H")
          ("pI" . ((string "\"ll\"" 3788 . 3792)))
          ("AVOID" . 
              ((symbol "_Noreturn" 5302 . 5311) (symbol "ATTRIBUTE_COLD" 5312 . 5326) (VOID "void" 5327 . 5331)))
          ("eassume" (spp-arg-list ("cond") 6686 . 6692) . ((symbol "assume" 6693 . 6699) (semantic-list "(cond)" 6700 . 6706)))
          ("lisp_h_FIXNUMP" (spp-arg-list ("x") 13887 . 13890) . ((semantic-list "(! (((unsigned) (XLI (x) >> (USE_LSB_TAG ? 0 : FIXNUM_BITS)) \\
	- (unsigned) (Lisp_Int0 >> !USE_LSB_TAG)) \\
       & ((1 << INTTYPEBITS) - 1)))" 13896 . 14039)))
          ("ENUM_BF" (spp-arg-list ("TYPE") 18117 . 18123) . ((ENUM "enum" 18124 . 18128) (symbol "TYPE" 18129 . 18133)))
          ("DEFUN_ARGS_1" . ((semantic-list "(Lisp_Object)" 29672 . 29685)))
          ("TAG_PTR" (spp-arg-list ("tag" "ptr") 31229 . 31239) . ((symbol "LISP_INITIALLY" 31244 . 31258) (semantic-list "((Lisp_Word) ((untagged_ptr) (ptr) + LISP_WORD_TAG (tag)))" 31259 . 31317)))
          ("XSETSYMBOL" (spp-arg-list ("a" "b") 42341 . 42347) . ((semantic-list "((a) = make_lisp_symbol (b))" 42348 . 42376)))
          ("XSETPVECTYPESIZE" (spp-arg-list ("v" "code" "lispsize" "restsize") 43010 . 43039) . ((semantic-list "((v)->header.size = PVECHEADERSIZE (code, lispsize, restsize))" 43045 . 43107)))
          ("XSETMUTEX" (spp-arg-list ("a" "b") 44292 . 44298) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_MUTEX))" 44299 . 44336)))
          ("SUBR_SECTION_ATTRIBUTE" . ((symbol "ATTRIBUTE_SECTION" 90788 . 90805) (semantic-list "(\".subrs\")" 90806 . 90816)))
          ("ALLOCATE_PLAIN_PSEUDOVECTOR" (spp-arg-list ("type" "tag") 124801 . 124812) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type), 0, 0, tag))" 124817 . 124877)))
          ("IS_DAEMON" . ((semantic-list "(daemon_type != 0)" 146480 . 146498)))
          ("STACK_CONS" (spp-arg-list ("a" "b") 162857 . 162863) . ((symbol "make_lisp_ptr" 162868 . 162881) (semantic-list "(&((struct Lisp_Cons) {{{a, {b}}}}), Lisp_Cons)" 162882 . 162929)))
          ("AUTO_STRING" (spp-arg-list ("name" "str") 164388 . 164399) . ((symbol "AUTO_STRING_WITH_LEN" 164404 . 164424) (semantic-list "(name, str, strlen (str))" 164425 . 164450)))
          ("BITS_WORD_MAX" . ((symbol "SIZE_MAX" 4444 . 4452)))
          ("lisp_h_CHECK_SYMBOL" (spp-arg-list ("x") 13627 . 13630) . ((symbol "CHECK_TYPE" 13631 . 13641) (semantic-list "(SYMBOLP (x), Qsymbolp, x)" 13642 . 13668)))
          ("DEFUN_ARGS_2" . ((semantic-list "(Lisp_Object, Lisp_Object)" 29707 . 29733)))
          ("XSETFASTINT" (spp-arg-list ("a" "b") 42094 . 42100) . ((semantic-list "((a) = make_fixed_natnum (b))" 42101 . 42130)))
          ("XSETWINDOW_CONFIGURATION" (spp-arg-list ("a" "b") 43599 . 43605) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW_CONFIGURATION))" 43610 . 43662)))
          ("XSETBUFFER" (spp-arg-list ("a" "b") 43939 . 43945) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BUFFER))" 43946 . 43984)))
          ("XSETTHREAD" (spp-arg-list ("a" "b") 44229 . 44235) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_THREAD))" 44236 . 44274)))
          ("SAFE_FREE" (spp-arg-list nil 159243 . 159245) . ((symbol "safe_free" 159246 . 159255) (semantic-list "(sa_count)" 159256 . 159266)))
          ("FOR_EACH_TAIL_INTERNAL" (spp-arg-list ("tail" "cycle" "check_quit") 166877 . 166902) . ((FOR "for" 166909 . 166912) (semantic-list "(struct for_each_tail_internal li = { tail, 2, 0, 2 };		\\
       CONSP (tail);							\\
       ((tail) = XCDR (tail),						\\
	((--li.q != 0							\\
	  || ((check_quit) ? maybe_quit () : (void) 0, 0 < --li.n)	\\
	  || (li.q = li.n = li.max <<= 1, li.n >>= USHRT_WIDTH,		\\
	      li.tortoise = (tail), false))				\\
	 && EQ (tail, li.tortoise))					\\
	? (cycle) : (void) 0))" 166913 . 167282)))
          )
)
    (semanticdb-table "semanticdb-table-d964b8"
      :file "globals.h"
      :fsize 282860
      :lastmodtime '(25315 54934 245220 77000))
    (semanticdb-table "semanticdb-table-d96500"
      :file "comp.h"
      :fsize 3227
      :lastmodtime '(25315 53065 762489 15000))
    (semanticdb-table "semanticdb-table-d96548"
      :file "thread.h"
      :fsize 9671
      :lastmodtime '(25315 53065 991489 76000))
    (semanticdb-table "semanticdb-table-d54bee"
      :major-mode c-mode
      :tags 
        '( ("EMACS_CONFIG_H" variable (:constant-flag t) nil [1131 1145])
            ("AMPERSAND_FULL_NAME" variable (:constant-flag t) nil [1341 1360])
            ("COPYRIGHT" variable (:constant-flag t) nil [2560 2569])
            ("DEFAULT_SOUND_DEVICE" variable (:constant-flag t) nil [2854 2874])
            ("DIRECTORY_SEP" variable (:constant-flag t) nil [3026 3039])
            ("DIR_TO_FD" variable (:constant-flag t) nil [3227 3236])
            ("EMACS_CONFIGURATION" variable (:constant-flag t) nil [3931 3950])
            ("EMACS_CONFIG_FEATURES" variable (:constant-flag t) nil [4047 4068])
            ("EMACS_CONFIG_OPTIONS" variable (:constant-flag t) nil [4316 4336])
            ("FLEXIBLE_ARRAY_MEMBER" variable (:constant-flag t) nil [5062 5083])
            ("FUNC_REALPATH_WORKS" variable (:constant-flag t) nil [5872 5891])
            ("GCC_LINT" variable (:constant-flag t) nil [6040 6048])
            ("GC_SETJMP_WORKS" variable (:constant-flag t) nil [6692 6707])
            ("GETGROUPS_T" variable (:constant-flag t) nil [6940 6951])
            ("GETTIMEOFDAY_TIMEZONE" variable (:constant-flag t) nil [7211 7232])
            ("GETXATTR_WITH_POSIX_ACLS" variable (:constant-flag t) nil [7353 7377])
            ("GNULIB_CANONICALIZE_LGPL" variable (:constant-flag t) nil [7726 7750])
            ("GNULIB_CLOSE_STREAM" variable (:constant-flag t) nil [7913 7932])
            ("GNULIB_FACCESSAT" variable (:constant-flag t) nil [8092 8108])
            ("GNULIB_FDOPENDIR" variable (:constant-flag t) nil [8268 8284])
            ("GNULIB_FSCANF" variable (:constant-flag t) nil [8441 8454])
            ("GNULIB_MKOSTEMP" variable (:constant-flag t) nil [8613 8628])
            ("GNULIB_SCANF" variable (:constant-flag t) nil [9297 9309])
            ("GNULIB_STDIO_SINGLE_THREAD" variable (:constant-flag t) nil [9743 9769])
            ("GNULIB_TEMPNAME" variable (:constant-flag t) nil [9928 9943])
            ("GNU_LINUX" variable (:constant-flag t) nil [10012 10021])
            ("HAVE_ACCEPT4" variable (:constant-flag t) nil [10178 10190])
            ("HAVE_ALIGNED_ALLOC" variable (:constant-flag t) nil [12486 12504])
            ("HAVE_ALLOCA" variable (:constant-flag t) nil [12638 12649])
            ("HAVE_ALLOCA_H" variable (:constant-flag t) nil [12700 12713])
            ("HAVE_BYTESWAP_H" variable (:constant-flag t) nil [12935 12950])
            ("HAVE_CANONICALIZE_FILE_NAME" variable (:constant-flag t) nil [13031 13058])
            ("HAVE_CFMAKERAW" variable (:constant-flag t) nil [13126 13140])
            ("HAVE_CFSETSPEED" variable (:constant-flag t) nil [13209 13224])
            ("HAVE_CLOCK_GETTIME" variable (:constant-flag t) nil [13296 13314])
            ("HAVE_CLOCK_SETTIME" variable (:constant-flag t) nil [13386 13404])
            ("HAVE_C_VARARRAYS" variable (:constant-flag t) nil [13757 13773])
            ("HAVE_DECL_ALARM" variable (:constant-flag t) nil [14694 14709])
            ("HAVE_DECL_ALIGNED_ALLOC" variable (:constant-flag t) nil [14813 14836])
            ("HAVE_DECL_CLEARERR_UNLOCKED" variable (:constant-flag t) nil [14944 14971])
            ("HAVE_DECL_ECVT" variable (:constant-flag t) nil [15180 15194])
            ("HAVE_DECL_EXECVPE" variable (:constant-flag t) nil [15292 15309])
            ("HAVE_DECL_FCLOSEALL" variable (:constant-flag t) nil [15409 15428])
            ("HAVE_DECL_FCVT" variable (:constant-flag t) nil [15523 15537])
            ("HAVE_DECL_FDOPENDIR" variable (:constant-flag t) nil [15637 15656])
            ("HAVE_DECL_FEOF_UNLOCKED" variable (:constant-flag t) nil [15760 15783])
            ("HAVE_DECL_FERROR_UNLOCKED" variable (:constant-flag t) nil [15889 15914])
            ("HAVE_DECL_FFLUSH_UNLOCKED" variable (:constant-flag t) nil [16020 16045])
            ("HAVE_DECL_FGETS_UNLOCKED" variable (:constant-flag t) nil [16150 16174])
            ("HAVE_DECL_FPUTC_UNLOCKED" variable (:constant-flag t) nil [16279 16303])
            ("HAVE_DECL_FPUTS_UNLOCKED" variable (:constant-flag t) nil [16408 16432])
            ("HAVE_DECL_FREAD_UNLOCKED" variable (:constant-flag t) nil [16537 16561])
            ("HAVE_DECL_FWRITE_UNLOCKED" variable (:constant-flag t) nil [16667 16692])
            ("HAVE_DECL_GCVT" variable (:constant-flag t) nil [16787 16801])
            ("HAVE_DECL_GETCHAR_UNLOCKED" variable (:constant-flag t) nil [16908 16934])
            ("HAVE_DECL_GETC_UNLOCKED" variable (:constant-flag t) nil [17038 17061])
            ("HAVE_DECL_GETDTABLESIZE" variable (:constant-flag t) nil [17165 17188])
            ("HAVE_DECL_LOCALTIME_R" variable (:constant-flag t) nil [17408 17429])
            ("HAVE_DECL_MEMMEM" variable (:constant-flag t) nil [17526 17542])
            ("HAVE_DECL_MEMRCHR" variable (:constant-flag t) nil [17640 17657])
            ("HAVE_DECL_PUTCHAR_UNLOCKED" variable (:constant-flag t) nil [17764 17790])
            ("HAVE_DECL_PUTC_UNLOCKED" variable (:constant-flag t) nil [17894 17917])
            ("HAVE_DECL_SECCOMP_FILTER_FLAG_TSYNC" variable (:constant-flag t) nil [18033 18068])
            ("HAVE_DECL_SECCOMP_SET_MODE_FILTER" variable (:constant-flag t) nil [18182 18215])
            ("HAVE_DECL_STRMODE" variable (:constant-flag t) nil [18313 18330])
            ("HAVE_DECL_STRNLEN" variable (:constant-flag t) nil [18428 18445])
            ("HAVE_DECL_STRTOIMAX" variable (:constant-flag t) nil [18545 18564])
            ("HAVE_DECL___FPENDING" variable (:constant-flag t) nil [18899 18919])
            ("HAVE_DIRENT_H" variable (:constant-flag t) nil [18989 19002])
            ("HAVE_DLADDR" variable (:constant-flag t) nil [19144 19155])
            ("HAVE_ENDGRENT" variable (:constant-flag t) nil [19382 19395])
            ("HAVE_ENDPWENT" variable (:constant-flag t) nil [19462 19475])
            ("HAVE_ENVIRON_DECL" variable (:constant-flag t) nil [19540 19557])
            ("HAVE_EXECINFO_H" variable (:constant-flag t) nil [19716 19731])
            ("HAVE_EXPLICIT_BZERO" variable (:constant-flag t) nil [19804 19823])
            ("HAVE_FACCESSAT" variable (:constant-flag t) nil [19988 20002])
            ("HAVE_FCHDIR" variable (:constant-flag t) nil [20142 20153])
            ("HAVE_FCHMOD" variable (:constant-flag t) nil [20218 20229])
            ("HAVE_FCHMODAT" variable (:constant-flag t) nil [20296 20309])
            ("HAVE_FCNTL" variable (:constant-flag t) nil [20373 20383])
            ("HAVE_FDOPENDIR" variable (:constant-flag t) nil [20451 20465])
            ("HAVE_FORK" variable (:constant-flag t) nil [20528 20537])
            ("HAVE_FREEIFADDRS" variable (:constant-flag t) nil [20607 20623])
            ("HAVE_FREETYPE" variable (:constant-flag t) nil [20701 20714])
            ("HAVE_FREE_POSIX" variable (:constant-flag t) nil [20795 20810])
            ("HAVE_FSEEKO" variable (:constant-flag t) nil [20898 20909])
            ("HAVE_FSTATAT" variable (:constant-flag t) nil [20975 20987])
            ("HAVE_FSYNC" variable (:constant-flag t) nil [21051 21061])
            ("HAVE_FT_FACE_GETCHARVARIANTINDEX" variable (:constant-flag t) nil [21147 21179])
            ("HAVE_FUTIMENS" variable (:constant-flag t) nil [21246 21259])
            ("HAVE_FUTIMES" variable (:constant-flag t) nil [21325 21337])
            ("HAVE_FUTIMESAT" variable (:constant-flag t) nil [21405 21419])
            ("HAVE_GAI_STRERROR" variable (:constant-flag t) nil [21490 21507])
            ("HAVE_GETADDRINFO_A" variable (:constant-flag t) nil [21734 21752])
            ("HAVE_GETCWD" variable (:constant-flag t) nil [21817 21828])
            ("HAVE_GETDTABLESIZE" variable (:constant-flag t) nil [21900 21918])
            ("HAVE_GETGRENT" variable (:constant-flag t) nil [21985 21998])
            ("HAVE_GETHOSTNAME" variable (:constant-flag t) nil [22166 22182])
            ("HAVE_GETIFADDRS" variable (:constant-flag t) nil [22251 22266])
            ("HAVE_GETOPT_H" variable (:constant-flag t) nil [22336 22349])
            ("HAVE_GETOPT_LONG_ONLY" variable (:constant-flag t) nil [22424 22445])
            ("HAVE_GETPAGESIZE" variable (:constant-flag t) nil [22515 22531])
            ("HAVE_GETPT" variable (:constant-flag t) nil [22595 22605])
            ("HAVE_GETPWENT" variable (:constant-flag t) nil [22672 22685])
            ("HAVE_GETRANDOM" variable (:constant-flag t) nil [22753 22767])
            ("HAVE_GETRLIMIT" variable (:constant-flag t) nil [22835 22849])
            ("HAVE_GETRUSAGE" variable (:constant-flag t) nil [22917 22931])
            ("HAVE_GETSOCKNAME" variable (:constant-flag t) nil [23001 23017])
            ("HAVE_GETTIMEOFDAY" variable (:constant-flag t) nil [23088 23105])
            ("HAVE_GET_CURRENT_DIR_NAME" variable (:constant-flag t) nil [23184 23209])
            ("HAVE_GIF" variable (:constant-flag t) nil [23342 23350])
            ("HAVE_GLIB" variable (:constant-flag t) nil [23402 23411])
            ("HAVE_GMP_H" variable (:constant-flag t) nil [23566 23576])
            ("HAVE_GNUTLS" variable (:constant-flag t) nil [23618 23629])
            ("HAVE_GRANTPT" variable (:constant-flag t) nil [23773 23785])
            ("HAVE_GSETTINGS" variable (:constant-flag t) nil [23835 23849])
            ("HAVE_GTK_FILE_SELECTION_NEW" variable (:constant-flag t) nil [23997 24024])
            ("HAVE_HARFBUZZ" variable (:constant-flag t) nil [24200 24213])
            ("HAVE_IEEE754_H" variable (:constant-flag t) nil [24284 24298])
            ("HAVE_IFADDRS_H" variable (:constant-flag t) nil [24369 24383])
            ("HAVE_INOTIFY" variable (:constant-flag t) nil [24573 24585])
            ("HAVE_INTTYPES_H" variable (:constant-flag t) nil [24657 24672])
            ("HAVE_ISBLANK" variable (:constant-flag t) nil [24738 24750])
            ("HAVE_ISWCTYPE" variable (:constant-flag t) nil [24817 24830])
            ("HAVE_JPEG" variable (:constant-flag t) nil [24909 24918])
            ("HAVE_LANGINFO_CODESET" variable (:constant-flag t) nil [25659 25680])
            ("HAVE_LANGINFO__NL_PAPER_WIDTH" variable (:constant-flag t) nil [25765 25794])
            ("HAVE_LCHMOD" variable (:constant-flag t) nil [25859 25870])
            ("HAVE_LIBSELINUX" variable (:constant-flag t) nil [26875 26890])
            ("HAVE_LIBXML2" variable (:constant-flag t) nil [27025 27037])
            ("HAVE_LIMITS_H" variable (:constant-flag t) nil [27206 27219])
            ("HAVE_LINUX_FILTER_H" variable (:constant-flag t) nil [27295 27314])
            ("HAVE_LINUX_FS_H" variable (:constant-flag t) nil [27386 27401])
            ("HAVE_LINUX_SECCOMP_H" variable (:constant-flag t) nil [27478 27498])
            ("HAVE_LINUX_SYSINFO" variable (:constant-flag t) nil [27564 27582])
            ("HAVE_LOCALTIME_R" variable (:constant-flag t) nil [27776 27792])
            ("HAVE_LOG2" variable (:constant-flag t) nil [27855 27864])
            ("HAVE_LONG_LONG_INT" variable (:constant-flag t) nil [27938 27956])
            ("HAVE_LRAND48" variable (:constant-flag t) nil [28022 28034])
            ("HAVE_LSTAT" variable (:constant-flag t) nil [28098 28108])
            ("HAVE_LUTIMES" variable (:constant-flag t) nil [28174 28186])
            ("HAVE_MALLOC_H" variable (:constant-flag t) nil [29058 29071])
            ("HAVE_MALLOC_POSIX" variable (:constant-flag t) nil [29260 29277])
            ("HAVE_MBSTATE_T" variable (:constant-flag t) nil [29340 29354])
            ("HAVE_MEMMEM" variable (:constant-flag t) nil [29419 29430])
            ("HAVE_MEMPCPY" variable (:constant-flag t) nil [29496 29508])
            ("HAVE_MEMRCHR" variable (:constant-flag t) nil [29574 29586])
            ("HAVE_MINMAX_IN_SYS_PARAM_H" variable (:constant-flag t) nil [29948 29974])
            ("HAVE_MKOSTEMP" variable (:constant-flag t) nil [30041 30054])
            ("HAVE_MMAP" variable (:constant-flag t) nil [30126 30135])
            ("HAVE_MODULES" variable (:constant-flag t) nil [30286 30298])
            ("HAVE_NET_IF_H" variable (:constant-flag t) nil [30867 30880])
            ("HAVE_NEWLOCALE" variable (:constant-flag t) nil [30948 30962])
            ("HAVE_PDUMPER" variable (:constant-flag t) nil [31500 31512])
            ("HAVE_PERSONALITY_ADDR_NO_RANDOMIZE" variable (:constant-flag t) nil [31588 31622])
            ("HAVE_PIPE2" variable (:constant-flag t) nil [31686 31696])
            ("HAVE_PNG" variable (:constant-flag t) nil [31755 31763])
            ("HAVE_POSIX_MADVISE" variable (:constant-flag t) nil [31835 31853])
            ("HAVE_POSIX_OPENPT" variable (:constant-flag t) nil [32019 32036])
            ("HAVE_PROCFS" variable (:constant-flag t) nil [32095 32106])
            ("HAVE_PSELECT" variable (:constant-flag t) nil [32172 32184])
            ("HAVE_PTHREAD" variable (:constant-flag t) nil [32340 32352])
            ("HAVE_PTHREAD_H" variable (:constant-flag t) nil [32423 32437])
            ("HAVE_PTHREAD_SETNAME_NP" variable (:constant-flag t) nil [32514 32537])
            ("HAVE_PTHREAD_SIGMASK" variable (:constant-flag t) nil [32946 32966])
            ("HAVE_PTYS" variable (:constant-flag t) nil [33027 33036])
            ("HAVE_PTY_H" variable (:constant-flag t) nil [33103 33113])
            ("HAVE_PWD_H" variable (:constant-flag t) nil [33180 33190])
            ("HAVE_RANDOM" variable (:constant-flag t) nil [33255 33266])
            ("HAVE_READLINK" variable (:constant-flag t) nil [33418 33431])
            ("HAVE_READLINKAT" variable (:constant-flag t) nil [33500 33515])
            ("HAVE_REALPATH" variable (:constant-flag t) nil [33582 33595])
            ("HAVE_RECVFROM" variable (:constant-flag t) nil [33662 33675])
            ("HAVE_RINT" variable (:constant-flag t) nil [33738 33747])
            ("HAVE_SANITIZER_LSAN_INTERFACE_H" variable (:constant-flag t) nil [33895 33926])
            ("HAVE_SBRK" variable (:constant-flag t) nil [33989 33998])
            ("HAVE_SCHED_GETAFFINITY" variable (:constant-flag t) nil [34074 34096])
            ("HAVE_SCHED_GETAFFINITY_LIKE_GLIBC" variable (:constant-flag t) nil [34183 34216])
            ("HAVE_SELECT" variable (:constant-flag t) nil [34388 34399])
            ("HAVE_SENDTO" variable (:constant-flag t) nil [34464 34475])
            ("HAVE_SETITIMER" variable (:constant-flag t) nil [34636 34650])
            ("HAVE_SETLOCALE" variable (:constant-flag t) nil [34718 34732])
            ("HAVE_SETRLIMIT" variable (:constant-flag t) nil [34800 34814])
            ("HAVE_SHUTDOWN" variable (:constant-flag t) nil [34881 34894])
            ("HAVE_SIGDESCR_NP" variable (:constant-flag t) nil [35045 35061])
            ("HAVE_SIGSETJMP" variable (:constant-flag t) nil [35406 35420])
            ("HAVE_SIGSET_T" variable (:constant-flag t) nil [35489 35502])
            ("HAVE_SNPRINTF" variable (:constant-flag t) nil [35569 35582])
            ("HAVE_SOCKETS" variable (:constant-flag t) nil [35654 35666])
            ("HAVE_SOUND" variable (:constant-flag t) nil [35723 35733])
            ("HAVE_STACK_OVERFLOW_HANDLING" variable (:constant-flag t) nil [35905 35933])
            ("HAVE_STATEMENT_EXPRESSIONS" variable (:constant-flag t) nil [36075 36101])
            ("HAVE_STDINT_H" variable (:constant-flag t) nil [36171 36184])
            ("HAVE_STDIO_EXT_H" variable (:constant-flag t) nil [36257 36273])
            ("HAVE_STDIO_H" variable (:constant-flag t) nil [36342 36354])
            ("HAVE_STDLIB_H" variable (:constant-flag t) nil [36424 36437])
            ("HAVE_STPCPY" variable (:constant-flag t) nil [36502 36513])
            ("HAVE_STRINGS_H" variable (:constant-flag t) nil [36584 36598])
            ("HAVE_STRING_H" variable (:constant-flag t) nil [36668 36681])
            ("HAVE_STRSIGNAL" variable (:constant-flag t) nil [36749 36763])
            ("HAVE_STRTOIMAX" variable (:constant-flag t) nil [36831 36845])
            ("HAVE_STRUCT_ATTRIBUTE_ALIGNED" variable (:constant-flag t) nil [37045 37074])
            ("HAVE_STRUCT_DIRENT_D_TYPE" variable (:constant-flag t) nil [37180 37205])
            ("HAVE_STRUCT_IFREQ_IFR_ADDR" variable (:constant-flag t) nil [37280 37306])
            ("HAVE_STRUCT_IFREQ_IFR_BROADADDR" variable (:constant-flag t) nil [37504 37535])
            ("HAVE_STRUCT_IFREQ_IFR_FLAGS" variable (:constant-flag t) nil [37611 37638])
            ("HAVE_STRUCT_IFREQ_IFR_HWADDR" variable (:constant-flag t) nil [37715 37743])
            ("HAVE_STRUCT_IFREQ_IFR_NETMASK" variable (:constant-flag t) nil [37821 37850])
            ("HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC" variable (:constant-flag t) nil [38409 38441])
            ("HAVE_STRUCT_TM_TM_ZONE" variable (:constant-flag t) nil [38888 38910])
            ("HAVE_STRUCT_UNIPAIR_UNICODE" variable (:constant-flag t) nil [38986 39013])
            ("HAVE_SYMLINK" variable (:constant-flag t) nil [39079 39091])
            ("HAVE_SYNC" variable (:constant-flag t) nil [39154 39163])
            ("HAVE_SYS_CDEFS_H" variable (:constant-flag t) nil [39576 39592])
            ("HAVE_SYS_MOUNT_H" variable (:constant-flag t) nil [40059 40075])
            ("HAVE_SYS_PARAM_H" variable (:constant-flag t) nil [40148 40164])
            ("HAVE_SYS_RANDOM_H" variable (:constant-flag t) nil [40330 40347])
            ("HAVE_SYS_RESOURCE_H" variable (:constant-flag t) nil [40423 40442])
            ("HAVE_SYS_SELECT_H" variable (:constant-flag t) nil [40516 40533])
            ("HAVE_SYS_SOCKET_H" variable (:constant-flag t) nil [40607 40624])
            ("HAVE_SYS_SOUNDCARD_H" variable (:constant-flag t) nil [40701 40721])
            ("HAVE_SYS_STATFS_H" variable (:constant-flag t) nil [40795 40812])
            ("HAVE_SYS_STAT_H" variable (:constant-flag t) nil [40884 40899])
            ("HAVE_SYS_SYSINFO_H" variable (:constant-flag t) nil [41068 41086])
            ("HAVE_SYS_TIME_H" variable (:constant-flag t) nil [41352 41367])
            ("HAVE_SYS_TYPES_H" variable (:constant-flag t) nil [41440 41456])
            ("HAVE_SYS_UN_H" variable (:constant-flag t) nil [41526 41539])
            ("HAVE_SYS_UTSNAME_H" variable (:constant-flag t) nil [41614 41632])
            ("HAVE_SYS_VFS_H" variable (:constant-flag t) nil [41703 41717])
            ("HAVE_SYS_WAIT_H" variable (:constant-flag t) nil [41894 41909])
            ("HAVE_TERM_H" variable (:constant-flag t) nil [41977 41988])
            ("HAVE_TIFF" variable (:constant-flag t) nil [42057 42066])
            ("HAVE_TIMEGM" variable (:constant-flag t) nil [42131 42142])
            ("HAVE_TIMERFD" variable (:constant-flag t) nil [42224 42236])
            ("HAVE_TIMER_GETOVERRUN" variable (:constant-flag t) nil [42311 42332])
            ("HAVE_TIMER_SETTIME" variable (:constant-flag t) nil [42404 42422])
            ("HAVE_TM_GMTOFF" variable (:constant-flag t) nil [42575 42589])
            ("HAVE_TM_ZONE" variable (:constant-flag t) nil [42707 42719])
            ("HAVE_TRUNC" variable (:constant-flag t) nil [42868 42878])
            ("HAVE_TYPEOF" variable (:constant-flag t) nil [42944 42955])
            ("HAVE_UNISTD_H" variable (:constant-flag t) nil [43206 43219])
            ("HAVE_UNSIGNED_LONG_LONG_INT" variable (:constant-flag t) nil [43302 43329])
            ("HAVE_UTIMENSAT" variable (:constant-flag t) nil [43479 43493])
            ("HAVE_UTMP_H" variable (:constant-flag t) nil [43561 43572])
            ("HAVE_VFORK" variable (:constant-flag t) nil [43744 43754])
            ("HAVE_WCHAR_H" variable (:constant-flag t) nil [43972 43984])
            ("HAVE_WCHAR_T" variable (:constant-flag t) nil [44041 44053])
            ("HAVE_WINDOW_SYSTEM" variable (:constant-flag t) nil [44167 44185])
            ("HAVE_WORKING_FORK" variable (:constant-flag t) nil [44322 44339])
            ("HAVE_WORKING_UTIMES" variable (:constant-flag t) nil [44525 44544])
            ("HAVE_WORKING_VFORK" variable (:constant-flag t) nil [44592 44610])
            ("HAVE_X11" variable (:constant-flag t) nil [44774 44782])
            ("HAVE_X11R6" variable (:constant-flag t) nil [44860 44870])
            ("HAVE_X11R6_XIM" variable (:constant-flag t) nil [44939 44953])
            ("HAVE_XDBE" variable (:constant-flag t) nil [45190 45199])
            ("HAVE_XFIXES" variable (:constant-flag t) nil [45263 45274])
            ("HAVE_XIM" variable (:constant-flag t) nil [45394 45402])
            ("HAVE_XINERAMA" variable (:constant-flag t) nil [45468 45481])
            ("HAVE_XKB" variable (:constant-flag t) nil [45542 45550])
            ("HAVE_XPM" variable (:constant-flag t) nil [45617 45625])
            ("HAVE_XRANDR" variable (:constant-flag t) nil [45689 45700])
            ("HAVE_XRMSETDATABASE" variable (:constant-flag t) nil [45843 45862])
            ("HAVE_XSCREENNUMBEROFSCREEN" variable (:constant-flag t) nil [45942 45968])
            ("HAVE_XSCREENRESOURCESTRING" variable (:constant-flag t) nil [46048 46074])
            ("HAVE_X_I18N" variable (:constant-flag t) nil [46208 46219])
            ("HAVE_X_WINDOWS" variable (:constant-flag t) nil [46366 46380])
            ("HAVE_ZLIB" variable (:constant-flag t) nil [46446 46455])
            ("HAVE__SETJMP" variable (:constant-flag t) nil [46515 46527])
            ("HAVE___BUILTIN_EXPECT" variable (:constant-flag t) nil [46635 46656])
            ("HAVE___BUILTIN_FRAME_ADDRESS" variable (:constant-flag t) nil [46872 46900])
            ("HAVE___BUILTIN_UNWIND_INIT" variable (:constant-flag t) nil [46980 47006])
            ("HAVE___EXECUTABLE_START" variable (:constant-flag t) nil [47083 47106])
            ("HAVE___INLINE" variable (:constant-flag t) nil [47185 47198])
            ("INTERRUPT_INPUT" variable (:constant-flag t) nil [47689 47704])
            ("IS_ANY_SEP" variable (:constant-flag t) nil [47774 47784])
            ("IS_DEVICE_SEP" variable (:constant-flag t) nil [47879 47892])
            ("IS_DIRECTORY_SEP" variable (:constant-flag t) nil [47967 47983])
            ("LINUX_SYSINFO_UNIT" variable (:constant-flag t) nil [48268 48286])
            ("LSTAT_FOLLOWS_SLASHED_SYMLINK" variable (:constant-flag t) nil [48386 48415])
            ("MAIL_USE_FLOCK" variable (:constant-flag t) nil [48662 48676])
            ("MALLOC_0_IS_NONNULL" variable (:constant-flag t) nil [48932 48951])
            ("__USE_MINGW_ANSI_STDIO" variable (:constant-flag t) nil [49034 49056])
            ("MODULES_SUFFIX" variable (:constant-flag t) nil [49218 49232])
            ("NARROWPROTO" variable (:constant-flag t) nil [49397 49408])
            ("NATIVE_ELISP_SUFFIX" variable (:constant-flag t) nil [49469 49488])
            ("NULL_DEVICE" variable (:constant-flag t) nil [50604 50615])
            ("PACKAGE_BUGREPORT" variable (:constant-flag t) nil [50906 50923])
            ("PACKAGE_NAME" variable (:constant-flag t) nil [51004 51016])
            ("PACKAGE_STRING" variable (:constant-flag t) nil [51097 51111])
            ("PACKAGE_TARNAME" variable (:constant-flag t) nil [51200 51215])
            ("PACKAGE_URL" variable (:constant-flag t) nil [51281 51292])
            ("PACKAGE_VERSION" variable (:constant-flag t) nil [51385 51400])
            ("POLL_FOR_INPUT" variable (:constant-flag t) nil [51664 51678])
            ("PROMOTED_MODE_T" variable (:constant-flag t) nil [51784 51799])
            ("PTY_ITERATION" variable (:constant-flag t) nil [52325 52338])
            ("PTY_NAME_SPRINTF" variable (:constant-flag t) nil [52458 52474])
            ("PTY_OPEN" variable (:constant-flag t) nil [52531 52539])
            ("PTY_TTY_NAME_SPRINTF" variable (:constant-flag t) nil [52762 52782])
            ("SEPCHAR" variable (:constant-flag t) nil [53708 53715])
            ("SIGNALS_VIA_CHARACTERS" variable (:constant-flag t) nil [53882 53904])
            ("STAT_STATFS2_FRSIZE" variable (:constant-flag t) nil [55239 55258])
            ("STAT_STATVFS" variable (:constant-flag t) nil [55638 55650])
            ("STDC_HEADERS" variable (:constant-flag t) nil [55953 55965])
            ("SYSTEM_MALLOC" variable (:constant-flag t) nil [56128 56141])
            ("SYSTEM_TYPE" variable (:constant-flag t) nil [56221 56232])
            ("TERMINFO" variable (:constant-flag t) nil [56392 56400])
            ("TERMINFO_DEFINES_BC" variable (:constant-flag t) nil [56495 56514])
            ("TERM_HEADER" variable (:constant-flag t) nil [56585 56596])
            ("THREADS_ENABLED" variable (:constant-flag t) nil [56670 56685])
            ("TIME_T_IS_SIGNED" variable (:constant-flag t) nil [56736 56752])
            ("TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC" variable (:constant-flag t) nil [57008 57053])
            ("UNIX98_PTYS" variable (:constant-flag t) nil [57288 57299])
            ("USABLE_FIONREAD" variable (:constant-flag t) nil [57352 57367])
            ("USABLE_SIGIO" variable (:constant-flag t) nil [57417 57429])
            ("USER_FULL_NAME" variable (:constant-flag t) nil [57478 57492])
            ("USE_ACL" variable (:constant-flag t) nil [57580 57587])
            ("USE_CAIRO" variable (:constant-flag t) nil [57633 57642])
            ("USE_FILE_NOTIFY" variable (:constant-flag t) nil [57701 57716])
            ("USE_GTK" variable (:constant-flag t) nil [57760 57767])
            ("_ALL_SOURCE" variable (:constant-flag t) nil [58137 58148])
            ("_DARWIN_C_SOURCE" variable (:constant-flag t) nil [58235 58251])
            ("__EXTENSIONS__" variable (:constant-flag t) nil [58338 58352])
            ("_HPUX_ALT_XOPEN_SOCKET_API" variable (:constant-flag t) nil [58619 58645])
            ("_NETBSD_SOURCE" variable (:constant-flag t) nil [59000 59014])
            ("_OPENBSD_SOURCE" variable (:constant-flag t) nil [59162 59177])
            ("_POSIX_PTHREAD_SEMANTICS" variable (:constant-flag t) nil [59520 59544])
            ("__STDC_WANT_IEC_60559_ATTRIBS_EXT__" variable (:constant-flag t) nil [59670 59705])
            ("__STDC_WANT_IEC_60559_BFP_EXT__" variable (:constant-flag t) nil [59827 59858])
            ("__STDC_WANT_IEC_60559_DFP_EXT__" variable (:constant-flag t) nil [59980 60011])
            ("__STDC_WANT_IEC_60559_FUNCS_EXT__" variable (:constant-flag t) nil [60135 60168])
            ("__STDC_WANT_IEC_60559_TYPES_EXT__" variable (:constant-flag t) nil [60292 60325])
            ("__STDC_WANT_LIB_EXT2__" variable (:constant-flag t) nil [60438 60460])
            ("__STDC_WANT_MATH_SPEC_FUNCS__" variable (:constant-flag t) nil [60575 60604])
            ("_TANDEM_SOURCE" variable (:constant-flag t) nil [60686 60700])
            ("USE_TOOLKIT_SCROLL_BARS" variable (:constant-flag t) nil [60931 60954])
            ("USE_UNLOCKED_IO" variable (:constant-flag t) nil [61012 61027])
            ("USE_XCB" variable (:constant-flag t) nil [61164 61171])
            ("USE_XIM" variable (:constant-flag t) nil [61238 61245])
            ("USG" variable (:constant-flag t) nil [61384 61387])
            ("XRegisterIMInstantiateCallback_arg6" variable (:constant-flag t) nil [62576 62611])
            ("_GL_GNUC_PREREQ" variable (:constant-flag t) nil [62982 62997])
            ("_USE_STD_STAT" variable (:constant-flag t) nil [65625 65638])
            ("_GL_ASYNC_SAFE" variable (:constant-flag t) nil [67746 67760])
            ("_GL_HAS_ATTRIBUTE" variable (:constant-flag t) nil [67987 68004])
            ("_GL_ATTR_alloc_size" variable (:constant-flag t) nil [68036 68055])
            ("_GL_ATTR_always_inline" variable (:constant-flag t) nil [68088 68110])
            ("_GL_ATTR_artificial" variable (:constant-flag t) nil [68143 68162])
            ("_GL_ATTR_cold" variable (:constant-flag t) nil [68195 68208])
            ("_GL_ATTR_const" variable (:constant-flag t) nil [68241 68255])
            ("_GL_ATTR_deprecated" variable (:constant-flag t) nil [68289 68308])
            ("_GL_ATTR_diagnose_if" variable (:constant-flag t) nil [68341 68361])
            ("_GL_ATTR_error" variable (:constant-flag t) nil [68373 68387])
            ("_GL_ATTR_externally_visible" variable (:constant-flag t) nil [68420 68447])
            ("_GL_ATTR_fallthrough" variable (:constant-flag t) nil [68480 68500])
            ("_GL_ATTR_format" variable (:constant-flag t) nil [68533 68548])
            ("_GL_ATTR_leaf" variable (:constant-flag t) nil [68581 68594])
            ("_GL_ATTR_malloc" variable (:constant-flag t) nil [68627 68642])
            ("_GL_ATTR_may_alias" variable (:constant-flag t) nil [68727 68745])
            ("_GL_ATTR_noinline" variable (:constant-flag t) nil [68786 68803])
            ("_GL_ATTR_nonnull" variable (:constant-flag t) nil [68836 68852])
            ("_GL_ATTR_nonstring" variable (:constant-flag t) nil [68885 68903])
            ("_GL_ATTR_nothrow" variable (:constant-flag t) nil [68936 68952])
            ("_GL_ATTR_packed" variable (:constant-flag t) nil [68985 69000])
            ("_GL_ATTR_pure" variable (:constant-flag t) nil [69033 69046])
            ("_GL_ATTR_returns_nonnull" variable (:constant-flag t) nil [69080 69104])
            ("_GL_ATTR_sentinel" variable (:constant-flag t) nil [69137 69154])
            ("_GL_ATTR_unused" variable (:constant-flag t) nil [69187 69202])
            ("_GL_ATTR_warn_unused_result" variable (:constant-flag t) nil [69235 69262])
            ("_GL_HAS_C_ATTRIBUTE" variable (:constant-flag t) nil [69402 69421])
            ("_GL_ATTRIBUTE_ALLOC_SIZE" variable (:constant-flag t) nil [69923 69947])
            ("_GL_ATTRIBUTE_ALWAYS_INLINE" variable (:constant-flag t) nil [70253 70280])
            ("_GL_ATTRIBUTE_ARTIFICIAL" variable (:constant-flag t) nil [70617 70641])
            ("_GL_ATTRIBUTE_COLD" variable (:constant-flag t) nil [71157 71175])
            ("_GL_ATTRIBUTE_CONST" variable (:constant-flag t) nil [71697 71716])
            ("_GL_ATTRIBUTE_DEALLOC" variable (:constant-flag t) nil [72218 72239])
            ("_GL_ATTRIBUTE_DEALLOC_FREE" variable (:constant-flag t) nil [72261 72287])
            ("_GL_ATTRIBUTE_DEPRECATED" variable (:constant-flag t) nil [72852 72876])
            ("_GL_ATTRIBUTE_ERROR" variable (:constant-flag t) nil [73557 73576])
            ("_GL_ATTRIBUTE_WARNING" variable (:constant-flag t) nil [73591 73612])
            ("_GL_ATTRIBUTE_EXTERNALLY_VISIBLE" variable (:constant-flag t) nil [73942 73974])
            ("_GL_ATTRIBUTE_FALLTHROUGH" variable (:constant-flag t) nil [74522 74547])
            ("_GL_ATTRIBUTE_FORMAT" variable (:constant-flag t) nil [75149 75169])
            ("_GL_ATTRIBUTE_LEAF" variable (:constant-flag t) nil [75569 75587])
            ("_GL_ATTRIBUTE_MALLOC" variable (:constant-flag t) nil [75836 75856])
            ("_GL_ATTRIBUTE_MAY_ALIAS" variable (:constant-flag t) nil [76295 76318])
            ("_GL_ATTRIBUTE_MAYBE_UNUSED" variable (:constant-flag t) nil [76917 76943])
            ("_GL_UNUSED" variable (:constant-flag t) nil [77040 77050])
            ("_UNUSED_PARAMETER_" variable (:constant-flag t) nil [77126 77144])
            ("_GL_ATTRIBUTE_NODISCARD" variable (:constant-flag t) nil [77678 77701])
            ("_GL_ATTRIBUTE_NOINLINE" variable (:constant-flag t) nil [77940 77962])
            ("_GL_ATTRIBUTE_NONNULL" variable (:constant-flag t) nil [78309 78330])
            ("_GL_ATTRIBUTE_NONSTRING" variable (:constant-flag t) nil [78686 78709])
            ("_GL_ATTRIBUTE_NOTHROW" variable (:constant-flag t) nil [79030 79051])
            ("_GL_ATTRIBUTE_PACKED" variable (:constant-flag t) nil [79461 79481])
            ("_GL_ATTRIBUTE_PURE" variable (:constant-flag t) nil [79975 79993])
            ("_GL_ATTRIBUTE_RETURNS_NONNULL" variable (:constant-flag t) nil [80269 80298])
            ("_GL_ATTRIBUTE_SENTINEL" variable (:constant-flag t) nil [80715 80737])
            ("_GL_ATTRIBUTE_UNUSED" variable (:constant-flag t) nil [80903 80923])
            ("_GL_UNUSED_LABEL" variable (:constant-flag t) nil [81406 81422])
            ("_GL_INLINE" variable (:constant-flag t) nil [84503 84513])
            ("_GL_EXTERN_INLINE" variable (:constant-flag t) nil [84530 84547])
            ("_GL_EXTERN_INLINE_IN_USE" variable (:constant-flag t) nil [84571 84595])
            ("_GL_INLINE" variable (:constant-flag t) nil [84921 84931])
            ("_GL_EXTERN_INLINE" variable (:constant-flag t) nil [84963 84980])
            ("_GL_EXTERN_INLINE_IN_USE" variable (:constant-flag t) nil [84997 85021])
            ("_GL_INLINE_HEADER_BEGIN" variable (:constant-flag t) nil [86040 86063])
            ("_GL_INLINE_HEADER_END" variable (:constant-flag t) nil [86073 86094])
            ("_GL_CMP" variable (:constant-flag t) nil [87577 87584])
            ("my_strftime" variable (:constant-flag t) nil [87868 87879])
            ("restrict" variable (:constant-flag t) nil [89644 89652])
            ("subprocesses" variable (:constant-flag t) nil [90384 90396])
            ("conf_post.h" include (:system-flag t) nil [90554 90576]))          
      :file "config.h"
      :pointmax 90644
      :fsize 90645
      :lastmodtime '(25315 54886 465205 979000)
      :unmatched-syntax '((close-paren 84720 . 84721) (symbol 84689 . 84720) (symbol 84681 . 84688) (punctuation 84680 . 84681) (punctuation 84678 . 84679) (punctuation 84677 . 84678) (close-paren 84492 . 84493) (symbol 84461 . 84492) (symbol 84453 . 84460) (punctuation 84452 . 84453) (punctuation 84450 . 84451) (punctuation 84449 . 84450) (close-paren 84440 . 84441) (semantic-list 84303 . 84440) (punctuation 84301 . 84302) (symbol "1" 84272 . 84292) (punctuation 84270 . 84271) (punctuation 84269 . 84270) (symbol "1" 84248 . 84268) (symbol 84240 . 84247) (punctuation 84238 . 84239))
      :lexical-table 
        '(("AMPERSAND_FULL_NAME" . ((number "1" 1361 . 1362)))
          ("DIRECTORY_SEP" . ((string "'/'" 3040 . 3043)))
          ("GETTIMEOFDAY_TIMEZONE" . ((VOID "void" 7233 . 7237)))
          ("GNULIB_TEMPNAME" . ((number "1" 9944 . 9945)))
          ("HAVE_ACCEPT4" . ((number "1" 10191 . 10192)))
          ("HAVE_DECL_GCVT" . ((number "1" 16802 . 16803)))
          ("HAVE_FSTATAT" . ((number "1" 20988 . 20989)))
          ("HAVE_GETCWD" . ((number "1" 21829 . 21830)))
          ("HAVE_PTHREAD" . ((number "1" 32353 . 32354)))
          ("HAVE_PTHREAD_H" . ((number "1" 32438 . 32439)))
          ("HAVE_SCHED_GETAFFINITY_LIKE_GLIBC" . ((number "1" 34217 . 34218)))
          ("HAVE_SETRLIMIT" . ((number "1" 34815 . 34816)))
          ("HAVE_SOUND" . ((number "1" 35734 . 35735)))
          ("HAVE_STATEMENT_EXPRESSIONS" . ((number "1" 36102 . 36103)))
          ("HAVE_STDINT_H" . ((number "1" 36185 . 36186)))
          ("HAVE_STPCPY" . ((number "1" 36514 . 36515)))
          ("HAVE_SYS_PARAM_H" . ((number "1" 40165 . 40166)))
          ("HAVE_SYS_RESOURCE_H" . ((number "1" 40443 . 40444)))
          ("HAVE_SYS_STATFS_H" . ((number "1" 40813 . 40814)))
          ("HAVE_TERM_H" . ((number "1" 41989 . 41990)))
          ("HAVE_TIFF" . ((number "1" 42067 . 42068)))
          ("HAVE_WINDOW_SYSTEM" . ((number "1" 44186 . 44187)))
          ("HAVE_X11R6" . ((number "1" 44871 . 44872)))
          ("HAVE_XINERAMA" . ((number "1" 45482 . 45483)))
          ("HAVE___BUILTIN_FRAME_ADDRESS" . ((number "1" 46901 . 46902)))
          ("NARROWPROTO" . ((number "1" 49409 . 49410)))
          ("PACKAGE_TARNAME" . ((string "\"emacs\"" 51216 . 51223)))
          ("TERM_HEADER" . ((string "\"gtkutil.h\"" 56597 . 56608)))
          ("_TANDEM_SOURCE" . ((number "1" 60701 . 60702)))
          ("_GL_ATTR_always_inline" . ((symbol "_GL_GNUC_PREREQ" 68111 . 68126) (semantic-list "(3, 2)" 68127 . 68133)))
          ("_GL_ATTR_pure" . ((symbol "_GL_GNUC_PREREQ" 69047 . 69062) (semantic-list "(2, 96)" 69063 . 69070)))
          ("_GL_ATTRIBUTE_MAYBE_UNUSED" . ((symbol "_GL_ATTRIBUTE_UNUSED" 76944 . 76964)))
          ("_GL_ATTRIBUTE_NODISCARD")
          ("GCC_LINT" . ((number "1" 6049 . 6050)))
          ("HAVE_CFSETSPEED" . ((number "1" 13225 . 13226)))
          ("HAVE_C_VARARRAYS" . ((number "1" 13774 . 13775)))
          ("HAVE_DECL_FEOF_UNLOCKED" . ((number "1" 15784 . 15785)))
          ("HAVE_DECL_FERROR_UNLOCKED" . ((number "1" 15915 . 15916)))
          ("HAVE_DECL_FFLUSH_UNLOCKED" . ((number "1" 16046 . 16047)))
          ("HAVE_DECL_FREAD_UNLOCKED" . ((number "1" 16562 . 16563)))
          ("HAVE_DECL_GETC_UNLOCKED" . ((number "1" 17062 . 17063)))
          ("HAVE_DECL_PUTCHAR_UNLOCKED" . ((number "1" 17791 . 17792)))
          ("HAVE_FUTIMESAT" . ((number "1" 21420 . 21421)))
          ("HAVE_GAI_STRERROR" . ((number "1" 21508 . 21509)))
          ("HAVE_LANGINFO_CODESET" . ((number "1" 25681 . 25682)))
          ("HAVE_LOCALTIME_R" . ((number "1" 27793 . 27794)))
          ("HAVE_MODULES" . ((number "1" 30299 . 30300)))
          ("HAVE_POSIX_OPENPT" . ((number "1" 32037 . 32038)))
          ("HAVE_PTYS" . ((number "1" 33037 . 33038)))
          ("HAVE_RINT" . ((number "1" 33748 . 33749)))
          ("HAVE_SANITIZER_LSAN_INTERFACE_H" . ((number "1" 33927 . 33928)))
          ("HAVE_STRUCT_IFREQ_IFR_NETMASK" . ((number "1" 37851 . 37852)))
          ("HAVE_TIMER_GETOVERRUN" . ((number "1" 42333 . 42334)))
          ("HAVE_UTMP_H" . ((number "1" 43573 . 43574)))
          ("HAVE_XKB" . ((number "1" 45551 . 45552)))
          ("HAVE_XPM" . ((number "1" 45626 . 45627)))
          ("HAVE_X_I18N" . ((number "1" 46220 . 46221)))
          ("MALLOC_0_IS_NONNULL" . ((number "1" 48952 . 48953)))
          ("PROMOTED_MODE_T" . ((symbol "mode_t" 51800 . 51806)))
          ("USE_CAIRO" . ((number "1" 57643 . 57644)))
          ("XRegisterIMInstantiateCallback_arg6" . ((symbol "XPointer" 62612 . 62620)))
          ("_GL_ATTR_artificial" . ((symbol "_GL_GNUC_PREREQ" 68163 . 68178) (semantic-list "(4, 3)" 68179 . 68185)))
          ("_GL_ATTR_format" . ((symbol "_GL_GNUC_PREREQ" 68549 . 68564) (semantic-list "(2, 7)" 68565 . 68571)))
          ("_GL_ATTRIBUTE_FORMAT" (spp-arg-list ("spec") 75169 . 75175))
          ("restrict" . ((symbol "__restrict__" 89653 . 89665)))
          ("COPYRIGHT" . ((string "\"Copyright (C) 2021 Free Software Foundation, Inc.\"" 2570 . 2621)))
          ("GNULIB_CANONICALIZE_LGPL" . ((number "1" 7751 . 7752)))
          ("HAVE_DECL_FPUTC_UNLOCKED" . ((number "1" 16304 . 16305)))
          ("HAVE_ENDPWENT" . ((number "1" 19476 . 19477)))
          ("HAVE_ENVIRON_DECL" . ((number "1" 19558 . 19559)))
          ("HAVE_EXECINFO_H" . ((number "1" 19732 . 19733)))
          ("HAVE_FSYNC" . ((number "1" 21062 . 21063)))
          ("HAVE_FUTIMES" . ((number "1" 21338 . 21339)))
          ("HAVE_GETDTABLESIZE" . ((number "1" 21919 . 21920)))
          ("HAVE_GETRUSAGE" . ((number "1" 22932 . 22933)))
          ("HAVE_GMP_H" . ((number "1" 23577 . 23578)))
          ("HAVE_MEMPCPY" . ((number "1" 29509 . 29510)))
          ("HAVE_PTHREAD_SIGMASK" . ((number "1" 32967 . 32968)))
          ("HAVE_RECVFROM" . ((number "1" 33676 . 33677)))
          ("HAVE_SCHED_GETAFFINITY" . ((number "1" 34097 . 34098)))
          ("HAVE_STDLIB_H" . ((number "1" 36438 . 36439)))
          ("HAVE_STRUCT_IFREQ_IFR_HWADDR" . ((number "1" 37744 . 37745)))
          ("HAVE_SYS_UN_H" . ((number "1" 41540 . 41541)))
          ("HAVE_WORKING_FORK" . ((number "1" 44340 . 44341)))
          ("HAVE_XFIXES" . ((number "1" 45275 . 45276)))
          ("HAVE_XRMSETDATABASE" . ((number "1" 45863 . 45864)))
          ("HAVE___BUILTIN_UNWIND_INIT" . ((number "1" 47007 . 47008)))
          ("IS_DIRECTORY_SEP" (spp-arg-list ("_c_") 47983 . 47988) . ((semantic-list "((_c_) == DIRECTORY_SEP)" 47989 . 48013)))
          ("NATIVE_ELISP_SUFFIX" . ((string "\".eln\"" 49489 . 49495)))
          ("PACKAGE_BUGREPORT" . ((string "\"bug-gnu-emacs@gnu.org\"" 50924 . 50947)))
          ("USABLE_SIGIO" . ((number "1" 57430 . 57431)))
          ("USE_ACL" . ((number "0" 57588 . 57589)))
          ("USE_GTK" . ((number "1" 57768 . 57769)))
          ("USE_UNLOCKED_IO" . ((symbol "GNULIB_STDIO_SINGLE_THREAD" 61028 . 61054)))
          ("_USE_STD_STAT" . ((number "1" 65639 . 65640)))
          ("_GL_ATTR_may_alias" . ((symbol "_GL_GNUC_PREREQ" 68746 . 68761) (semantic-list "(3, 3)" 68762 . 68768)))
          ("_GL_ATTRIBUTE_CONST")
          ("my_strftime" . ((symbol "nstrftime" 87880 . 87889)))
          ("subprocesses" . ((number "1" 90397 . 90398)))
          ("DIR_TO_FD" (spp-arg-list ("Dir_p") 3236 . 3243) . ((punctuation "-" 3244 . 3245) (number "1" 3245 . 3246)))
          ("GC_SETJMP_WORKS" . ((number "1" 6708 . 6709)))
          ("GETXATTR_WITH_POSIX_ACLS" . ((number "1" 7378 . 7379)))
          ("HAVE_DECL_FPUTS_UNLOCKED" . ((number "1" 16433 . 16434)))
          ("HAVE_DECL_LOCALTIME_R" . ((number "1" 17430 . 17431)))
          ("HAVE_DECL_SECCOMP_FILTER_FLAG_TSYNC" . ((number "1" 18069 . 18070)))
          ("HAVE_FT_FACE_GETCHARVARIANTINDEX" . ((number "1" 21180 . 21181)))
          ("HAVE_GETOPT_LONG_ONLY" . ((number "1" 22446 . 22447)))
          ("HAVE_GETRLIMIT" . ((number "1" 22850 . 22851)))
          ("HAVE_GRANTPT" . ((number "1" 23786 . 23787)))
          ("HAVE_INOTIFY" . ((number "1" 24586 . 24587)))
          ("HAVE_INTTYPES_H" . ((number "1" 24673 . 24674)))
          ("HAVE_LCHMOD" . ((number "1" 25871 . 25872)))
          ("HAVE_LSTAT" . ((number "1" 28109 . 28110)))
          ("HAVE_MALLOC_H" . ((number "1" 29072 . 29073)))
          ("HAVE_MMAP" . ((number "1" 30136 . 30137)))
          ("HAVE_SHUTDOWN" . ((number "1" 34895 . 34896)))
          ("HAVE_SYS_MOUNT_H" . ((number "1" 40076 . 40077)))
          ("HAVE_SYS_TIME_H" . ((number "1" 41368 . 41369)))
          ("HAVE_TIMEGM" . ((number "1" 42143 . 42144)))
          ("HAVE_VFORK" . ((number "1" 43755 . 43756)))
          ("HAVE_X_WINDOWS" . ((number "1" 46381 . 46382)))
          ("INTERRUPT_INPUT" . ((number "1" 47705 . 47706)))
          ("IS_ANY_SEP" (spp-arg-list ("_c_") 47784 . 47789) . ((semantic-list "(IS_DIRECTORY_SEP (_c_))" 47790 . 47814)))
          ("NULL_DEVICE" . ((string "\"/dev/null\"" 50616 . 50627)))
          ("PACKAGE_NAME" . ((string "\"GNU Emacs\"" 51017 . 51028)))
          ("SYSTEM_TYPE" . ((string "\"gnu/linux\"" 56233 . 56244)))
          ("TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC" . ((number "1" 57054 . 57055)))
          ("_OPENBSD_SOURCE" . ((number "1" 59178 . 59179)))
          ("__STDC_WANT_IEC_60559_TYPES_EXT__" . ((number "1" 60326 . 60327)))
          ("_GL_ATTR_const" . ((symbol "_GL_GNUC_PREREQ" 68256 . 68271) (semantic-list "(2, 95)" 68272 . 68279)))
          ("_GL_ATTR_diagnose_if" . ((number "0" 68362 . 68363)))
          ("_GL_ATTR_sentinel" . ((symbol "_GL_GNUC_PREREQ" 69155 . 69170) (semantic-list "(4, 0)" 69171 . 69177)))
          ("_UNUSED_PARAMETER_" . ((symbol "_GL_ATTRIBUTE_MAYBE_UNUSED" 77145 . 77171)))
          ("_GL_ATTRIBUTE_PACKED")
          ("_GL_INLINE_HEADER_END")
          ("_GL_CMP" (spp-arg-list ("n1" "n2") 87584 . 87592) . ((semantic-list "(((n1) > (n2)) - ((n1) < (n2)))" 87593 . 87624)))
          ("EMACS_CONFIG_FEATURES" . ((string "\"CAIRO FREETYPE GIF GLIB GMP GNUTLS GSETTINGS HARFBUZZ JPEG LIBSELINUX LIBXML2 MODULES NOTIFY INOTIFY PDUMPER PNG SECCOMP SOUND THREADS TIFF TOOLKIT_SCROLL_BARS X11 XDBE XIM XPM GTK2 ZLIB\"" 4069 . 4257)))
          ("HAVE_ALIGNED_ALLOC" . ((number "1" 12505 . 12506)))
          ("HAVE_DECL_FGETS_UNLOCKED" . ((number "1" 16175 . 16176)))
          ("HAVE_DECL_SECCOMP_SET_MODE_FILTER" . ((number "1" 18216 . 18217)))
          ("HAVE_FREEIFADDRS" . ((number "1" 20624 . 20625)))
          ("HAVE_GLIB" . ((number "1" 23412 . 23413)))
          ("HAVE_GSETTINGS" . ((number "1" 23850 . 23851)))
          ("HAVE_IFADDRS_H" . ((number "1" 24384 . 24385)))
          ("HAVE_LANGINFO__NL_PAPER_WIDTH" . ((number "1" 25795 . 25796)))
          ("HAVE_LIMITS_H" . ((number "1" 27220 . 27221)))
          ("HAVE_LOG2" . ((number "1" 27865 . 27866)))
          ("HAVE_MALLOC_POSIX" . ((number "1" 29278 . 29279)))
          ("HAVE_MINMAX_IN_SYS_PARAM_H" . ((number "1" 29975 . 29976)))
          ("HAVE_MKOSTEMP" . ((number "1" 30055 . 30056)))
          ("HAVE_PERSONALITY_ADDR_NO_RANDOMIZE" . ((number "1" 31623 . 31624)))
          ("HAVE_TRUNC" . ((number "1" 42879 . 42880)))
          ("HAVE_X11" . ((number "1" 44783 . 44784)))
          ("LSTAT_FOLLOWS_SLASHED_SYMLINK" . ((number "1" 48416 . 48417)))
          ("PACKAGE_STRING" . ((string "\"GNU Emacs 29.0.50\"" 51112 . 51131)))
          ("STDC_HEADERS" . ((number "1" 55966 . 55967)))
          ("USER_FULL_NAME" . 
              ((symbol "pw" 57493 . 57495) (punctuation "-" 57495 . 57496) (punctuation ">" 57496 . 57497) (symbol "pw_gecos" 57497 . 57505)))
          ("USE_XCB" . ((number "1" 61172 . 61173)))
          ("_GL_ATTR_alloc_size" . ((symbol "_GL_GNUC_PREREQ" 68056 . 68071) (semantic-list "(4, 3)" 68072 . 68078)))
          ("_GL_ATTR_deprecated" . ((symbol "_GL_GNUC_PREREQ" 68309 . 68324) (semantic-list "(3, 1)" 68325 . 68331)))
          ("_GL_ATTR_unused" . ((symbol "_GL_GNUC_PREREQ" 69203 . 69218) (semantic-list "(2, 7)" 69219 . 69225)))
          ("_GL_ATTR_warn_unused_result" . ((symbol "_GL_GNUC_PREREQ" 69263 . 69278) (semantic-list "(3, 4)" 69279 . 69285)))
          ("_GL_ATTRIBUTE_DEALLOC" (spp-arg-list ("f" "i") 72239 . 72245))
          ("_GL_ATTRIBUTE_EXTERNALLY_VISIBLE")
          ("_GL_INLINE" . ((EXTERN "extern" 84932 . 84938) (INLINE "inline" 84939 . 84945)))
          ("GNULIB_FSCANF" . ((number "1" 8455 . 8456)))
          ("HAVE_BYTESWAP_H" . ((number "1" 12951 . 12952)))
          ("HAVE_DECL_EXECVPE" . ((number "1" 15310 . 15311)))
          ("HAVE_DECL_GETCHAR_UNLOCKED" . ((number "1" 16935 . 16936)))
          ("HAVE_FACCESSAT" . ((number "1" 20003 . 20004)))
          ("HAVE_FREE_POSIX" . ((number "1" 20811 . 20812)))
          ("HAVE_ISWCTYPE" . ((number "1" 24831 . 24832)))
          ("HAVE_NET_IF_H" . ((number "1" 30881 . 30882)))
          ("HAVE_SYS_RANDOM_H" . ((number "1" 40348 . 40349)))
          ("IS_DEVICE_SEP" (spp-arg-list ("_c_") 47892 . 47897) . ((number "0" 47898 . 47899)))
          ("USABLE_FIONREAD" . ((number "1" 57368 . 57369)))
          ("_ALL_SOURCE" . ((number "1" 58149 . 58150)))
          ("__EXTENSIONS__" . ((number "1" 58353 . 58354)))
          ("_GL_ATTR_cold" . ((symbol "_GL_GNUC_PREREQ" 68209 . 68224) (semantic-list "(4, 3)" 68225 . 68231)))
          ("_GL_HAS_C_ATTRIBUTE" (spp-arg-list ("attr") 69421 . 69427) . ((number "0" 69428 . 69429)))
          ("_GL_ATTRIBUTE_ARTIFICIAL")
          ("_GL_ATTRIBUTE_WARNING" (spp-arg-list ("msg") 73612 . 73617))
          ("_GL_ATTRIBUTE_LEAF")
          ("_GL_ATTRIBUTE_MAY_ALIAS")
          ("_GL_ATTRIBUTE_SENTINEL" (spp-arg-list ("pos") 80737 . 80742))
          ("_GL_INLINE_HEADER_BEGIN")
          ("FLEXIBLE_ARRAY_MEMBER")
          ("FUNC_REALPATH_WORKS" . ((number "1" 5892 . 5893)))
          ("HAVE_ALLOCA_H" . ((number "1" 12714 . 12715)))
          ("HAVE_DECL_ALIGNED_ALLOC" . ((number "1" 14837 . 14838)))
          ("HAVE_DECL_FCLOSEALL" . ((number "1" 15429 . 15430)))
          ("HAVE_DECL_FDOPENDIR" . ((number "1" 15657 . 15658)))
          ("HAVE_DECL_STRTOIMAX" . ((number "1" 18565 . 18566)))
          ("HAVE_DIRENT_H" . ((number "1" 19003 . 19004)))
          ("HAVE_FCHDIR" . ((number "1" 20154 . 20155)))
          ("HAVE_FCHMODAT" . ((number "1" 20310 . 20311)))
          ("HAVE_FCNTL" . ((number "1" 20384 . 20385)))
          ("HAVE_GETADDRINFO_A" . ((number "1" 21753 . 21754)))
          ("HAVE_GETTIMEOFDAY" . ((number "1" 23106 . 23107)))
          ("HAVE_LINUX_FS_H" . ((number "1" 27402 . 27403)))
          ("HAVE_MEMMEM" . ((number "1" 29431 . 29432)))
          ("HAVE_NEWLOCALE" . ((number "1" 30963 . 30964)))
          ("HAVE_POSIX_MADVISE" . ((number "1" 31854 . 31855)))
          ("HAVE_RANDOM" . ((number "1" 33267 . 33268)))
          ("HAVE_SETLOCALE" . ((number "1" 34733 . 34734)))
          ("HAVE_SIGSET_T" . ((number "1" 35503 . 35504)))
          ("HAVE_STDIO_EXT_H" . ((number "1" 36274 . 36275)))
          ("HAVE_STRTOIMAX" . ((number "1" 36846 . 36847)))
          ("HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC" . ((number "1" 38442 . 38443)))
          ("HAVE_STRUCT_TM_TM_ZONE" . ((number "1" 38911 . 38912)))
          ("HAVE_SYS_SELECT_H" . ((number "1" 40534 . 40535)))
          ("HAVE_SYS_SYSINFO_H" . ((number "1" 41087 . 41088)))
          ("HAVE_TM_GMTOFF" . ((number "1" 42590 . 42591)))
          ("HAVE_WORKING_VFORK" . ((number "1" 44611 . 44612)))
          ("MODULES_SUFFIX" . ((string "\".so\"" 49233 . 49238)))
          ("PTY_OPEN" . 
              ((DO "do" 52540 . 52542) (semantic-list "{ fd = posix_openpt (O_RDWR | O_CLOEXEC | O_NOCTTY); if (fd < 0 && errno == EINVAL) fd = posix_openpt (O_RDWR | O_NOCTTY); }" 52543 . 52667) (WHILE "while" 52668 . 52673) (semantic-list "(false)" 52674 . 52681)))
          ("SIGNALS_VIA_CHARACTERS" . ((number "1" 53905 . 53906)))
          ("STAT_STATVFS" . ((number "1" 55651 . 55652)))
          ("THREADS_ENABLED" . ((number "1" 56686 . 56687)))
          ("_HPUX_ALT_XOPEN_SOCKET_API" . ((number "1" 58646 . 58647)))
          ("_NETBSD_SOURCE" . ((number "1" 59015 . 59016)))
          ("__STDC_WANT_IEC_60559_ATTRIBS_EXT__" . ((number "1" 59706 . 59707)))
          ("__STDC_WANT_IEC_60559_BFP_EXT__" . ((number "1" 59859 . 59860)))
          ("_GL_HAS_ATTRIBUTE" (spp-arg-list ("attr") 68004 . 68010) . ((spp-symbol-merge ((symbol "_GL_ATTR_" 68011 . 68020) (symbol "attr" 68022 . 68026)) 68011 . 68026)))
          ("_GL_ATTR_malloc" . ((symbol "_GL_GNUC_PREREQ" 68643 . 68658) (semantic-list "(3, 0)" 68659 . 68665)))
          ("_GL_ATTR_noinline" . ((symbol "_GL_GNUC_PREREQ" 68804 . 68819) (semantic-list "(3, 1)" 68820 . 68826)))
          ("_GL_ATTR_nonnull" . ((symbol "_GL_GNUC_PREREQ" 68853 . 68868) (semantic-list "(3, 3)" 68869 . 68875)))
          ("_GL_ATTRIBUTE_ALWAYS_INLINE")
          ("_GL_ATTRIBUTE_DEALLOC_FREE" . ((symbol "_GL_ATTRIBUTE_DEALLOC" 72288 . 72309) (semantic-list "(free, 1)" 72310 . 72319)))
          ("_GL_ATTRIBUTE_PURE")
          ("_GL_EXTERN_INLINE" . ((EXTERN "extern" 84981 . 84987)))
          ("GNULIB_CLOSE_STREAM" . ((number "1" 7933 . 7934)))
          ("GNULIB_MKOSTEMP" . ((number "1" 8629 . 8630)))
          ("GNULIB_SCANF" . ((number "1" 9310 . 9311)))
          ("HAVE_CLOCK_GETTIME" . ((number "1" 13315 . 13316)))
          ("HAVE_FORK" . ((number "1" 20538 . 20539)))
          ("HAVE_FSEEKO" . ((number "1" 20910 . 20911)))
          ("HAVE_GETGRENT" . ((number "1" 21999 . 22000)))
          ("HAVE_GETPT" . ((number "1" 22606 . 22607)))
          ("HAVE_GETSOCKNAME" . ((number "1" 23018 . 23019)))
          ("HAVE_JPEG" . ((number "1" 24919 . 24920)))
          ("HAVE_LUTIMES" . ((number "1" 28187 . 28188)))
          ("HAVE_PDUMPER" . ((number "1" 31513 . 31514)))
          ("HAVE_PROCFS" . ((number "1" 32107 . 32108)))
          ("HAVE_REALPATH" . ((number "1" 33596 . 33597)))
          ("HAVE_SBRK" . ((number "1" 33999 . 34000)))
          ("HAVE_SYMLINK" . ((number "1" 39092 . 39093)))
          ("HAVE_SYNC" . ((number "1" 39164 . 39165)))
          ("HAVE_SYS_SOCKET_H" . ((number "1" 40625 . 40626)))
          ("HAVE_SYS_STAT_H" . ((number "1" 40900 . 40901)))
          ("HAVE_SYS_WAIT_H" . ((number "1" 41910 . 41911)))
          ("HAVE_TIMERFD" . ((number "1" 42237 . 42238)))
          ("HAVE_XIM" . ((number "1" 45403 . 45404)))
          ("HAVE_XRANDR" . ((number "1" 45701 . 45702)))
          ("PTY_ITERATION" . 
              ((INT "int" 52339 . 52342) (symbol "i" 52343 . 52344) (punctuation ";" 52344 . 52345) (FOR "for" 52346 . 52349) (semantic-list "(i = 0; i < 1; i++)" 52350 . 52369)))
          ("SEPCHAR" . ((string "':'" 53716 . 53719)))
          ("TERMINFO" . ((number "1" 56401 . 56402)))
          ("TIME_T_IS_SIGNED" . ((number "1" 56753 . 56754)))
          ("UNIX98_PTYS" . ((number "1" 57300 . 57301)))
          ("USE_FILE_NOTIFY" . ((number "1" 57717 . 57718)))
          ("__STDC_WANT_LIB_EXT2__" . ((number "1" 60461 . 60462)))
          ("USE_XIM" . ((number "1" 61246 . 61247)))
          ("_GL_ATTR_nonstring" . ((symbol "_GL_GNUC_PREREQ" 68904 . 68919) (semantic-list "(8, 0)" 68920 . 68926)))
          ("_GL_ATTRIBUTE_ALLOC_SIZE" (spp-arg-list ("args") 69947 . 69953))
          ("_GL_ATTRIBUTE_MALLOC")
          ("_GL_ATTRIBUTE_RETURNS_NONNULL")
          ("EMACS_CONFIG_H")
          ("HAVE_DECL_CLEARERR_UNLOCKED" . ((number "1" 14972 . 14973)))
          ("HAVE_FUTIMENS" . ((number "1" 21260 . 21261)))
          ("HAVE_GETIFADDRS" . ((number "1" 22267 . 22268)))
          ("HAVE_HARFBUZZ" . ((number "1" 24214 . 24215)))
          ("HAVE_LINUX_SECCOMP_H" . ((number "1" 27499 . 27500)))
          ("HAVE_LONG_LONG_INT" . ((number "1" 27957 . 27958)))
          ("HAVE_READLINK" . ((number "1" 33432 . 33433)))
          ("HAVE_SENDTO" . ((number "1" 34476 . 34477)))
          ("HAVE_SIGDESCR_NP" . ((number "1" 35062 . 35063)))
          ("HAVE_SNPRINTF" . ((number "1" 35583 . 35584)))
          ("HAVE_STRUCT_IFREQ_IFR_FLAGS" . ((number "1" 37639 . 37640)))
          ("HAVE_SYS_CDEFS_H" . ((number "1" 39593 . 39594)))
          ("HAVE_SYS_TYPES_H" . ((number "1" 41457 . 41458)))
          ("HAVE_UNSIGNED_LONG_LONG_INT" . ((number "1" 43330 . 43331)))
          ("HAVE_WCHAR_T" . ((number "1" 44054 . 44055)))
          ("HAVE_XSCREENRESOURCESTRING" . ((number "1" 46075 . 46076)))
          ("LINUX_SYSINFO_UNIT" . ((number "1" 48287 . 48288)))
          ("PACKAGE_URL" . ((string "\"https://www.gnu.org/software/emacs/\"" 51293 . 51330)))
          ("__STDC_WANT_IEC_60559_DFP_EXT__" . ((number "1" 60012 . 60013)))
          ("__STDC_WANT_MATH_SPEC_FUNCS__" . ((number "1" 60605 . 60606)))
          ("_GL_ATTR_error" . ((symbol "_GL_GNUC_PREREQ" 68388 . 68403) (semantic-list "(4, 3)" 68404 . 68410)))
          ("_GL_ATTR_externally_visible" . ((symbol "_GL_GNUC_PREREQ" 68448 . 68463) (semantic-list "(4, 1)" 68464 . 68470)))
          ("_GL_ATTRIBUTE_DEPRECATED")
          ("_GL_ATTRIBUTE_NOINLINE")
          ("_GL_ATTRIBUTE_UNUSED")
          ("_GL_UNUSED_LABEL")
          ("_GL_EXTERN_INLINE_IN_USE")
          ("EMACS_CONFIGURATION" . ((string "\"x86_64-pc-linux-gnu\"" 3951 . 3972)))
          ("GNULIB_FDOPENDIR" . ((number "1" 8285 . 8286)))
          ("HAVE_CANONICALIZE_FILE_NAME" . ((number "1" 13059 . 13060)))
          ("HAVE_DECL_GETDTABLESIZE" . ((number "1" 17189 . 17190)))
          ("HAVE_DECL___FPENDING" . ((number "1" 18920 . 18921)))
          ("HAVE_GETHOSTNAME" . ((number "1" 22183 . 22184)))
          ("HAVE_GETRANDOM" . ((number "1" 22768 . 22769)))
          ("HAVE_IEEE754_H" . ((number "1" 24299 . 24300)))
          ("HAVE_ISBLANK" . ((number "1" 24751 . 24752)))
          ("HAVE_LIBXML2" . ((number "1" 27038 . 27039)))
          ("HAVE_LRAND48" . ((number "1" 28035 . 28036)))
          ("HAVE_PTHREAD_SETNAME_NP" . ((number "1" 32538 . 32539)))
          ("HAVE_PTY_H" . ((number "1" 33114 . 33115)))
          ("HAVE_SIGSETJMP" . ((number "1" 35421 . 35422)))
          ("HAVE_STRING_H" . ((number "1" 36682 . 36683)))
          ("HAVE_STRSIGNAL" . ((number "1" 36764 . 36765)))
          ("HAVE_STRUCT_DIRENT_D_TYPE" . ((number "1" 37206 . 37207)))
          ("HAVE_STRUCT_IFREQ_IFR_ADDR" . ((number "1" 37307 . 37308)))
          ("HAVE_WCHAR_H" . ((number "1" 43985 . 43986)))
          ("HAVE_ZLIB" . ((number "1" 46456 . 46457)))
          ("HAVE___BUILTIN_EXPECT" . ((number "1" 46657 . 46658)))
          ("HAVE___INLINE" . ((number "1" 47199 . 47200)))
          ("MAIL_USE_FLOCK" . ((number "1" 48677 . 48678)))
          ("POLL_FOR_INPUT" . ((number "1" 51679 . 51680)))
          ("PTY_TTY_NAME_SPRINTF" . ((semantic-list "{ char *ptyname = 0; sigset_t blocked; sigemptyset (&blocked); sigaddset (&blocked, SIGCHLD); pthread_sigmask (SIG_BLOCK, &blocked, 0); if (grantpt (fd) != -1 && unlockpt (fd) != -1) ptyname = ptsname(fd); pthread_sigmask (SIG_UNBLOCK, &blocked, 0); if (!ptyname) { emacs_close (fd); return -1; } snprintf (pty_name, PTY_NAME_SIZE, \"%s\", ptyname); }" 52783 . 53132)))
          ("__STDC_WANT_IEC_60559_FUNCS_EXT__" . ((number "1" 60169 . 60170)))
          ("USG")
          ("GNULIB_FACCESSAT" . ((number "1" 8109 . 8110)))
          ("GNU_LINUX")
          ("HAVE_DECL_FWRITE_UNLOCKED" . ((number "1" 16693 . 16694)))
          ("HAVE_DECL_STRNLEN" . ((number "1" 18446 . 18447)))
          ("HAVE_ENDGRENT" . ((number "1" 19396 . 19397)))
          ("HAVE_FCHMOD" . ((number "1" 20230 . 20231)))
          ("HAVE_FREETYPE" . ((number "1" 20715 . 20716)))
          ("HAVE_GETOPT_H" . ((number "1" 22350 . 22351)))
          ("HAVE_GIF" . ((number "1" 23351 . 23352)))
          ("HAVE_LINUX_FILTER_H" . ((number "1" 27315 . 27316)))
          ("HAVE_LINUX_SYSINFO" . ((number "1" 27583 . 27584)))
          ("HAVE_MBSTATE_T" . ((number "1" 29355 . 29356)))
          ("HAVE_MEMRCHR" . ((number "1" 29587 . 29588)))
          ("HAVE_PIPE2" . ((number "1" 31697 . 31698)))
          ("HAVE_SETITIMER" . ((number "1" 34651 . 34652)))
          ("HAVE_STRUCT_ATTRIBUTE_ALIGNED" . ((number "1" 37075 . 37076)))
          ("HAVE_STRUCT_UNIPAIR_UNICODE" . ((number "1" 39014 . 39015)))
          ("HAVE_SYS_SOUNDCARD_H" . ((number "1" 40722 . 40723)))
          ("HAVE_SYS_UTSNAME_H" . ((number "1" 41633 . 41634)))
          ("HAVE_TIMER_SETTIME" . ((number "1" 42423 . 42424)))
          ("HAVE_UNISTD_H" . ((number "1" 43220 . 43221)))
          ("HAVE_X11R6_XIM" . ((number "1" 44954 . 44955)))
          ("HAVE_XDBE" . ((number "1" 45200 . 45201)))
          ("HAVE___EXECUTABLE_START" . ((number "1" 47107 . 47108)))
          ("PTY_NAME_SPRINTF")
          ("_GL_GNUC_PREREQ" (spp-arg-list ("major" "minor") 62997 . 63011) . ((semantic-list "((major) < __GNUC__ + ((minor) <= __GNUC_MINOR__))" 63018 . 63068)))
          ("_GL_ASYNC_SAFE")
          ("_GL_ATTR_fallthrough" . ((symbol "_GL_GNUC_PREREQ" 68501 . 68516) (semantic-list "(7, 0)" 68517 . 68523)))
          ("_GL_ATTR_leaf" . ((symbol "_GL_GNUC_PREREQ" 68595 . 68610) (semantic-list "(4, 6)" 68611 . 68617)))
          ("_GL_ATTRIBUTE_ERROR" (spp-arg-list ("msg") 73576 . 73581))
          ("_GL_ATTRIBUTE_NONSTRING")
          ("_GL_ATTRIBUTE_NOTHROW")
          ("DEFAULT_SOUND_DEVICE" . ((string "\"/dev/dsp\"" 2875 . 2885)))
          ("EMACS_CONFIG_OPTIONS" . ((string "\"--without-pop\"" 4337 . 4352)))
          ("GNULIB_STDIO_SINGLE_THREAD" . ((number "1" 9770 . 9771)))
          ("HAVE_CLOCK_SETTIME" . ((number "1" 13405 . 13406)))
          ("HAVE_DECL_ALARM" . ((number "1" 14710 . 14711)))
          ("HAVE_DECL_ECVT" . ((number "1" 15195 . 15196)))
          ("HAVE_DECL_MEMRCHR" . ((number "1" 17658 . 17659)))
          ("HAVE_DECL_PUTC_UNLOCKED" . ((number "1" 17918 . 17919)))
          ("HAVE_DECL_STRMODE" . ((number "0" 18331 . 18332)))
          ("HAVE_DLADDR" . ((number "1" 19156 . 19157)))
          ("HAVE_GETPAGESIZE" . ((number "1" 22532 . 22533)))
          ("HAVE_LIBSELINUX" . ((number "1" 26891 . 26892)))
          ("HAVE_READLINKAT" . ((number "1" 33516 . 33517)))
          ("HAVE_SOCKETS" . ((number "1" 35667 . 35668)))
          ("HAVE_STRUCT_IFREQ_IFR_BROADADDR" . ((number "1" 37536 . 37537)))
          ("HAVE_TM_ZONE" . ((number "1" 42720 . 42721)))
          ("HAVE_TYPEOF" . ((number "1" 42956 . 42957)))
          ("HAVE_UTIMENSAT" . ((number "1" 43494 . 43495)))
          ("HAVE_WORKING_UTIMES" . ((number "1" 44545 . 44546)))
          ("HAVE__SETJMP" . ((number "1" 46528 . 46529)))
          ("__USE_MINGW_ANSI_STDIO" . ((number "1" 49057 . 49058)))
          ("PACKAGE_VERSION" . ((string "\"29.0.50\"" 51401 . 51410)))
          ("STAT_STATFS2_FRSIZE" . ((number "1" 55259 . 55260)))
          ("USE_TOOLKIT_SCROLL_BARS" . ((number "1" 60955 . 60956)))
          ("_GL_ATTR_nothrow" . ((symbol "_GL_GNUC_PREREQ" 68953 . 68968) (semantic-list "(3, 3)" 68969 . 68975)))
          ("_GL_ATTR_returns_nonnull" . ((symbol "_GL_GNUC_PREREQ" 69105 . 69120) (semantic-list "(4, 9)" 69121 . 69127)))
          ("_GL_UNUSED" . ((symbol "_GL_ATTRIBUTE_MAYBE_UNUSED" 77051 . 77077)))
          ("_GL_ATTRIBUTE_NONNULL" (spp-arg-list ("args") 78330 . 78336))
          ("GETGROUPS_T" . ((symbol "gid_t" 6952 . 6957)))
          ("HAVE_ALLOCA" . ((number "1" 12650 . 12651)))
          ("HAVE_CFMAKERAW" . ((number "1" 13141 . 13142)))
          ("HAVE_DECL_FCVT" . ((number "1" 15538 . 15539)))
          ("HAVE_DECL_MEMMEM" . ((number "1" 17543 . 17544)))
          ("HAVE_EXPLICIT_BZERO" . ((number "1" 19824 . 19825)))
          ("HAVE_FDOPENDIR" . ((number "1" 20466 . 20467)))
          ("HAVE_GETPWENT" . ((number "1" 22686 . 22687)))
          ("HAVE_GET_CURRENT_DIR_NAME" . ((number "1" 23210 . 23211)))
          ("HAVE_GNUTLS" . ((number "1" 23630 . 23631)))
          ("HAVE_GTK_FILE_SELECTION_NEW" . ((number "1" 24025 . 24026)))
          ("HAVE_PNG" . ((number "1" 31764 . 31765)))
          ("HAVE_PSELECT" . ((number "1" 32185 . 32186)))
          ("HAVE_PWD_H" . ((number "1" 33191 . 33192)))
          ("HAVE_SELECT" . ((number "1" 34400 . 34401)))
          ("HAVE_STACK_OVERFLOW_HANDLING" . ((number "1" 35934 . 35935)))
          ("HAVE_STDIO_H" . ((number "1" 36355 . 36356)))
          ("HAVE_STRINGS_H" . ((number "1" 36599 . 36600)))
          ("HAVE_SYS_VFS_H" . ((number "1" 41718 . 41719)))
          ("HAVE_XSCREENNUMBEROFSCREEN" . ((number "1" 45969 . 45970)))
          ("SYSTEM_MALLOC" . ((number "1" 56142 . 56143)))
          ("TERMINFO_DEFINES_BC" . ((number "1" 56515 . 56516)))
          ("_DARWIN_C_SOURCE" . ((number "1" 58252 . 58253)))
          ("_POSIX_PTHREAD_SEMANTICS" . ((number "1" 59545 . 59546)))
          ("_GL_ATTR_packed" . ((symbol "_GL_GNUC_PREREQ" 69001 . 69016) (semantic-list "(2, 7)" 69017 . 69023)))
          ("_GL_ATTRIBUTE_COLD")
          ("_GL_ATTRIBUTE_FALLTHROUGH" . ((semantic-list "((void) 0)" 74548 . 74558)))
          )
)
    (semanticdb-table "semanticdb-table-e5e2e4"
      :file "conf_post.h"
      :fsize 14820
      :lastmodtime '(25315 53065 766489 16000)))
  :file "!home!spd!Programming!CPP!exam!emacs!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
