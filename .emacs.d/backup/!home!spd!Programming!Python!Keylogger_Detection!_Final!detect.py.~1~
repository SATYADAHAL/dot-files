from pathlib import Path
import os
import re

def print_opened_fp(pid):  
    working_directory=f"/proc/{pid}/fd/"
    opened_fp=os.listdir(working_directory)[3:]
    opened_fp_resolved=[]

    for fp in opened_fp:
        if (str(Path(working_directory+fp).resolve())!="/dev/input/event2"):
            opened_fp_resolved.append(str(Path(working_directory+fp).resolve()))
    print("Other opened file pointers: Might be the log file.",end="\n  ")
    if(len(opened_fp_resolved)<=5):
        print(*opened_fp_resolved,sep=f"\n  {opened_fp_resolved.index(opened_fp_resolved[0])}")
    else:
        print("  Error: Too many file pointers opened.")

def get_event_num():
    y=[]
    arr=[]
    with open("/proc/bus/input/devices","r") as f:
        x=f.read()
        y=re.findall("H: Handlers=sysrq kbd.*",x)
    for items in y:
        val=items.strip(" ").split(" ")[-1][5:]
        arr.append(val)
    return arr
def pid_info(pid):
    program_name =""
    cmdline=""
    cwd=""
    cwd=str(Path(f"/proc/{pid}/cwd").resolve())
    with open(f"/proc/{pid}/comm","r") as f:
        lst=f.readlines()
        program_name=lst[0].strip()
    with open(f"/proc/{pid}/cmdline","r") as f:
        lst=f.readlines()
        cmdline=lst[0].strip()
    print(f"\nProcess ID: {pid}")
    print(f"Program Name: {program_name}")
    print(f"Command Line: {cmdline}")
    print(f"Working Directory: {cwd}")
    print_opened_fp(pid)

files=os.listdir("/proc")
final_lst=[]
pid_using_kbd=[]

if(os.geteuid()!=0):
    print("You need root acces.")
    exit(1)
key_event_files=get_event_num();
for items in files:
    if(items.isdigit()):
        final_lst.append(items)
    else:
        pass

for i in final_lst:
    try:
        tmp=os.listdir(f"/proc/{i}/fd")
        for key_file_num in key_event_files:
            for items,index in enumerate(tmp):
                if(str(Path(f"/proc/{i}/fd/{items}").resolve())==f"/dev/input/event{key_file_num}"):
                    if(i not in pid_using_kbd):
                        pid_using_kbd.append(i)
    except PermissionError:
        print("Permission Error")
        exit(1)
for pid in pid_using_kbd:
    pid_info(pid)
