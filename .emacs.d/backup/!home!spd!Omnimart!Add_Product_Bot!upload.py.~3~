import requests
from bs4 import BeautifulSoup
import csv
import lxml
import threading
import re

def filter_url(stri):
    final_str=""
    stri=stri.lower()
    for char in stri:
        temp=re.search("[a-zA-Z0-9- ]",char)
        if temp!=None:
            final_str=final_str+char
    final_str=re.sub("-+", " ",final_str) #remove repeated "-"
    final_str=re.sub("\s+", "-",final_str) #remove whitespace
    return final_str

product_detail = ["Brugse Zot BiÃ¨re Belgee Blond Flesesen 6 x 33 cl",
                  "10.39",
                  "https://cdn.carrefour.eu/1200_05214841_5425017240020_00.jpeg",
                  "Brugse Zot Blond is een goudblond bier met een rijke schuimkraag en een fruitig en kruidig aroma.  Artisanaal natuurbier van hoge gisting  met nagisting op de fles",
                  "Alcoholpercentage Alcohol (%) 6 Minimum leeftijd Verboden aan -16 jarigen. Verboden aan -16 jarigen"]

def upload_data(product_detail):
    if len(product_detail)!=5:
        print("Array lenght error")
        return -1
    LOGIN_URL = "https://omnimart.be/admin/login"
    login_form = {

        "email": "product@example.com",

        "password": "Price123$",

        "_token": ""
    }


    # Login part

    session = requests.Session()  # Everthing will be done under this session object
    response = session.get(LOGIN_URL)
    soup = BeautifulSoup(response.text, 'lxml')
    csrfToken = soup.find_all('meta', attrs={'name': 'csrf-token'})[0]['content']
    print(f"CsrfToken:{csrfToken} ")
    login_form["_token"] = csrfToken
    login_response = session.post(LOGIN_URL, data=login_form)
    if (login_response.status_code == 200):  # Check if login was succesfull
        print("Logged in succesfully...")

    else:
        print("Could not login in. Exiting the program....")
        exit(1)

    # Now we need to generate new product number;


    CREATE_PRODUCT_URL = "https://omnimart.be/admin/catalog/products/create"

    create_product_form = {"_token": csrfToken,
                        "type": "simple",
                        "attribute_family_id": "1",
                        "sku": ""
                        }
    res = session.post(CREATE_PRODUCT_URL, data=create_product_form)
    product_num=''
    if(res.status_code == 200):
        product_num = res.url.split("/")[-1]
        print(f"Product number created succesfully...\nProduct Num: {product_num}")
    else:
        print("Could not create Product.....\nExiting program")
        exit(1)


    # Final product form edit url

    product_edit_url = res.url

    soup = BeautifulSoup(res.text, "lxml")

    sku = soup.find(id="sku")['value']


    price = str(round(float(product_detail[1])+0.15*float(product_detail[1]),2))
    url__key=filter_url(product_detail[0])
    product_data = {

        'channel': (None, 'default'),

        'locale': (None, 'nl'),

        '_token': (None, csrfToken),  # Done

        '_method': (None, 'PUT'),

        'sku': (None, sku),

        'product_number': (None, ''),

        'name': (None, product_detail[0].strip()),  # Needs to filled manually

        'url_key': (None,url__key),

        'tax_category_id': (None, '1'),  # Needs to filled manually

        'visible_individually': (None, '1'),

        'guest_checkout': (None, '1'),

        'status': (None, '1'),

        'color': (None, '1'),

        'size': (None, '1'),  # Needs to filled manually

        'vendor_id': (None, '3'),  # 3 ==> Carrrefour

        'product_food_type_id': (None, '2'),  # 2==> NonFood Item

        'short_description': (None, f'<p>{product_detail[-2]}</p>'),

        # Needs to filled manually
        'description': (None, f'<p>{product_detail[-1]}</p>'),

        'meta_title': (None, ''),

        'meta_keywords': (None, ''),

        'meta_description': (None, ''),

        'price': (None, price),  # Needs to filled manually

        'cost': (None, ''),

        'special_price': (None, ''),

        'special_price_from': (None, ''),

        'special_price_to': (None, ''),

        'length': (None, ''),

        'width': (None, ''),

        'height': (None, ''),

        'weight': (None, '1'),  # Needs to filled manually
        'inventories[1]': (None, '0'),

        'images[image_1]': (None, ''),
        'images[]': ("", "", "application/octet-stream"),
        'copied_link[]': (None, product_detail[2]),

        'categories[]': (None, '1904'),  # Needs to filled manually
        'channels[]': (None, '1')

    }
    res = session.post(product_edit_url, files=product_data)
    print(res.status_code)
    with open("uploaded.csv","a") as out_f:
        writer=csv.writer(out_f)
        writer.writerow([product_detail[2].split("_")[-3],product_num])

with open("./files/test.csv", 'r') as file:
    csvreader = csv.reader(file)
    for items in csvreader:
        upload_data(items)