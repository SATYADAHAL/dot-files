#include "terminal.h"
#include "cursor_controls.h"

int tty_width() {
  struct winsize dim;
  ioctl(0, TIOCGWINSZ, &dim);
  return dim.ws_col;
}

int tty_height() {
  struct winsize dim;
  ioctl(0, TIOCGWINSZ, &dim);
  return dim.ws_row;
}

// stty functions to chage to raw cbreak restore
int sttyCbreak(int fd) {
  struct termios t;
  if (tcgetattr(fd, &t) == -1)
    return -1;
  t.c_lflag &= ~(ICANON | ECHO);
  t.c_lflag |= ISIG;
  t.c_iflag &= ~ICRNL;
  if (tcsetattr(fd, TCSAFLUSH, &t) == -1)
    return -1;
  return 0;
}
int sttyRaw(int fd) {
  struct termios t;
  if (tcgetattr(fd, &t) == -1)
    return -1;
  t.c_lflag &= ~(ICANON | ISIG | IEXTEN | ECHO);
  /* Noncanonical mode, disable signals, extended
  input processing, and echoing */
  t.c_iflag &= ~(BRKINT | ICRNL | IGNBRK | IGNCR | INLCR | INPCK | ISTRIP |
                 IXON | PARMRK);
  /* Disable special handling of CR, NL, and BREAK.
  No 8th-bit stripping or parity error handling.
  Disable START/STOP output flow control. */
  t.c_oflag &= ~OPOST;
  t.c_cc[VMIN] = 1;
  t.c_cc[VTIME] = 0;
  /* Disable all output processing */
  /* Character-at-a-time input */
  /* with blocking */
  if (tcsetattr(fd, TCSAFLUSH, &t) == -1)
    return -1;
  return 0;
}
int sttyRestore(int fd, struct termios previous) {
  if (tcsetattr(fd, TCSAFLUSH, &previous) == -1)
    return -1;
  return 0;
}
