#include <arpa/inet.h>
#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
#define PORT 8080

// Function declerations
int create_socket();
int set_port_family();
int set_ip_addr(const char *ipaddr);
int connect_to_server();
int send_data();
int close_connection();

int sock = 0, client_fd;
struct sockaddr_in serv_addr;

int create_socket() { // Create Socket
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    printf("\n Socket creation error \n");
    return -1;
  }
  return 0;
}

int set_port_family() { // Define some socket type and PORT
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(PORT);
  return 0;
}

int set_ip_addr(const char *ipaddr) { // Set the IP addres of the server
  if (inet_pton(AF_INET, ipaddr, &serv_addr.sin_addr) <= 0) {
    printf("\nInvalid address/ Address not supported \n");
    return -1;
  }
  return 0;
}

int connect_to_server() {
  if ((client_fd =
           connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)))

      < 0) {
    printf("\nConnection Failed \n");
    return -1;
  }
  return 0;
}

int send_data(int data) {

  char send_data[4];
  int index = 0;
  if (data == 0) {
    if (!(send(sock, "0", 1, 0) == 0))
      return -1;
    return 0;
  }
  while (data > 0) {
    send_data[index] = (char)(data % 10 + 48);
    data = data / 10;
    index++;
  }

  if (send(sock, send_data, index, 0) == 0)
    return 0;
  return -1;
}

int close_connection() {
  if (close(client_fd) == 0)
    return 0;
  return -1;
}

int main(int argc, char const *argv[]) {
  if (!(create_socket() == 0)) {
    return -1;
  }
  printf("Socket Created\n");

  set_port_family();
  printf("Port and family set\n");
  set_ip_addr(argv[1]);
  printf("Setting up IP addr......\nDone\n");
  if (!(connect_to_server() == 0)) {
    return -1;
  }
  printf("Sucess!!! Connected to the server\n");
  for (int i = 0; i < 200; i++) {
    send_data(i);
  }
  printf("Data Sent Succesfully\n");
  close_connection();
  printf("Socket closed\n");

  return 0;
}
